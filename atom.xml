<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Justlovesmile&#39;s BLOG</title>
  <icon>https://www.gravatar.com/avatar/7637880d6fba1338ba97dd0c0ccfc1c8</icon>
  <subtitle>Writer(记录) &amp; Maker(创作) &amp; Developer(启发)</subtitle>
  <link href="https://blog.justlovesmile.top/atom.xml" rel="self"/>
  
  <link href="https://blog.justlovesmile.top/"/>
  <updated>2022-06-28T01:05:11.000Z</updated>
  <id>https://blog.justlovesmile.top/</id>
  
  <author>
    <name>Justlovesmile</name>
    <email>865717150@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客 | 如何为博客添加顶部轮播图和文章推荐卡片</title>
    <link href="https://blog.justlovesmile.top/posts/6a0d6454.html"/>
    <id>https://blog.justlovesmile.top/posts/6a0d6454.html</id>
    <published>2022-06-28T01:05:11.000Z</published>
    <updated>2022-06-28T01:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了<a href="https://blog.zhheo.com/">zhheo</a>大佬的博客首页，发现大佬的布局还是那么的好看，于是果断<code>COPY</code>，再加上我一直想要在我的博客首页加一个大画幅的轮播图插件，于是又参考了<a href="https://hassanwong.top/">Hassan</a>的文章轮播图…经过一番折腾，效果如下：</p><p><img src="https://npm.elemecdn.com/justlovesmile-post@1.0.0/2022062808552601.jpg"></p><h1 id="1-创建首页顶部模块"><a href="#1-创建首页顶部模块" class="headerlink" title="1. 创建首页顶部模块"></a>1. 创建首页顶部模块</h1><h2 id="1-1-创建hometop-pug"><a href="#1-1-创建hometop-pug" class="headerlink" title="1.1 创建hometop.pug"></a>1.1 创建<code>hometop.pug</code></h2><p>在<code>themes/butterfly/layout/includes</code>路径下创建<code>hometop.pug</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">if is_home()</span><br><span class="line">  #home_top</span><br><span class="line">    include bbTimeList.pug</span><br><span class="line">    .home_top_group</span><br><span class="line">      #homeTopGroup.homeTopGroup</span><br><span class="line">        #banner_group</span><br><span class="line">          #banners</span><br><span class="line">            include sticky.pug //轮播图</span><br><span class="line">          .category_group</span><br><span class="line">            .category_item</span><br><span class="line">              a.category_button(href=&lt;左下角标签1路径&gt;,style=&quot;background:linear-gradient(to right,#364f6b,#3fc1c9)&quot;)</span><br><span class="line">                span.category_button_text &lt;标签1名称&gt;</span><br><span class="line">                i.fas.fa-laptop-code</span><br><span class="line">            .category_item</span><br><span class="line">              a.category_button(href=&lt;左下角标签2路径&gt;,style=&quot;background:linear-gradient(to right,#6639a6,#3490de)&quot;)</span><br><span class="line">                span.category_button_text &lt;标签2名称&gt;</span><br><span class="line">                i.fas.fa-lightbulb</span><br><span class="line">            .category_item</span><br><span class="line">              a.category_button(href=&lt;左下角标签3路径&gt;,style=&quot;background:linear-gradient(to right,#f65,#ffbf37)&quot;)</span><br><span class="line">                span.category_button_text &lt;标签3名称&gt;</span><br><span class="line">                i.fas.fa-book</span><br><span class="line">        .top_post_group // 右侧文章推荐卡片</span><br><span class="line">          if site.data.slider</span><br><span class="line">            each i in site.data.slider</span><br><span class="line">              .top_post_item</span><br><span class="line">                .post_cover</span><br><span class="line">                  a(href=url_for(i.link) title=i.title)</span><br><span class="line">                    img.post_bg.entered.loaded(src=url_for(i.cover))</span><br><span class="line">                    .post_cover_info</span><br><span class="line">                      p.post_cover_text= i.description</span><br><span class="line"></span><br><span class="line">                .post_info(onclick=`&quot;window.open(`+url_for(i.link)+`,&quot;_self&quot;)&quot;`)</span><br><span class="line">                  a.article-title(href=url_for(i.link) title=i.title)= i.title</span><br></pre></td></tr></table></figure><p>其中第一行的<code>is_home()</code>是<code>Hexo</code>自带的辅助函数，用于判断是否为首页，但是其在<code>justlovesmile.top/</code>以及<code>justlovesmile.top/page/2/</code>等页面都返回<code>True</code>，因此如果你只想在首页的第一页显示该模块，可以使用<code>is_current(&#39;/&#39;)</code>。</p><h2 id="1-2-添加css样式"><a href="#1-2-添加css样式" class="headerlink" title="1.2 添加css样式"></a>1.2 添加<code>css</code>样式</h2><p>在自己的<code>css</code>文件中添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    --mj-white: <span class="number">#fff</span>;</span><br><span class="line">    --mj-card-bg: <span class="number">#fff</span>;</span><br><span class="line">    --mj-theme: <span class="number">#425AEF</span>;</span><br><span class="line">    --mj-<span class="selector-tag">main</span>: <span class="number">#425AEF</span>;</span><br><span class="line">    --mj-secondbg: <span class="number">#ededed</span>;</span><br><span class="line">    --mj-card-<span class="attribute">border</span>: <span class="number">#e3e8f7</span>;</span><br><span class="line">    --style-<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--mj-card-border);</span><br><span class="line">    --style-hover-<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--mj-theme);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* home top */</span></span><br><span class="line"><span class="selector-id">#home_top</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1500px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: .<span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.home_top_group</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.homeTopGroup</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">overflow-x</span>: score;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.homeTopGroup</span>::-webkit-scrollbar &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.homeTopGroup</span> <span class="selector-id">#banner_group</span> &#123;<span class="attribute">display</span>: flex;&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#banners</span> &#123;<span class="attribute">display</span>: none;&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1300px</span>)&#123;</span><br><span class="line">  <span class="selector-class">.homeTopGroup</span> <span class="selector-id">#banner_group</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">600px</span> - <span class="number">1.5rem</span>);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-id">#banners</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--mj-main);</span><br><span class="line">    <span class="attribute">margin-bottom</span>: .<span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: .<span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="built_in">var</span>(--style-border);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-id">#banners</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="built_in">var</span>(--style-hover-border);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.homeTopGroup</span> <span class="selector-class">.category_group</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.homeTopGroup</span> <span class="selector-class">.category_item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">3</span> - .<span class="number">33rem</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: .<span class="number">5rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.homeTopGroup</span> <span class="selector-class">.category_item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#banner-page</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.top_post_group</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">328px</span> + .<span class="number">5rem</span>);</span><br><span class="line">    <span class="attribute">align-content</span>: space-between;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">600px</span> + <span class="number">1.5rem</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.homeTopGroup</span> <span class="selector-class">.category_group</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.homeTopGroup</span> <span class="selector-class">.category_item</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">48%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.homeTopGroup</span> <span class="selector-class">.category_item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.homeTopGroup</span> <span class="selector-class">.category_item</span> <span class="selector-tag">a</span><span class="selector-class">.category_button</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--mj-card-bg);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">4em</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">9rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--mj-white);</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">4s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">39</span>,.<span class="number">575</span>,.<span class="number">565</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">font-family</span>: PingFang SC,Hiragino Sans GB,Microsoft YaHei;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.category_button_text</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.category_button</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">10deg</span>);</span><br><span class="line">    <span class="comment">/*width: 100px;</span></span><br><span class="line"><span class="comment">    text-align: center;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.category_button</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">8s</span>;</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">15s</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.category_button</span><span class="selector-pseudo">:hover</span>:after&#123;</span><br><span class="line">    width: <span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">8s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.category_button</span>:after &#123;</span><br><span class="line">    top: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--mj-white);</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">8s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>)&#123;</span><br><span class="line">  <span class="selector-id">#home_top</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.homeTopGroup</span> <span class="selector-class">.category_group</span> &#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">130px</span><span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.top_post_group</span> <span class="selector-class">.top_post_item</span>&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top_post_group</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top_post_group</span> <span class="selector-class">.top_post_item</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">164px</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">164px</span>;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">    <span class="attribute">margin-left</span>: .<span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--mj-card-bg);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">border</span>: <span class="built_in">var</span>(--style-border);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top_post_group</span> <span class="selector-class">.top_post_item</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">border</span>: <span class="built_in">var</span>(--style-hover-border);&#125;</span><br><span class="line"><span class="selector-class">.top_post_group</span> <span class="selector-class">.top_post_item</span> <span class="selector-class">.post_cover</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top_post_group</span> <span class="selector-class">.top_post_item</span> <span class="selector-class">.post_cover</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--mj-secondbg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top_post_group</span> <span class="selector-class">.top_post_item</span> <span class="selector-class">.post_cover</span> <span class="selector-class">.post_cover_info</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">101%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.7</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.top_post_group</span> <span class="selector-class">.top_post_item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.post_cover</span> <span class="selector-class">.post_cover_info</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top_post_group</span> <span class="selector-class">.top_post_item</span> <span class="selector-class">.post_cover</span> <span class="selector-class">.post_cover_info</span> <span class="selector-class">.post_cover_text</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top_post_group</span> <span class="selector-class">.top_post_item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.post_info</span>,</span><br><span class="line"><span class="selector-class">.top_post_group</span> <span class="selector-class">.top_post_item</span><span class="selector-pseudo">:focus</span> <span class="selector-class">.post_info</span>&#123;</span><br><span class="line">    <span class="comment">/*background: var(--mj-theme);*/</span></span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">60px</span> <span class="number">0</span> <span class="number">0</span> <span class="built_in">var</span>(--mj-theme);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top_post_group</span> <span class="selector-class">.top_post_item</span> <span class="selector-class">.post_info</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--mj-fontcolor) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top_post_group</span> <span class="selector-class">.top_post_item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.post_info</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--mj-white) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top_post_group</span> <span class="selector-class">.top_post_item</span> <span class="selector-class">.post_info</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">2rem</span> .<span class="number">5rem</span> .<span class="number">3rem</span> .<span class="number">5rem</span><span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top_post_group</span> <span class="selector-class">.top_post_item</span> <span class="selector-class">.post_info</span> <span class="selector-class">.article-title</span> &#123;</span><br><span class="line">    -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">    <span class="attribute">align-content</span>: center;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">8rem</span><span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-创建顶部轮播图"><a href="#2-创建顶部轮播图" class="headerlink" title="2. 创建顶部轮播图"></a>2. 创建顶部轮播图</h1><h2 id="2-1-创建sticky-pug"><a href="#2-1-创建sticky-pug" class="headerlink" title="2.1 创建sticky.pug"></a>2.1 创建<code>sticky.pug</code></h2><p>在<code>themes/butterfly/layout/includes</code>路径下创建<code>sticky.pug</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">link(rel=&#x27;stylesheet&#x27; href=&#x27;https://unpkg.com/swiper/swiper-bundle.min.css&#x27;)</span><br><span class="line">#sticky</span><br><span class="line">  #stickyList.swiper-container</span><br><span class="line">    #stickyWrapper.swiper-wrapper</span><br><span class="line">      .swiper-slide(onclick=`window.open(&#x27;/random/&#x27;,&#x27;_self&#x27;)`)</span><br><span class="line">        .grid-img</span><br><span class="line">          iframe#banner-page(src=&quot;&lt;这里放iframe地址&gt;&quot; frameborder=&quot;0&quot; loading=&quot;eager&quot;) // 可以放iframe</span><br><span class="line">        .grid-title</span><br><span class="line">          span 随便逛逛</span><br><span class="line">          i.fas.fa-arrow-right</span><br><span class="line">      .swiper-slide(onclick=`window.open(&#x27;/video/&#x27;,&#x27;_self&#x27;)`)</span><br><span class="line">        .grid-img</span><br><span class="line">          img.cover.entered.loaded(alt=&#x27;VLOG&#x27; src=&#x27;https://npm.elemecdn.com/justlovesmile-photo/myvlog.gif&#x27;) // 可以放GIF</span><br><span class="line">        .grid-title</span><br><span class="line">          span 看看VLOG</span><br><span class="line">          i.fas.fa-arrow-right</span><br><span class="line">      .swiper-slide(onclick=`window.open(&#x27;/music/&#x27;,&#x27;_self&#x27;)`)</span><br><span class="line">        .grid-img</span><br><span class="line">          img.cover.entered.loaded(alt=&#x27;歌单&#x27; src=&#x27;https://npm.elemecdn.com/justlovesmile-img/gitar.jpg&#x27;) // 可以放图片</span><br><span class="line">        .grid-title</span><br><span class="line">          span 听听音乐</span><br><span class="line">          i.fas.fa-arrow-right</span><br><span class="line">    //- 分页器</span><br><span class="line">    .swiper-pagination</span><br><span class="line"></span><br><span class="line">.js-pjax</span><br><span class="line">  script(src=&#x27;https://unpkg.com/swiper/swiper-bundle.min.js&#x27;)</span><br><span class="line">  script(src=&#x27;/js/sticky.js&#x27;)</span><br><span class="line">link(rel=&#x27;stylesheet&#x27; href=&#x27;/css/sticky.css&#x27;)</span><br></pre></td></tr></table></figure><h2 id="2-2-创建sticky-js"><a href="#2-2-创建sticky-js" class="headerlink" title="2.2 创建sticky.js"></a>2.2 创建<code>sticky.js</code></h2><p>在<code>themes/butterfly/source/js</code>路径下创建<code>sticky.js</code>文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper(<span class="string">&#x27;#stickyList&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">direction</span>: <span class="string">&#x27;horizontal&#x27;</span>,</span><br><span class="line">      <span class="attr">speed</span>: <span class="number">600</span>,</span><br><span class="line">      <span class="attr">loop</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">effect</span> : <span class="string">&#x27;fade&#x27;</span>,</span><br><span class="line">      <span class="attr">loopPreventsSlide</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">autoplay</span>: &#123;</span><br><span class="line">        <span class="attr">delay</span>: <span class="number">20000</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">mousewheel</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">pagination</span>: &#123;</span><br><span class="line">          <span class="attr">el</span>: <span class="string">&quot;.swiper-pagination&quot;</span>,</span><br><span class="line">          <span class="attr">dynamicBullets</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="2-3-创建sticky-css"><a href="#2-3-创建sticky-css" class="headerlink" title="2.3 创建sticky.css"></a>2.3 创建<code>sticky.css</code></h2><p>在<code>themes/butterfly/source/css</code>路径下创建<code>sticky.css</code>文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    --mj-white: <span class="number">#fff</span>;</span><br><span class="line">    --mj-card-bg: <span class="number">#fff</span>;</span><br><span class="line">    --mj-theme: <span class="number">#425AEF</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sticky</span>,</span><br><span class="line"><span class="selector-id">#stickyList</span>,</span><br><span class="line"><span class="selector-id">#stickyWrapper</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.swiper-container</span><span class="selector-id">#stickyList</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#stickyList</span> <span class="selector-class">.swiper-slide</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--mj-card-bg);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#stickyList</span> <span class="selector-class">.swiper-slide</span> <span class="selector-class">.grid-img</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">16.2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#stickyList</span> <span class="selector-class">.swiper-slide</span> <span class="selector-class">.grid-img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#stickyList</span> <span class="selector-class">.swiper-slide</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.grid-title</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: .<span class="number">8</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#stickyList</span> <span class="selector-class">.swiper-slide</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.grid-img</span>&#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#stickyList</span> <span class="selector-class">.swiper-slide</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.grid-title</span> <span class="selector-tag">span</span>,</span><br><span class="line"><span class="selector-id">#stickyList</span> <span class="selector-class">.swiper-slide</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.grid-title</span> <span class="selector-tag">i</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">  <span class="attribute">transition</span>: .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#stickyList</span> <span class="selector-class">.swiper-slide</span> <span class="selector-class">.grid-title</span> <span class="selector-tag">span</span>,</span><br><span class="line"><span class="selector-id">#stickyList</span> <span class="selector-class">.swiper-slide</span> <span class="selector-class">.grid-title</span> <span class="selector-tag">i</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">transition</span>: .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#stickyList</span> <span class="selector-class">.swiper-slide</span> <span class="selector-class">.grid-title</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--mj-theme);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--mj-white);</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition</span>: .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#stickyList</span> <span class="selector-class">.swiper-slide</span> <span class="selector-class">.grid-title</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">5rem</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#stickyList</span> <span class="selector-class">.swiper-slide</span> <span class="selector-class">.grid-title</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">4rem</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-id">#sticky</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-创建文章推荐卡片"><a href="#3-创建文章推荐卡片" class="headerlink" title="3. 创建文章推荐卡片"></a>3. 创建文章推荐卡片</h1><h2 id="3-1-创建slider-yml"><a href="#3-1-创建slider-yml" class="headerlink" title="3.1 创建slider.yml"></a>3.1 创建<code>slider.yml</code></h2><p>在<code>hexo\source\_data\</code>路径下创建<code>slider.yml</code>文件，最好准备<code>6</code>个推荐文章，例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#- cover: 封面图片链接</span></span><br><span class="line"><span class="comment">#  timeline: &#x27;2020-10-01&#x27; # 日期，需要用&#x27;&#x27;包裹</span></span><br><span class="line"><span class="comment">#  link: 置顶文章链接，站内文章建议填相对链接</span></span><br><span class="line"><span class="comment">#  title: 置顶文章标题</span></span><br><span class="line"><span class="comment">#  description: 置顶文章描述</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/justlovesmile-img/20200715201402.png</span></span><br><span class="line">  <span class="attr">timeline:</span> <span class="string">&#x27;2020-07-15&#x27;</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">/posts/c8972b63.html</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">必看</span> <span class="string">|</span> <span class="string">Hexo博客搭建超级指南</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">Hexo博客搭建全过程，环境部署，博客魔改等等...</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/justlovesmile-img/090412-1557363852af44.jpg</span></span><br><span class="line">  <span class="attr">timeline:</span> <span class="string">&#x27;2020-04-09&#x27;</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">/posts/56163.html</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Hexo博客</span> <span class="string">|</span> <span class="string">博客中能用到的代码（一）</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">这篇文章介绍了如何使用font</span> <span class="string">awesome图标字体库，使用动态图标，添加网页运行时间，全站变黑白，鼠标点击特效，网页标题的动态效果，网页樱花特效，鼠标触动音乐特效</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/justlovesmile-img/095658-1562983018e455.jpg</span></span><br><span class="line">  <span class="attr">timeline:</span> <span class="string">&#x27;2020-04-09&#x27;</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">/posts/15391.html</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Hexo博客</span> <span class="string">|</span> <span class="string">博客中能用到的代码（二）</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">这篇文章介绍了如何添加旋转小人和每日诗句</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/justlovesmile-img/20220331192754.png</span></span><br><span class="line">  <span class="attr">timeline:</span> <span class="string">&#x27;2022-03-31&#x27;</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">/posts/a806bebe.html</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">推荐</span> <span class="string">|</span> <span class="string">计算机专业，大学课程「笔记归档」</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">本文是博主本科期间的专业课程学习笔记的整理和归档，适合计算机专业的同学阅读。</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/justlovesmile-img/20220318183107.png</span></span><br><span class="line">  <span class="attr">timeline:</span> <span class="string">&#x27;2022-03-18&#x27;</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">/posts/589ec011.html</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">深度学习</span> <span class="string">|</span> <span class="string">Detectron2使用指南</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">Detectron2是Facebook</span> <span class="string">AI</span> <span class="string">Research的检测和分割框架，其主要基于PyTorch实现，但具有更模块化设计，因此它是灵活且便于扩展的。</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/justlovesmile-img/202109111517311.jpg</span></span><br><span class="line">  <span class="attr">timeline:</span> <span class="string">&#x27;2021-09-11&#x27;</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">/posts/865c56ba.html</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">目标检测</span> <span class="string">|</span> <span class="string">常用数据集标注格式及生成脚本</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">目标检测是计算机视觉任务中的一个重要研究方向，是计算机视觉的根本性问题之一，是其他诸多计算机视觉任务的基础以及前提。本文主要介绍了目标检测数据集的几种标注格式和转换代码。</span></span><br></pre></td></tr></table></figure><h2 id="3-2-css样式"><a href="#3-2-css样式" class="headerlink" title="3.2 css样式"></a>3.2 <code>css</code>样式</h2><p>见<code>1.2</code>中<code>.top_post_group</code>等样式类，不再赘述…</p><h1 id="4-补充：zhheo大佬首页人来人往特效"><a href="#4-补充：zhheo大佬首页人来人往特效" class="headerlink" title="4. 补充：zhheo大佬首页人来人往特效"></a>4. 补充：zhheo大佬首页人来人往特效</h1><h2 id="4-1-创建people页面"><a href="#4-1-创建people页面" class="headerlink" title="4.1 创建people页面"></a>4.1 创建<code>people</code>页面</h2><p>在<code>hexo\source\</code>路径下创建<code>people</code>文件夹，其中创建<code>index.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>MJ&#x27;s People Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, minimum-scale=1.0, maximum-scale=1.0, minimal-ui&quot;</span> /&gt;</span><span class="comment">&lt;!--禁止缩放--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/people/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;808&quot;</span> <span class="attr">height</span>=<span class="string">&quot;244&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/gsap/3.9.1/gsap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/people/script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-创建css样式"><a href="#4-2-创建css样式" class="headerlink" title="4.2 创建css样式"></a>4.2 创建<code>css</code>样式</h2><p>在<code>hexo\source\people</code>路径下，创建<code>style.css</code>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background-color</span>:<span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#canvas</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>::-webkit-scrollbar&#123;</span><br><span class="line">display:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-创建js文件"><a href="#4-3-创建js文件" class="headerlink" title="4.3 创建js文件"></a>4.3 创建<code>js</code>文件</h2><p>在<code>hexo\source\people</code>路径下，创建<code>script.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="function"><span class="keyword">function</span> <span class="title">_toConsumableArray</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()&#125;<span class="function"><span class="keyword">function</span> <span class="title">_nonIterableSpread</span>(<span class="params"></span>)</span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.&quot;</span>)&#125;<span class="function"><span class="keyword">function</span> <span class="title">_unsupportedIterableToArray</span>(<span class="params">e,r</span>)</span>&#123;<span class="keyword">if</span>(e)&#123;<span class="keyword">if</span>(<span class="string">&quot;string&quot;</span>==<span class="keyword">typeof</span> e)<span class="keyword">return</span> _arrayLikeToArray(e,r);<span class="keyword">var</span> t=<span class="built_in">Object</span>.prototype.toString.call(e).slice(<span class="number">8</span>,-<span class="number">1</span>);<span class="keyword">return</span><span class="string">&quot;Object&quot;</span>===t&amp;&amp;e.constructor&amp;&amp;(t=e.constructor.name),<span class="string">&quot;Map&quot;</span>===t||<span class="string">&quot;Set&quot;</span>===t?<span class="built_in">Array</span>.from(e):<span class="string">&quot;Arguments&quot;</span>===t||<span class="regexp">/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/</span>.test(t)?_arrayLikeToArray(e,r):<span class="keyword">void</span> <span class="number">0</span>&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">_iterableToArray</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">if</span>(<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> <span class="built_in">Symbol</span>&amp;&amp;<span class="literal">null</span>!=e[<span class="built_in">Symbol</span>.iterator]||<span class="literal">null</span>!=e[<span class="string">&quot;@@iterator&quot;</span>])<span class="keyword">return</span> <span class="built_in">Array</span>.from(e)&#125;<span class="function"><span class="keyword">function</span> <span class="title">_arrayWithoutHoles</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(e))<span class="keyword">return</span> _arrayLikeToArray(e)&#125;<span class="function"><span class="keyword">function</span> <span class="title">_arrayLikeToArray</span>(<span class="params">e,r</span>)</span>&#123;(<span class="literal">null</span>==r||r&gt;e.length)&amp;&amp;(r=e.length);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>,a=<span class="keyword">new</span> <span class="built_in">Array</span>(r);t&lt;r;t++)a[t]=e[t];<span class="keyword">return</span> a&#125;<span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">e,r</span>)</span>&#123;<span class="keyword">if</span>(!(e <span class="keyword">instanceof</span> r))<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Cannot call a class as a function&quot;</span>)&#125;<span class="function"><span class="keyword">function</span> <span class="title">_defineProperties</span>(<span class="params">e,r</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;r.length;t++)&#123;<span class="keyword">var</span> a=r[t];a.enumerable=a.enumerable||!<span class="number">1</span>,a.configurable=!<span class="number">0</span>,<span class="string">&quot;value&quot;</span><span class="keyword">in</span> a&amp;&amp;(a.writable=!<span class="number">0</span>),<span class="built_in">Object</span>.defineProperty(e,a.key,a)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">_createClass</span>(<span class="params">e,r,t</span>)</span>&#123;<span class="keyword">return</span> r&amp;&amp;_defineProperties(e.prototype,r),t&amp;&amp;_defineProperties(e,t),e&#125;<span class="keyword">var</span> config=&#123;<span class="attr">src</span>:<span class="string">&quot;https://npm.elemecdn.com/guli-heo/others/open-peeps-sheet.png&quot;</span>,<span class="attr">rows</span>:<span class="number">15</span>,<span class="attr">cols</span>:<span class="number">7</span>&#125;,randomRange=<span class="function"><span class="keyword">function</span>(<span class="params">e,r</span>)</span>&#123;<span class="keyword">return</span> e+<span class="built_in">Math</span>.random()*(r-e)&#125;,randomIndex=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> <span class="number">0</span>|randomRange(<span class="number">0</span>,e.length)&#125;,removeFromArray=<span class="function"><span class="keyword">function</span>(<span class="params">e,r</span>)</span>&#123;<span class="keyword">return</span> e.splice(r,<span class="number">1</span>)[<span class="number">0</span>]&#125;,removeItemFromArray=<span class="function"><span class="keyword">function</span>(<span class="params">e,r</span>)</span>&#123;<span class="keyword">return</span> removeFromArray(e,e.indexOf(r))&#125;,removeRandomFromArray=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> removeFromArray(e,randomIndex(e))&#125;,getRandomFromArray=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e[<span class="number">0</span>|randomIndex(e)]&#125;,resetPeep=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> r,t,a=e.stage,n=e.peep,o=<span class="number">.5</span>&lt;<span class="built_in">Math</span>.random()?<span class="number">1</span>:-<span class="number">1</span>,i=<span class="number">100</span>-<span class="number">250</span>*gsap.parseEase(<span class="string">&quot;power2.in&quot;</span>)(<span class="built_in">Math</span>.random()),s=a.height-n.height+i;<span class="keyword">return</span> <span class="number">1</span>==o?(r=-n.width,t=a.width,n.scaleX=<span class="number">1</span>):(r=a.width+n.width,t=<span class="number">0</span>,n.scaleX=-<span class="number">1</span>),n.x=r,n.y=s,&#123;<span class="attr">startX</span>:r,<span class="attr">startY</span>:n.anchorY=s,<span class="attr">endX</span>:t&#125;&#125;,normalWalk=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> r=e.peep,t=e.props,a=(t.startX,t.startY),n=t.endX,o=gsap.timeline();<span class="keyword">return</span> o.timeScale(randomRange(<span class="number">.5</span>,<span class="number">1.5</span>)),o.to(r,&#123;<span class="attr">duration</span>:<span class="number">10</span>,<span class="attr">x</span>:n,<span class="attr">ease</span>:<span class="string">&quot;none&quot;</span>&#125;,<span class="number">0</span>),o.to(r,&#123;<span class="attr">duration</span>:<span class="number">.25</span>,<span class="attr">repeat</span>:<span class="number">40</span>,<span class="attr">yoyo</span>:!<span class="number">0</span>,<span class="attr">y</span>:a-<span class="number">10</span>&#125;,<span class="number">0</span>),o&#125;,walks=[normalWalk],Peep=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> r=e.image,t=e.rect;_classCallCheck(<span class="built_in">this</span>,a),<span class="built_in">this</span>.image=r,<span class="built_in">this</span>.setRect(t),<span class="built_in">this</span>.x=<span class="number">0</span>,<span class="built_in">this</span>.y=<span class="number">0</span>,<span class="built_in">this</span>.anchorY=<span class="number">0</span>,<span class="built_in">this</span>.scaleX=<span class="number">1</span>,<span class="built_in">this</span>.walk=<span class="literal">null</span>&#125;<span class="keyword">return</span> _createClass(a,[&#123;<span class="attr">key</span>:<span class="string">&quot;setRect&quot;</span>,<span class="attr">value</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="built_in">this</span>.rect=e,<span class="built_in">this</span>.width=e[<span class="number">2</span>],<span class="built_in">this</span>.height=e[<span class="number">3</span>],<span class="built_in">this</span>.drawArgs=[<span class="built_in">this</span>.image].concat(_toConsumableArray(e),[<span class="number">0</span>,<span class="number">0</span>,<span class="built_in">this</span>.width,<span class="built_in">this</span>.height])&#125;&#125;,&#123;<span class="attr">key</span>:<span class="string">&quot;render&quot;</span>,<span class="attr">value</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;e.save(),e.translate(<span class="built_in">this</span>.x,<span class="built_in">this</span>.y),e.scale(<span class="built_in">this</span>.scaleX,<span class="number">1</span>),e.drawImage.apply(e,_toConsumableArray(<span class="built_in">this</span>.drawArgs)),e.restore()&#125;&#125;]),a&#125;(),img=<span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);img.onload=init,img.src=config.src;<span class="keyword">var</span> canvas=<span class="built_in">document</span>.querySelector(<span class="string">&quot;#canvas&quot;</span>),ctx=canvas.getContext(<span class="string">&quot;2d&quot;</span>),stage=&#123;<span class="attr">width</span>:<span class="number">0</span>,<span class="attr">height</span>:<span class="number">0</span>&#125;,allPeeps=[],availablePeeps=[],crowd=[];<span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;createPeeps(),resize(),gsap.ticker.add(render),<span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>,resize)&#125;<span class="function"><span class="keyword">function</span> <span class="title">createPeeps</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=config.rows,r=config.cols,t=e*r,a=img.naturalWidth/e,n=img.naturalHeight/r,o=<span class="number">0</span>;o&lt;t;o++)allPeeps.push(<span class="keyword">new</span> Peep(&#123;<span class="attr">image</span>:img,<span class="attr">rect</span>:[o%e*a,(o/e|<span class="number">0</span>)*n,a,n]&#125;))&#125;<span class="function"><span class="keyword">function</span> <span class="title">resize</span>(<span class="params"></span>)</span>&#123;stage.width=canvas.clientWidth,stage.height=canvas.clientHeight,canvas.width=stage.width*devicePixelRatio,canvas.height=stage.height*devicePixelRatio,crowd.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;e.walk.kill()&#125;),crowd.length=<span class="number">0</span>,availablePeeps.length=<span class="number">0</span>,availablePeeps.push.apply(availablePeeps,allPeeps),initCrowd()&#125;<span class="function"><span class="keyword">function</span> <span class="title">initCrowd</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(;availablePeeps.length;)addPeepToCrowd().walk.progress(<span class="built_in">Math</span>.random())&#125;<span class="function"><span class="keyword">function</span> <span class="title">addPeepToCrowd</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> e=removeRandomFromArray(availablePeeps),r=getRandomFromArray(walks)(&#123;<span class="attr">peep</span>:e,<span class="attr">props</span>:resetPeep(&#123;<span class="attr">peep</span>:e,<span class="attr">stage</span>:stage&#125;)&#125;).eventCallback(<span class="string">&quot;onComplete&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;removePeepFromCrowd(e),addPeepToCrowd()&#125;);<span class="keyword">return</span> e.walk=r,crowd.push(e),crowd.sort(<span class="function"><span class="keyword">function</span>(<span class="params">e,r</span>)</span>&#123;<span class="keyword">return</span> e.anchorY-r.anchorY&#125;),e&#125;<span class="function"><span class="keyword">function</span> <span class="title">removePeepFromCrowd</span>(<span class="params">e</span>)</span>&#123;removeItemFromArray(crowd,e),availablePeeps.push(e)&#125;<span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;canvas.width=canvas.width,ctx.save(),ctx.scale(devicePixelRatio,devicePixelRatio),crowd.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;e.render(ctx)&#125;),ctx.restore()&#125;</span><br></pre></td></tr></table></figure><h1 id="5-参考文章"><a href="#5-参考文章" class="headerlink" title="5. 参考文章"></a>5. 参考文章</h1><p><a href="https://blog.zhheo.com/">张洪Heo - 分享设计与科技生活</a><br><a href="https://hassanwong.top/posts/9d49f75f/#%E9%A6%96%E9%A1%B5%E7%BD%AE%E9%A1%B6%E6%96%87%E7%AB%A0%E8%BD%AE%E6%92%AD%E7%BB%84%E4%BB%B6">Butterfly主题美化魔改集锦 | Hassan’s Blog</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近看了&lt;a href=&quot;https://blog.zhheo.com/&quot;&gt;zhheo&lt;/a&gt;大佬的博客首页，发现大佬的布局还是那么的好看，于是果断&lt;code&gt;COPY&lt;/code&gt;，再加上我一直想要在我的博客首页加一个大画幅的轮播图插件，于是又参考了&lt;a href=&quot;ht</summary>
      
    
    
    
    <category term="博客相关" scheme="https://blog.justlovesmile.top/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="前端" scheme="https://blog.justlovesmile.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Hexo" scheme="https://blog.justlovesmile.top/tags/Hexo/"/>
    
    <category term="JS" scheme="https://blog.justlovesmile.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客 | 视频点播页面，如何在博客上优雅地展示B站等平台视频</title>
    <link href="https://blog.justlovesmile.top/posts/7127424c.html"/>
    <id>https://blog.justlovesmile.top/posts/7127424c.html</id>
    <published>2022-05-04T02:26:47.000Z</published>
    <updated>2022-05-04T02:26:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前考虑到自己剪了一些vlog，但是直接用<code>iframe</code>嵌入的话页面会很长，而且点开这个页面会自动加载全部视频，感觉很奇怪，并且不能很好的展示，于是写了一个视频点播页面</p></blockquote><h2 id="1-新建路径页面"><a href="#1-新建路径页面" class="headerlink" title="1. 新建路径页面"></a>1. 新建路径页面</h2><p>首先使用命令新建一个页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page video</span><br></pre></td></tr></table></figure><p>在<code>index.md</code>里面写入一下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我的视频</span><br><span class="line">date: 2020-07-17 20:54:09</span><br><span class="line">comment: true</span><br><span class="line">top_img: false</span><br><span class="line">showToc: true</span><br><span class="line">aside: false</span><br><span class="line">type: &quot;video&quot;</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://npm.elemecdn.com/jquery@latest/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">selectVideo</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> src=$(<span class="string">&quot;#video-item-&quot;</span>+id).attr(<span class="string">&quot;data-src&quot;</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#video-select&quot;</span>).html(<span class="string">&quot;&lt;iframe id=&#x27;video-iframe&#x27; src=&#x27;&quot;</span>+src+<span class="string">&quot;&#x27; scrolling=&#x27;no&#x27; border=&#x27;0&#x27; frameborder=&#x27;no&#x27; framespacing=&#x27;0&#x27; allowfullscreen=&#x27;true&#x27;&gt; &lt;/iframe&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">&quot;video-select&quot;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(iframe.attachEvent)&#123;</span></span><br><span class="line"><span class="javascript">      iframe.attachEvent(<span class="string">&quot;onreadystatechange&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (iframe.readyState === <span class="string">&quot;complete&quot;</span> || iframe.readyState == <span class="string">&quot;loaded&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">          iframe.detachEvent(<span class="string">&quot;onreadystatechange&quot;</span>, <span class="built_in">arguments</span>.callee);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;video-mirror&#x27;</span>).length&gt;<span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&quot;1true&quot;</span>)</span></span><br><span class="line"><span class="javascript">          $(<span class="string">&quot;.video-mirror&quot;</span>).attr(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;transform:scaleX(-1);&quot;</span>)</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">      iframe.addEventListener(<span class="string">&quot;load&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.removeEventListener(<span class="string">&quot;load&quot;</span>, <span class="built_in">arguments</span>.call, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;video-mirror&#x27;</span>).length&gt;<span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;2true&quot;</span>)</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;.video-mirror&quot;</span>).attr(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;transform:scaleX(-1);&quot;</span>)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(selectVideo(<span class="number">0</span>));</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-新建主题页面"><a href="#2-新建主题页面" class="headerlink" title="2. 新建主题页面"></a>2. 新建主题页面</h2><p>在主题路径<code>themes\butterfly-dev\layout\includes\page</code>下新建<code>video.pug</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">//if top_img === false</span><br><span class="line">//  h1.page-title= page.title</span><br><span class="line">#video-select.video-select</span><br><span class="line">hr</span><br><span class="line">h3= 视频列表</span><br><span class="line">.videos</span><br><span class="line">  if site.data.video</span><br><span class="line">    each i,index in site.data.video</span><br><span class="line">      div(class=&quot;myvideo&quot; onclick=`javascipt:selectVideo(`+index+`)`)</span><br><span class="line">        div(id=`video-item-`+index class=&quot;video-item&quot; data-src=url_for(i.link))</span><br><span class="line">          a(href=&quot;#video-select&quot;)</span><br><span class="line">            img.video-item-cover(src=url_for(i.cover))</span><br><span class="line">        .video-desc</span><br><span class="line">          .video-title</span><br><span class="line">            a(href=&quot;#video-select&quot;)= i.title</span><br><span class="line">          .video-info= i.description</span><br><span class="line"></span><br><span class="line">style.</span><br><span class="line">  .videos&#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: repeat(4, 1fr);</span><br><span class="line">    grid-column-gap: 20px;</span><br><span class="line">    grid-row-gap: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">  @media screen and (max-width: 1200px)&#123;</span><br><span class="line">    .videos&#123;</span><br><span class="line">      display: grid;</span><br><span class="line">      grid-template-columns: repeat(3, 1fr);</span><br><span class="line">      grid-column-gap: 20px;</span><br><span class="line">      grid-row-gap: 20px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  @media screen and (max-width: 900px)&#123;</span><br><span class="line">    .videos&#123;</span><br><span class="line">      display: grid;</span><br><span class="line">      grid-template-columns: repeat(2, 1fr);</span><br><span class="line">      grid-column-gap: 20px;</span><br><span class="line">      grid-row-gap: 20px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  @media screen and (max-width: 600px)&#123;</span><br><span class="line">    .videos&#123;</span><br><span class="line">      display: grid;</span><br><span class="line">      grid-template-columns: repeat(1, 1fr);</span><br><span class="line">      grid-column-gap: 20px;</span><br><span class="line">      grid-row-gap: 20px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .myvideo&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 100%;</span><br><span class="line">    border: 1px solid var(--mj-card-border);</span><br><span class="line">    border-radius: 12px;</span><br><span class="line">  &#125;</span><br><span class="line">  .video-item&#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    height: 160px;</span><br><span class="line">    border-top-left-radius: 12px;</span><br><span class="line">    border-top-right-radius: 12px;</span><br><span class="line">  &#125;</span><br><span class="line">  .video-item img &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 100%;</span><br><span class="line">    margin: 0 !important;</span><br><span class="line">    height: 100%;</span><br><span class="line">    transform: scale(1.0);</span><br><span class="line">    transition: .3s;</span><br><span class="line">    object-fit: cover;</span><br><span class="line">  &#125;</span><br><span class="line">  .myvideo:hover .video-item img &#123;</span><br><span class="line">    transition: .3s;</span><br><span class="line">    transform: scale(1.1);</span><br><span class="line">  &#125;</span><br><span class="line">  .video-title&#123;</span><br><span class="line">    padding: 5px 10px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">  .video-info&#123;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    padding: 0 10px;</span><br><span class="line">    color: var(--mj-secondtext);</span><br><span class="line">  &#125;</span><br><span class="line">  .video-select&#123;</span><br><span class="line">    position:relative;</span><br><span class="line">    width:100%;</span><br><span class="line">    height:0;</span><br><span class="line">    padding-bottom:75%;</span><br><span class="line">  &#125;</span><br><span class="line">  .video-select iframe&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    width:100%;</span><br><span class="line">    height:100%;</span><br><span class="line">    left:0;</span><br><span class="line">    top:0;</span><br><span class="line">    border-radius: 12px;</span><br><span class="line">  &#125;</span><br><span class="line">!= page.content</span><br></pre></td></tr></table></figure><h2 id="3-注册video页面"><a href="#3-注册video页面" class="headerlink" title="3. 注册video页面"></a>3. 注册video页面</h2><p>在主题路径<code>butterfly/layout/</code>的<code>page.pug</code>文件中注册上述页面模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  #page</span><br><span class="line">    if top_img === false</span><br><span class="line">      h1.page-title= page.title</span><br><span class="line"></span><br><span class="line">    case page.type</span><br><span class="line">      when &#x27;tags&#x27;</span><br><span class="line">        include includes/page/tags.pug</span><br><span class="line">      when &#x27;link&#x27;</span><br><span class="line">        include includes/page/flink.pug</span><br><span class="line">      when &#x27;categories&#x27;</span><br><span class="line">        include includes/page/categories.pug</span><br><span class="line">+     when &#x27;video&#x27;</span><br><span class="line">+       include includes/page/video.pug</span><br><span class="line">      default</span><br><span class="line">        include includes/page/default-page.pug</span><br><span class="line"></span><br><span class="line">    if page.comments !== false &amp;&amp; theme.comments &amp;&amp; theme.comments.use</span><br><span class="line">      - var commentsJsLoad = true</span><br><span class="line">      !=partial(&#x27;includes/third-party/comments/index&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br></pre></td></tr></table></figure><h2 id="4-获取B站等平台视频嵌入代码"><a href="#4-获取B站等平台视频嵌入代码" class="headerlink" title="4. 获取B站等平台视频嵌入代码"></a>4. 获取B站等平台视频嵌入代码</h2><p>在视频播放页面通常会有分享按钮，并且一般会提供链接和<code>iframe</code>嵌入两种分享方式，例如我的（顺便求一波<a href="https://www.bilibili.com/video/BV18T4y1D7wj?zw">关注</a>）：<br><img src="https://npm.elemecdn.com/justlovesmile-img/20220504105540.png"></p><p>复制<code>iframe</code>代码，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=937145035&amp;bvid=BV18T4y1D7wj&amp;cid=545915013&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-新建data文件"><a href="#5-新建data文件" class="headerlink" title="5. 新建data文件"></a>5. 新建data文件</h2><p>在<code>hexo\source\_data</code>路径下(没有就创建一个文件夹)新建一个数据文件<code>video.yml</code>，把刚才的<code>iframe</code>代码内容转换成：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">cover:</span> <span class="string">https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg</span></span><br><span class="line">  <span class="attr">time:</span> <span class="number">2022</span><span class="string">/03/10</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">//player.bilibili.com/player.html?aid=937145035&amp;bvid=BV18T4y1D7wj&amp;cid=545915013&amp;page=1</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">雷神池，璃月雷神前来报道</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">【原神】20220310</span></span><br></pre></td></tr></table></figure><h2 id="6-结语"><a href="#6-结语" class="headerlink" title="6. 结语"></a>6. 结语</h2><p>至此，一个视频点播页面就做好了，该方法适用于一切提供iframe嵌入的视频平台，页面展示如下：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220504110304.png"></p>]]></content>
    
    
    <summary type="html">之前考虑到自己剪了一些vlog，但是直接用`iframe`嵌入的话页面会很长，而且点开这个页面会自动加载全部视频，感觉很奇怪，并且不能很好的展示，于是写了一个视频点播页面，最近有小伙伴留言问我的视频页面是怎么做的，于是我写一篇文章......</summary>
    
    
    
    <category term="博客相关" scheme="https://blog.justlovesmile.top/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="前端" scheme="https://blog.justlovesmile.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Hexo" scheme="https://blog.justlovesmile.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>旋转目标检测 | R3Det，基于特征精炼的单阶段检测模型</title>
    <link href="https://blog.justlovesmile.top/posts/809258ef.html"/>
    <id>https://blog.justlovesmile.top/posts/809258ef.html</id>
    <published>2022-04-09T07:00:34.000Z</published>
    <updated>2022-04-09T07:00:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R3det-Refined-single-stage-detector-with-feature-refinement-for-rotating-object"><a href="#R3det-Refined-single-stage-detector-with-feature-refinement-for-rotating-object" class="headerlink" title="R3det: Refined single-stage detector with feature refinement for rotating object"></a>R3det: Refined single-stage detector with feature refinement for rotating object</h1><blockquote><p>论文发表：AAAI 2021<br>论文链接：<a href="https://ojs.aaai.org/index.php/AAAI/article/view/16426/16233">https://ojs.aaai.org/index.php/AAAI/article/view/16426/16233</a><br>论文代码：<a href="https://github.com/Thinklab-SJTU/R3Det_Tensorflow">https://github.com/Thinklab-SJTU/R3Det_Tensorflow</a></p></blockquote><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220322100025.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@article&#123;yang2019r3det,</span><br><span class="line">  title=&#123;R3det: Refined single-stage detector with feature refinement for rotating object&#125;,</span><br><span class="line">  author=&#123;Yang, Xue and Liu, Qingqing and Yan, Junchi and Li, Ang and Zhang, Zhiqiang and Yu, Gang&#125;,</span><br><span class="line">  journal=&#123;arXiv preprint arXiv:1908.05612&#125;,</span><br><span class="line">  volume=&#123;2&#125;,</span><br><span class="line">  number=&#123;4&#125;,</span><br><span class="line">  pages=&#123;2&#125;,</span><br><span class="line">  year=&#123;2019&#125;,</span><br><span class="line">  publisher=&#123;Aug&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-归纳总结"><a href="#1-归纳总结" class="headerlink" title="1. 归纳总结"></a>1. 归纳总结</h2><table><thead><tr><th>标签</th><th>目的</th><th>方法</th><th>总结</th></tr></thead><tbody><tr><td>#遥感 #单阶段 #Anchor</td><td>针对单阶段精炼检测器特征未对齐的问题，提出了FRM模块</td><td>RRetinaNet Based,FRM,SkewIou</td><td>精炼</td></tr></tbody></table><h2 id="2-问题背景"><a href="#2-问题背景" class="headerlink" title="2. 问题背景"></a>2. 问题背景</h2><p>作者称对于旋转目标检测存在三个挑战：</p><ul><li>大宽高比</li><li>密集排列</li><li>方向任意</li></ul><h2 id="3-主要工作"><a href="#3-主要工作" class="headerlink" title="3. 主要工作"></a>3. 主要工作</h2><p>针对上述问题，作者提出了R3Det，其主要工作如下：</p><ul><li>progressive regression： 作者发现旋转框在密集场景下的能有较好的目标检测精度，而水平框能达到更好的召回率，因此使用了这两种形式的框进行组合，具体做法是第一阶段检测水平框，从而提升检测速度，提高召回率，第二阶段也就是精炼阶段（refinement stage）检测旋转框，以适应密集目标的检测。</li><li>feature refinement module：针对现有的单阶段refined detector，作者发现他们存在特征没对齐的问题，因此设计了一个特征精炼模块，使用特征插值来获取精炼的位置信息并重建特征图实现特征对齐，并且该模块还可以减少精炼边界框的数量，提升检测速度。</li><li>approximate SkewIoU loss：为解决Skew IoU计算不可微的问题，设计了一种近似SkewIoU损失，以获得更精确的旋转估计。</li></ul><h3 id="3-1-模型结构"><a href="#3-1-模型结构" class="headerlink" title="3.1 模型结构"></a>3.1 模型结构</h3><p>R3Det主要基于 RetinaNet 实现，结构如下：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220322120220.png"></p><h3 id="3-2-边界框定义"><a href="#3-2-边界框定义" class="headerlink" title="3.2 边界框定义"></a>3.2 边界框定义</h3><p>对于边界框$(x,y,w,h,\theta)$，其中x，y代表中心点坐标，w，h代表宽和高，$\theta \in [-\frac{\pi}{2},0)$代表角度，边界框回归的值为：<br><img src="https://npm.elemecdn.com/justlovesmile-img/20220323144748.png"></p><p>其中$x,x_a,x’$分别代表gt，anchor以及预测值，其余同上。</p><p>损失函数为：<br><img src="https://npm.elemecdn.com/justlovesmile-img/20220323144809.png"></p><p>其中$v’$为预测的偏移量向量，v代表gt的偏移量向量。其中N表示Anchor的数目,超参数 $\lambda_1$， $\lambda_2$ 控制着这两个损失的平衡，并且默认值为1。$L_{cls}$ 和 $L_{reg}$ 分别是Focal Loss和smooth L1 Loss。</p><h3 id="3-3-精炼检测"><a href="#3-3-精炼检测" class="headerlink" title="3.3 精炼检测"></a>3.3 精炼检测</h3><p>Skew IoU对于角度十分敏感，因此作者在第一阶段使用0.5为前景阈值，0.4为背景阈值，在精炼的第一阶段使用0.6为前景阈值，0.5为背景阈值，如果有多段精炼阶段，使用0.7以及0.6为阈值。总损失：<br>$$L_{total}=\sum_{i=1}^N\alpha_iL_i$$<br>其中$L_i$为第i个精炼阶段的损失，$\alpha_i$为平衡系数，默认为1.</p><h3 id="3-4-特征精炼模块"><a href="#3-4-特征精炼模块" class="headerlink" title="3.4 特征精炼模块"></a>3.4 特征精炼模块</h3><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323154129.png"></p><p>许多精炼检测器仍然使用相同的特征图来执行多个分类和回归，而没有考虑边界框位置变化引起的特征未对齐。因此作者提出将当前精炼边界框(橙色矩形)的位置信息重新编码为对应的特征点(红色点)，从而以逐像素的方式<strong>重构整个特征图</strong>，实现<strong>特征对齐</strong>。整个过程如上图（c）所示。为了准确地获取精炼后的包围框对应的位置特征信息，采用了双线性特征插值方法，如上图（a）所示。特征插值可以表示为:<br><img src="https://npm.elemecdn.com/justlovesmile-img/20220323154551.png"><br>其中A代表图（a）中的区域，$F\in \mathbb{R}^{C\times 1\times 1}$代表特征图上点的特征向量。</p><p>算法流程：<br><img src="https://npm.elemecdn.com/justlovesmile-img/20220323154753.png"></p><h2 id="4-实验结果"><a href="#4-实验结果" class="headerlink" title="4. 实验结果"></a>4. 实验结果</h2><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323155610.png"></p>]]></content>
    
    
    <summary type="html">作者称对于旋转目标检测存在三个挑战：大宽高比；密集排列；方向任意，因此针对上述问题，作者提出了R3Det，其通过特征精炼模块解决了精炼过程中特征未对齐的问题...</summary>
    
    
    
    <category term="人工智能" scheme="https://blog.justlovesmile.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="深度学习" scheme="https://blog.justlovesmile.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="论文笔记" scheme="https://blog.justlovesmile.top/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="目标检测" scheme="https://blog.justlovesmile.top/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录 | 博客运行超过1000天啦，继续砥砺前行</title>
    <link href="https://blog.justlovesmile.top/posts/d90df99b.html"/>
    <id>https://blog.justlovesmile.top/posts/d90df99b.html</id>
    <published>2022-04-08T06:18:58.000Z</published>
    <updated>2022-04-08T06:18:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>就在刚刚，我在整理阅读笔记、准备发到博客上的时候，突然瞟到博客右下角的运行时间，惊喜地发现博客已经运行超过1000天啦，心中突然有一种又开心又欣慰的情绪在弥漫…</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220408143144.png"></p><h2 id="从wordpress到hexo"><a href="#从wordpress到hexo" class="headerlink" title="从wordpress到hexo"></a>从wordpress到hexo</h2><p>时间过得真快呀，我还记得自己第一次建立博客那天，刚考完期末考试，回到寝室，室友说他发现了一个特别好看的个人网站，我看着那个网站，心中萌发出我也要拥有一个自己的博客的想法，于是在当天我搜索了很多建立个人网站的教程，最后因为自己课设用过python的flask框架并且写过静态的HTML，于是决定在阿里云上购买了一个轻量应用服务器（学生有优惠），然后自己写一个博客网页，因此当时的博客非常简单（并且非常丑）。</p><p>直到假期里我看见知乎上有人推荐wordpress，并且也是可以直接在阿里云的轻量应用服务器上直接部署的，因此我果断的开始了wordpress的踩坑之旅，中途先后使用了多个wordpress官网推荐的主题，一直没有找到自己喜欢的，后来还是在知乎上，看见了<code>sakura</code>主题，非常的漂亮，并且封面图也很好看，如下：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220408144439.png"></p><p>并且在部署的过程中，从作者的博客友链看到了很多大佬的博客，也是第一次知道了原来博客还有<a href="/friends/">友链</a>这种东西…</p><p>再到假期末尾，又是我的室友（还是他😂），他给我看了他的博客，虽然只有一个首页（就是Hexo默认的主题）我突然感觉好像也不错，而且他告诉我这个不用租服务器，我突然感觉自己好像打开了新世界的大门，原来还有Hexo这种静态博客生成器…</p><p>于是我又开始了Hexo的踩坑之旅，先后用过了<code>yilia</code>、<code>Sakura-Hexo</code>、<code>Ayer</code>、以及现在的<code>Butterfly</code>主题，他们都是非常优秀的主题，如下图：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220408150617.png"></p><p>除了主题外，自己还添加又卸载了很多插件（如live2d，我用的是下面这个👇），最后发现还是简单实用比较适合我。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220408145334.png"></p><h2 id="域名-justlovesmile-top"><a href="#域名-justlovesmile-top" class="headerlink" title="域名:justlovesmile.top"></a>域名:justlovesmile.top</h2><p>从2019年9月6日开始，我的博客终于有了自己的域名，而为什么要买这个域名呢，主要是因为我的游戏id基本上都是这个，比如：<code>Justlovesmile</code>，<code>Just微笑</code>，<code>Justlove微笑</code>等等.</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220408152830.png"></p><h2 id="博客魔改"><a href="#博客魔改" class="headerlink" title="博客魔改"></a>博客魔改</h2><p>直到换到<code>Butterfly</code>主题，我突然发现他能满足我绝大部分的需求，不仅适配了黑暗模式，各个模块也写的非常简单明了，非常适合魔改，并且在不同博客的友链中找啊看啊，发现了很多非常棒非常好看的博客，还加入了Butterfly主题的QQ群（后来因为我基本上不聊天所以被踢了qwq），认识了很多大佬，也从他们的博客学到了很多东西，得到了很多帮助，如<a href="https://blog.zhheo.com/">zhheo博主</a>、<a href="https://zfe.space/">小冰博主</a>、<a href="https://akilar.top/">Akilar博主</a>等等，因此我的友链中专门开了一个模块<del>保存</del>（供奉）着他们博客。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220408152000.png"></p><p>在看了很多<a href="/posts/c8972b63.html">博客魔改和优化</a>的文章以及自己一点一点<a href="/update/">修改</a>之后，我的博客现在是这个样子的：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220408152620.png"></p><h2 id="博客统计"><a href="#博客统计" class="headerlink" title="博客统计"></a>博客统计</h2><p>从2019年7月10日至今，博客总共发布了<a href="/archives/">文章</a>85篇，<a href="/tags/">标签</a>57个，<a href="/categories/">分类</a>6个，详细见<a href="/charts/">统计页面</a>：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220408153407.png"></p><p>其中2019年24篇，2020年39篇，2021年8篇，2022年目前14篇：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220408153707.png"></p><p>博客共有<a href="/friends/">友链</a>51个，<a href="/donate/">打赏</a>2次。</p><p>博客共有评论355条，也随时欢迎大家能在<a href="/guestbook/">留言板</a>中留言。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文是纪念、也是总结，纪念这1000个日日夜夜在个人博客分享学习笔记或者主题美化的时光，总结我的博客这1000天的一些数据统计。希望在下一个1000天里我的博客能变得越来越好、越来越合我心意。</p>]]></content>
    
    
    <summary type="html">时间过得真快，不知不觉中Justlovesmile的博客已经运行超过1000天啦，我还记得自己第一次建立博客那天，刚考完期末考试，回到寝室，室友说他发现了一个特别好看的个人网站，我看着那个网站，心中萌发出我也要拥有一个自己的博客的想法。</summary>
    
    
    
    <category term="博客相关" scheme="https://blog.justlovesmile.top/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Hexo" scheme="https://blog.justlovesmile.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>目标检测 | FPN，多尺度目标检测经典Backbone</title>
    <link href="https://blog.justlovesmile.top/posts/4c29d81e.html"/>
    <id>https://blog.justlovesmile.top/posts/4c29d81e.html</id>
    <published>2022-04-08T04:46:28.000Z</published>
    <updated>2022-04-08T04:46:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Feature-Pyramid-Networks-for-Object-Detection"><a href="#Feature-Pyramid-Networks-for-Object-Detection" class="headerlink" title="Feature Pyramid Networks for Object Detection"></a>Feature Pyramid Networks for Object Detection</h1><blockquote><p>论文发表：CVPR2017<br>论文链接：<a href="http://openaccess.thecvf.com/content_cvpr_2017/html/Lin_Feature_Pyramid_Networks_CVPR_2017_paper.html">CVPR2017 open access</a></p></blockquote><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220408112206.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@inproceedings&#123;lin2017feature,</span><br><span class="line">  title=&#123;Feature pyramid networks for object detection&#125;,</span><br><span class="line">  author=&#123;Lin, Tsung-Yi and Doll&#123;\&#x27;a&#125;r, Piotr and Girshick, Ross and He, Kaiming and Hariharan, Bharath and Belongie, Serge&#125;,</span><br><span class="line">  booktitle=&#123;Proceedings of the IEEE conference on computer vision and pattern recognition&#125;,</span><br><span class="line">  pages=&#123;2117--2125&#125;,</span><br><span class="line">  year=&#123;2017&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-归纳总结"><a href="#1-归纳总结" class="headerlink" title="1. 归纳总结"></a>1. 归纳总结</h2><table><thead><tr><th>Name</th><th>Value</th></tr></thead><tbody><tr><td>标签</td><td>#多尺度</td></tr><tr><td>目的</td><td>针对目标检测任务中，目标尺度变化的问题，设计了特征金字塔网络</td></tr><tr><td>方法</td><td>构建多层特征图之间的联系，合理利用高层语义信息和底层位置信息</td></tr><tr><td>总结</td><td>是目标检测模型的标配，较好地解决了多尺度检测问题</td></tr></tbody></table><h2 id="2-问题背景"><a href="#2-问题背景" class="headerlink" title="2. 问题背景"></a>2. 问题背景</h2><p>作者提到，在2017年以前，目标检测中的一个基本挑战就是目标检测模型在处理目标多尺度变化问题的不足，因为在当时很多网络都使用了利用单个高层特征，(比如说Faster R-CNN利用下采样四倍的卷积层——Conv4，进行后续的物体的分类和bounding box的回归)，但是这样做有一个明显的缺陷，即小物体本身具有的像素信息较少，在下采样的过程中极易被丢失，而之前的图像金字塔结构虽然也能解决多尺度问题，但计算量大，内存消耗大，因此作者提出了特征金字塔结构，能在增加极小的计算量的情况下，处理好物体检测中的多尺度变化问题。</p><h2 id="3-主要工作"><a href="#3-主要工作" class="headerlink" title="3. 主要工作"></a>3. 主要工作</h2><p>针对上诉问题，提出了一个利用深度卷积神经网络固有的多尺度金字塔结构来以极小的计算量构建特征金字塔的网络结构，即FPN。</p><h3 id="3-1-模型结构"><a href="#3-1-模型结构" class="headerlink" title="3.1 模型结构"></a>3.1 模型结构</h3><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220408115456.png"><br>作者对比了多种金字塔结构，其中：</p><ul><li>图（a）所示的是经典的图像金字塔结构，其通过对不同尺度的图像提取特征，来构建特征金字塔，因此其需要对不同尺度图像分别提取特征，计算量大且消耗内存多；</li><li>图（b）所示的是2017年常见的利用最后一层（高层）特征图检测目标的模型结构，其对于多尺度目标的检测能力不足；</li><li>图（c）是一种利用卷积神经网络固有的多尺度特征图构建的多尺度检测模型（如SSD），但是其没有结合高层语义信息和底层位置信息，因此检测精度一般；</li><li>图（d）即FPN结构，是一种具有侧向连接（lateral connections）的自上而下的网络结构，用来构建不同尺寸的具有高级语义信息的特征图，并且很好的利用了不同层特征的信息。</li></ul><p>下图是FPN的网络结构：<br><img src="https://npm.elemecdn.com/justlovesmile-img/20220408120130.png"></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220408122428.png"></p><p>其主要包含两个部分：</p><ul><li>自下而上的特征提取：即常规的前馈Backbone网络，以Faster R-CNN为例，假设选择ResNet每级最后一个Residual Block的输出，记为{C1,C2,C3,C4,C5}，那么FPN用2-5级参与预测，其中C2, C3, C4, C5表示conv2，conv3，conv4和conv5的输出层(最后一个残差block层)作为FPN的特征，分别对应于输入图片的下采样倍数为{4，8，16，32}。</li><li>自上而下的特征融合以及横向连接：即将高层的语义信息和本层的细节信息相融合。自上而下的过程通过上采样（Up-Sampling）实现，上采样的方法是<strong>最近邻插值法</strong>，如下图所示。具体过程为：C5层先经过1 x 1卷积，改变特征图的通道数(文章中设置d=256，与Faster R-CNN中RPN层的维数相同便于分类与回归)。然后通过上采样，再加上(特征图中每一个相同位置元素直接相加)C4经过1 x 1卷积后的特征图M4（固定通道256）。这个过程再做两次，分别得到C3对应的特征图M3（固定通道256）以及C2对应的特征图M2（固定通道256）。M层特征图再经过3 x 3卷积(减轻最近邻近插值带来的混叠影响，周围的数都相同)，得到最终的P2，P3，P4，P5层特征。</li></ul><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220408122814.png"><br>图片来自<a href="https://zhuanlan.zhihu.com/p/92005927">【论文笔记】FPN —— 特征金字塔 - 知乎 (zhihu.com)</a></p><h3 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2 代码"></a>3.2 代码</h3><p>可参考Pytorch官方的代码<a href="https://github.com/pytorch/vision">https://github.com/pytorch/vision</a></p><h2 id="4-实验结果"><a href="#4-实验结果" class="headerlink" title="4. 实验结果"></a>4. 实验结果</h2><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220408123357.png"></p><h2 id="5-参考文献"><a href="#5-参考文献" class="headerlink" title="5. 参考文献"></a>5. 参考文献</h2><p><a href="https://zhuanlan.zhihu.com/p/92005927">【论文笔记】FPN —— 特征金字塔 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <summary type="html">在2017年以前，目标检测中的一个基本挑战就是目标检测模型在处理目标多尺度变化问题的不足，因为在当时很多网络都使用了利用单个高层特征，而图像金字塔结构虽然也能解决多尺度问题，但计算量大，内存消耗大，因此作者提出了FPN结构。</summary>
    
    
    
    <category term="人工智能" scheme="https://blog.justlovesmile.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="深度学习" scheme="https://blog.justlovesmile.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="论文笔记" scheme="https://blog.justlovesmile.top/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="目标检测" scheme="https://blog.justlovesmile.top/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>小样本学习 | ProtoNet，基于度量的Few-Shot分类网络</title>
    <link href="https://blog.justlovesmile.top/posts/286eabe4.html"/>
    <id>https://blog.justlovesmile.top/posts/286eabe4.html</id>
    <published>2022-04-02T04:20:34.000Z</published>
    <updated>2022-04-02T04:20:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prototypical-Networks-for-Few-shot-Learning"><a href="#Prototypical-Networks-for-Few-shot-Learning" class="headerlink" title="Prototypical Networks for Few-shot Learning"></a>Prototypical Networks for Few-shot Learning</h1><blockquote><p>论文发表：Advances in neural information processing systems, 2017<br>论文链接：<a href="https://proceedings.neurips.cc/paper/6996-prototypical-networks-for-few-shot-learning">https://proceedings.neurips.cc/paper/6996-prototypical-networks-for-few-shot-learning</a></p></blockquote><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211202215720417.png" alt="image-20211202215720417"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@article&#123;snell2017prototypical,</span><br><span class="line">  title=&#123;Prototypical networks for few-shot learning&#125;,</span><br><span class="line">  author=&#123;Snell, Jake and Swersky, Kevin and Zemel, Richard&#125;,</span><br><span class="line">  journal=&#123;Advances in neural information processing systems&#125;,</span><br><span class="line">  volume=&#123;30&#125;,</span><br><span class="line">  year=&#123;2017&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归纳总结"><a href="#归纳总结" class="headerlink" title="归纳总结"></a>归纳总结</h2><table><thead><tr><th>标签</th><th>目的</th><th>方法</th><th>总结</th></tr></thead><tbody><tr><td>#度量学习 #嵌入网络</td><td>解决小样本问题</td><td>学习一个低纬嵌入空间</td><td>将分类问题转换成度量问题</td></tr></tbody></table><h2 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h2><p>ProtoNet，即原型网络，其想法非常直接但有效，即对每张图像都先用神经网络得到一个特征表示，然后对支持集中每个类别的所有特征取一个平均，作为这个类别的类中心，最后比较查询集和各个类中心之间的距离，取最近的一个类别作为预测结果。</p><p>作者的思想是构建一个映射函数，可以将每一类映射到一个简单的原型特征点集中。因此作者使用神经网络学习了一个非线性映射，将输入映射到嵌入空间中，并且规定每一类的原型特征为每个嵌入空间的均值。之后就可以将分类任务看作是在嵌入空间中寻找距离最近的原型特征。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/202110071602172.png" alt="image-20211007160201702">定义样本为S，类别为k，原型特征为$c_k=\frac{1}{S_k}\sum_{(x_i,y_i)\in{S_k}}f_{\phi}(x_i)$，衡量距离的函数为d，那么对于输入样本，其在嵌入空间的分布为$p_\phi(y=k|x)=\frac{\exp(-d(f_\phi(x),c_k))}{\sum_{k^\prime}\exp(-d(f_\phi(x),c_{k^{\prime}}))}$，学习的过程就是最小化负对数损失$J(\phi)=-\log{p_\phi(y=k|x)}$。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/202110271603163.png" alt="image-20211027160339284"></p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>其实验结果如下：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211202220308120.png" alt="image-20211202220308120"></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211202220326742.png" alt="image-20211202220326742"></p>]]></content>
    
    
    <summary type="html">ProtoNet，即原型网络，其想法非常直接但有效，即对每张图像都先用神经网络得到一个特征表示，然后对支持集中每个类别的所有特征取一个平均，作为这个类别的类中心，最后比较查询集和各个类中心之间的距离，取最近的一个类别作为预测结果。</summary>
    
    
    
    <category term="人工智能" scheme="https://blog.justlovesmile.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="深度学习" scheme="https://blog.justlovesmile.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="论文笔记" scheme="https://blog.justlovesmile.top/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="小样本学习" scheme="https://blog.justlovesmile.top/tags/%E5%B0%8F%E6%A0%B7%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>推荐 | 计算机专业，大学课程「笔记归档」</title>
    <link href="https://blog.justlovesmile.top/posts/a806bebe.html"/>
    <id>https://blog.justlovesmile.top/posts/a806bebe.html</id>
    <published>2022-03-31T11:03:19.000Z</published>
    <updated>2022-03-31T11:03:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题外话：时光荏苒，青春在时间的河岸慢慢行走，不知不觉中，博主的大学生活渐行渐远，带走的是那四年青春的美好回忆，而留下的是那厚厚的、考试前兢兢业业记录下来的学习笔记，看着一篇篇动辄上W字数的笔记，脑海中还能会想起当时的场景。</p></blockquote><p>本文是博主本科期间的专业课程学习笔记的整理和归档，适合计算机专业的同学阅读。</p><h2 id="一、数据库原理"><a href="#一、数据库原理" class="headerlink" title="一、数据库原理"></a>一、数据库原理</h2><ol><li><a href="/posts/41347.html">《数据库原理》笔记</a>，字数总计:18.3k，阅读时长:59分钟</li><li><a href="https://github.com/Justlovesmile/database_program">基于MYSQL的BBS论坛管理系统</a>，第一次接触Flask和前端，在自己电脑上做的数据库课设</li></ol><h2 id="二、软件工程基础"><a href="#二、软件工程基础" class="headerlink" title="二、软件工程基础"></a>二、软件工程基础</h2><ol><li><a href="/posts/38368.html">《软件工程基础》知识点</a>，字数总计:5.9k，阅读时长:17分钟</li></ol><h2 id="三、计算机网络"><a href="#三、计算机网络" class="headerlink" title="三、计算机网络"></a>三、计算机网络</h2><ol><li><a href="/posts/28758.html">《计算机网络》学习笔记</a>，字数总计:35.3k，阅读时长:108分钟</li></ol><h2 id="四、操作系统"><a href="#四、操作系统" class="headerlink" title="四、操作系统"></a>四、操作系统</h2><ol><li><a href="/posts/8398.html">计算机《操作系统》笔记</a>，字数总计:20.1k，阅读时长:61分钟</li></ol><h2 id="五、编译原理"><a href="#五、编译原理" class="headerlink" title="五、编译原理"></a>五、编译原理</h2><ol><li><a href="/posts/50753.html">《编译原理》知识点</a>，字数总计:4.5k，阅读时长:13分钟</li></ol><h2 id="六、算法分析与设计"><a href="#六、算法分析与设计" class="headerlink" title="六、算法分析与设计"></a>六、算法分析与设计</h2><ol><li><a href="/posts/16050.html">《算法分析与设计》笔记</a>，字数总计:14k，阅读时长:62分钟，主要是动手敲敲代码，看看算法如何实现</li></ol><h2 id="七、计算机组成原理"><a href="#七、计算机组成原理" class="headerlink" title="七、计算机组成原理"></a>七、计算机组成原理</h2><ol><li><a href="/posts/51917.html">《计算机组成原理》笔记</a>，字数总计:1.9k，阅读时长:5分钟，说实话这门课我没学好</li></ol><h2 id="八、计算机系统结构"><a href="#八、计算机系统结构" class="headerlink" title="八、计算机系统结构"></a>八、计算机系统结构</h2><ol><li><a href="/posts/50754.html">《计算机系统结构》笔记</a>，字数总计:12k，阅读时长:35分钟</li><li><a href="/posts/651e6a0b.html">《计算机系统结构》精简知识点</a>，字数总计:8k，阅读时长:24分钟</li><li><a href="/posts/47699.html">基于WINDLX的系统结构实验</a>，字数总计:2.9k，阅读时长:10分钟，随机输入n个数，求数i的概率</li></ol><h2 id="九、计算机图形学"><a href="#九、计算机图形学" class="headerlink" title="九、计算机图形学"></a>九、计算机图形学</h2><ol><li><a href="/posts/16593.html">基于MFC和二维变换的画图软件</a>，字数总计:4.2k，阅读时长:14分钟，基于MFC完成的一个画图软件，并且为了完成老师的要求，强行加了二维变换动画</li></ol><h2 id="十、嵌入式技术课程设计"><a href="#十、嵌入式技术课程设计" class="headerlink" title="十、嵌入式技术课程设计"></a>十、嵌入式技术课程设计</h2><ol><li><a href="/posts/14495.html">嵌入式智能大棚监测管理系统</a>，字数总计:5.5k，阅读时长:17分钟，基于Proteus，Arduino，Flask搭建的智能大棚管理系统</li></ol><h2 id="十一、微机原理与接口技术"><a href="#十一、微机原理与接口技术" class="headerlink" title="十一、微机原理与接口技术"></a>十一、微机原理与接口技术</h2><ol><li><a href="/posts/43666.html">《微机原理与接口技术》笔记</a>，字数总计:12.9k，阅读时长:41分钟，有一说一，这篇文章在CSDN阅读1w+是我没想到的</li></ol><blockquote><p>人生的长短不是时间衡量的，而是以思想和行为去衡量，且行且珍惜！</p></blockquote>]]></content>
    
    
    <summary type="html">博主的大学课程全部笔记整理归档，本文是一个目录...</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.justlovesmile.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="大学课程" scheme="https://blog.justlovesmile.top/tags/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>博客相关 | 如何提取图片主题色并自动选择标题字体颜色</title>
    <link href="https://blog.justlovesmile.top/posts/b16c0eda.html"/>
    <id>https://blog.justlovesmile.top/posts/b16c0eda.html</id>
    <published>2022-03-28T04:37:51.000Z</published>
    <updated>2022-03-28T04:37:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在写博客的时候，做了一个封面图，然后<code>hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo s</code>一键生成，点开后却发现这个标题的字体颜色亮瞎我的眼睛：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220328124305.png"></p><p>于是试了很多帖子，终于把它改好了：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220328124527.png"></p><p>提取主题色的js:<a href="https://github.com/briangonzalez/rgbaster.js">https://github.com/briangonzalez/rgbaster.js</a></p><p>处理配色js如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">&#x27;post-cover&#x27;</span>)) &#123;</span><br><span class="line">  <span class="keyword">const</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;post-cover&#x27;</span>).getAttribute(<span class="string">&#x27;data-lazy-src&#x27;</span>)</span><br><span class="line">  RGBaster.colors(img, &#123;</span><br><span class="line">      <span class="attr">paletteSize</span>: <span class="number">30</span>,</span><br><span class="line">      <span class="attr">exclude</span>: [<span class="string">&quot;rgb(255,255,255)&quot;</span>, <span class="string">&quot;rgb(0,0,0)&quot;</span>, <span class="string">&quot;rgb(254,254,254)&quot;</span>],</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t.dominant != <span class="string">&#x27;rgb()&#x27;</span>)&#123;</span><br><span class="line">          <span class="keyword">const</span> c = t.dominant.match(<span class="regexp">/\d+/g</span>);</span><br><span class="line">          <span class="keyword">const</span> Color = <span class="string">`rgba(<span class="subst">$&#123;c[<span class="number">0</span>]&#125;</span>,<span class="subst">$&#123;c[<span class="number">1</span>]&#125;</span>,<span class="subst">$&#123;c[<span class="number">2</span>]&#125;</span>,0.8)`</span>;</span><br><span class="line">          <span class="keyword">let</span> fontColor;</span><br><span class="line">          <span class="comment">//const grayLevel = c[0] * 0.299 + c[1] * 0.587 + c[2] * 0.114;</span></span><br><span class="line">          <span class="keyword">const</span> grayLevel = c[<span class="number">0</span>] * <span class="number">0.213</span> + c[<span class="number">1</span>] * <span class="number">0.715</span> + c[<span class="number">2</span>] * <span class="number">0.072</span>;</span><br><span class="line">          <span class="comment">//if (grayLevel &gt;= 190) &#123;</span></span><br><span class="line">          <span class="keyword">if</span> (grayLevel &gt;= <span class="number">255</span>/<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 若为浅色，把文字设置为黑色</span></span><br><span class="line">            fontColor = <span class="string">&#x27;#000&#x27;</span>;</span><br><span class="line">            metaColor = <span class="string">&#x27;#1C1C1C&#x27;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fontColor = <span class="string">&#x27;#fff&#x27;</span>;</span><br><span class="line">            metaColor = <span class="string">&#x27;#eee&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].addRule(<span class="string">&quot;:root&quot;</span>, <span class="string">&quot;--mj-main:&quot;</span> + Color + <span class="string">&quot;!important&quot;</span>)</span><br><span class="line">          <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].addRule(<span class="string">&quot;:root&quot;</span>, <span class="string">&quot;--mj-titlecolor:&quot;</span> + fontColor + <span class="string">&quot;!important&quot;</span>)</span><br><span class="line">          <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].addRule(<span class="string">&quot;:root&quot;</span>, <span class="string">&quot;--mj-metacolor:&quot;</span> + metaColor + <span class="string">&quot;!important&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].addRule(<span class="string">&quot;:root&quot;</span>, <span class="string">&quot;--mj-main: rgba(255,250,240,0.5) !important&quot;</span>)</span><br><span class="line">          <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].addRule(<span class="string">&quot;:root&quot;</span>, <span class="string">&quot;--mj-titlecolor: #000 !important&quot;</span>)</span><br><span class="line">          <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].addRule(<span class="string">&quot;:root&quot;</span>, <span class="string">&quot;--mj-metacolor: #1C1C1C !important&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].addRule(<span class="string">&quot;:root&quot;</span>, <span class="string">&quot;--mj-main: rgba(255,250,240,0.5) !important&quot;</span>)</span><br><span class="line">          <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].addRule(<span class="string">&quot;:root&quot;</span>, <span class="string">&quot;--mj-titlecolor: #000 !important&quot;</span>)</span><br><span class="line">          <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].addRule(<span class="string">&quot;:root&quot;</span>, <span class="string">&quot;--mj-metacolor: #1C1C1C !important&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].addRule(<span class="string">&quot;:root&quot;</span>, <span class="string">&quot;--mj-main: transparent !important&quot;</span>)</span><br><span class="line">  <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].addRule(<span class="string">&quot;:root&quot;</span>, <span class="string">&quot;--mj-titlecolor: var(--light-grey) !important&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://juejin.cn/post/6844903511956815885">https://juejin.cn/post/6844903511956815885</a></li><li><a href="https://blog.realwds.com/posts/84339efc.html">https://blog.realwds.com/posts/84339efc.html</a></li></ul>]]></content>
    
    
    <summary type="html">今天在写博客的时候，做了一个封面图，然后hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo s一键生成，点开后却发现这个标题的字体颜色亮瞎我的眼睛，于是试了很多帖子，终于把它改好了</summary>
    
    
    
    <category term="博客相关" scheme="https://blog.justlovesmile.top/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="前端" scheme="https://blog.justlovesmile.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Hexo" scheme="https://blog.justlovesmile.top/tags/Hexo/"/>
    
    <category term="JS" scheme="https://blog.justlovesmile.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>目标检测 | YOLOv1，经典单阶段Anchor-Free目标检测模型</title>
    <link href="https://blog.justlovesmile.top/posts/d50da5ec.html"/>
    <id>https://blog.justlovesmile.top/posts/d50da5ec.html</id>
    <published>2022-03-28T03:57:51.000Z</published>
    <updated>2022-03-28T03:57:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>PS:参考YOLO官网的配色和logo做的封面图，感觉还挺好看的，hhhh</p></blockquote><h1 id="You-Only-Look-Once-Unified-Real-Time-Object-Detection"><a href="#You-Only-Look-Once-Unified-Real-Time-Object-Detection" class="headerlink" title="You Only Look Once: Unified, Real-Time Object Detection"></a>You Only Look Once: Unified, Real-Time Object Detection</h1><blockquote><p>论文发表：CVPR 2016<br>论文链接：<a href="https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Redmon_You_Only_Look_CVPR_2016_paper.pdf">You Only Look Once: Unified, Real-Time Object Detection (cv-foundation.org)</a><br>论文官网：<a href="https://pjreddie.com/darknet/yolo/">YOLO: Real-Time Object Detection (pjreddie.com)</a></p></blockquote><p><img src="https://npm.elemecdn.com/justlovesmile-img/1648433292(1).png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@inproceedings&#123;redmon2016you,</span><br><span class="line">  title=&#123;You only look once: Unified, real-time object detection&#125;,</span><br><span class="line">  author=&#123;Redmon, Joseph and Divvala, Santosh and Girshick, Ross and Farhadi, Ali&#125;,</span><br><span class="line">  booktitle=&#123;Proceedings of the IEEE conference on computer vision and pattern recognition&#125;,</span><br><span class="line">  pages=&#123;779--788&#125;,</span><br><span class="line">  year=&#123;2016&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-归纳总结"><a href="#1-归纳总结" class="headerlink" title="1. 归纳总结"></a>1. 归纳总结</h2><table><thead><tr><th>标签</th><th>目的</th><th>方法</th><th>总结</th></tr></thead><tbody><tr><td>#Anchor-Free</td><td>解决两阶段算法检测慢的问题</td><td>将目标检测（cls和reg）都视为回归问题</td><td>经典单阶段算法</td></tr></tbody></table><h2 id="2-问题背景"><a href="#2-问题背景" class="headerlink" title="2. 问题背景"></a>2. 问题背景</h2><p>随着深度学习的大火，在YOLO提出那一年，主流的目标检测算法框架主要分为两类：</p><ul><li>两阶段算法：基于Region Proposal的RCNN系列算法，先生成Proposal，再分类回归</li><li>单阶段算法：直接预测不同目标的类别和位置<br>这两种算法各有优点，一般而言，两阶段算法准确度高，但速度慢；单阶段算法速度快，但准确度相对低。</li></ul><p>作者认为人可以一眼看到目标在哪，并且能立即知道是什么，并且对于很多实际场景而言，如自动驾驶，实时性和准确性都是非常重要的。</p><h2 id="3-主要工作"><a href="#3-主要工作" class="headerlink" title="3. 主要工作"></a>3. 主要工作</h2><p>针对上述问题，作者提出了经典的YOLO算法，它是一个统一的，端到端的单阶段目标检测算法。YOLO具体做法是，首先将输入图片缩放到448x448，然后送入CNN网络，最后使用NMS过滤网络预测结果得到检测的目标。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220328103035.png"></p><p>而在CNN网络里，它首先将图片划分为S×S大小的网格，然后每个单元格负责检测中心点落在该格子的目标，如下图，每个单元格会输出B个边界框（每个边界框输出5个预测值：x, y, w, h, confidence）以及边界框类别概率C，例如：作者在PASCAL VOC的检测实验里使用S=7，B=2，C=类别数量20，一共预测7×7×(2×5+20)个向量。同时这里的confidence代表边界框置信度，它的定义为: </p><p>$$Pr(object)\times IoU_{pred}^{truth}$$</p><p>其中边界框包含目标时，$Pr(object)=1$，否则为0。而C代表每个类别的置信度，即：</p><p>$$Pr(Class_i|Object)\times Pr(objec) \times IoU_{pred}^{truth}=Pr(class_i)\times IoU_{pred}^{truth}$$</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220328103753.png"></p><h3 id="3-1-模型结构"><a href="#3-1-模型结构" class="headerlink" title="3.1 模型结构"></a>3.1 模型结构</h3><p>YOLO采用卷积网络来提取特征，然后使用全连接层来得到预测值。网络结构参考GooLeNet模型，包含24个卷积层和2个全连接层。对于卷积层，主要使用1x1卷积来做channle reduction，然后紧跟3x3卷积。对于卷积层和全连接层，采用Leaky ReLU激活函数$max(x,0.1x)$，但是最后一层却采用线性激活函数。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220328103101.png"></p><h3 id="3-2-模型训练"><a href="#3-2-模型训练" class="headerlink" title="3.2 模型训练"></a>3.2 模型训练</h3><p>在训练之前，先在ImageNet上进行了预训练，其预训练的分类模型采用图8中前20个卷积层，然后添加一个average-pool层和全连接层。预训练之后，在预训练得到的20层卷积层之上加上随机初始化的4个卷积层和2个全连接层。由于检测任务一般需要更高清的图片，所以将网络的输入从224x224增加到了448x448。</p><h3 id="3-3-模型损失"><a href="#3-3-模型损失" class="headerlink" title="3.3 模型损失"></a>3.3 模型损失</h3><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220328110113.png"></p><p>Yolo算法将目标检测看成回归问题，所以采用的是均方差损失函数。但是对不同的部分采用了不同的权重值。首先区分定位误差和分类误差。对于定位误差，即边界框坐标预测误差，采用较大的权重 $\lambda_{coord}=5$ 。然后其区分不包含目标的边界框与含有目标的边界框的置信度，对于前者，采用较小的权重值 $\lambda_{noobj}=0.5$ 。其它权重值均设为1。然后采用均方误差，其同等对待大小不同的边界框，但是实际上较小的边界框的坐标误差应该要比较大的边界框要更敏感。为了保证这一点，将网络的边界框的宽与高预测改为对其平方根的预测，即预测值变为$(x,y,\sqrt{w},\sqrt{h})$。</p><p>损失函数中，第一项为边界框中心坐标的误差项，$\mathbb{1} _ {ij}^{obj}$ 是指第 i 个单元格存在目标，且该单元格中的第 j 个边界框负责预测该目标，第二项是边界框的高与宽的误差项。第三项是包含目标的边界框的置信度误差项。第四项是不包含目标的边界框的置信度误差项。最后一项是包含目标的单元格的分类误差项，$\mathbb{1} _ {i}^{obj}$值是指第 i 个单元格存在目标。</p><h2 id="4-实验结果"><a href="#4-实验结果" class="headerlink" title="4. 实验结果"></a>4. 实验结果</h2><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220328105647.png"></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220328105758.png"></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220328105711.png"></p><h2 id="5-参考文献"><a href="#5-参考文献" class="headerlink" title="5. 参考文献"></a>5. 参考文献</h2><p><a href="https://zhuanlan.zhihu.com/p/32525231">目标检测|YOLO原理与实现 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <summary type="html">YOLO作者提到人可以一眼看到目标在哪，能立即知道是什么，并且对于很多实际场景而言，如自动驾驶，实时性和准确性都是非常重要的。针对上述问题，作者提出了经典的YOLO算法，它是一个统一的，端到端的单阶段目标检测算法。</summary>
    
    
    
    <category term="人工智能" scheme="https://blog.justlovesmile.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="深度学习" scheme="https://blog.justlovesmile.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="论文笔记" scheme="https://blog.justlovesmile.top/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="目标检测" scheme="https://blog.justlovesmile.top/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>目标检测 | SSD，经典单阶段Anchor-Based目标检测模型</title>
    <link href="https://blog.justlovesmile.top/posts/8163bb15.html"/>
    <id>https://blog.justlovesmile.top/posts/8163bb15.html</id>
    <published>2022-03-28T02:57:59.000Z</published>
    <updated>2022-03-28T02:57:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSD-Single-Shot-MultiBox-Detector"><a href="#SSD-Single-Shot-MultiBox-Detector" class="headerlink" title="SSD: Single Shot MultiBox Detector"></a>SSD: Single Shot MultiBox Detector</h1><blockquote><p>论文发表：2016<br>论文链接：<a href="https://link.springer.com/chapter/10.1007/978-3-319-46448-0_2">SSD: Single Shot MultiBox Detector | SpringerLink</a></p></blockquote><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220305111710.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@inproceedings&#123;liu2016ssd,</span><br><span class="line">  title=&#123;Ssd: Single shot multibox detector&#125;,</span><br><span class="line">  author=&#123;Liu, Wei and Anguelov, Dragomir and Erhan, Dumitru and Szegedy, Christian and Reed, Scott and Fu, Cheng-Yang and Berg, Alexander C&#125;,</span><br><span class="line">  booktitle=&#123;European conference on computer vision&#125;,</span><br><span class="line">  pages=&#123;21--37&#125;,</span><br><span class="line">  year=&#123;2016&#125;,</span><br><span class="line">  organization=&#123;Springer&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归纳总结"><a href="#归纳总结" class="headerlink" title="归纳总结"></a>归纳总结</h2><table><thead><tr><th>标签</th><th>目的</th><th>方法</th><th>总结</th></tr></thead><tbody><tr><td>#Anchor #单阶段</td><td>实现多尺度以及卷积预测，进一步提升精度和速度</td><td>MultiBox，Anchor</td><td>经典单阶段算法</td></tr></tbody></table><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>SSD算法，其英文全名是Single Shot MultiBox Detector, SSD的优势在于消除了bounding box proposal和pixel or feature resampling，并使用了multi-scale，因此达到了比faster rcnn和yolo更高的检测精度和更快的检测速度。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220328121925.png"></p><p>图片来自<a href="https://zhuanlan.zhihu.com/p/33544892">目标检测|SSD原理与实现 - 知乎 (zhihu.com)</a></p><h2 id="2-SSD模型"><a href="#2-SSD模型" class="headerlink" title="2. SSD模型"></a>2. SSD模型</h2><p>SSD采用VGG16作为基础模型，然后在VGG16的基础上新增了卷积层来获得更多的特征图以用于检测，模型结构如下图：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220305114612.png"></p><p>SSD和Yolo一样都是采用一个CNN网络来进行检测，但是却采用了多尺度的特征图，网络的核心点：</p><ul><li>使用小的卷积核预测类别和边界框偏移量</li><li>对多个（多尺度）特征图进行检测</li><li>设置不同比例的先验框，如下图</li></ul><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220305115052.png"></p><p>SSD将背景也当做了一个特殊的类别，如果检测目标共有c个类别，SSD其实需要预测c+1个置信度值，其中第一个置信度指的是不含目标或者属于背景的评分。在预测过程中，置信度最高的那个类别就是边界框所属的类别，特别地，当第一个置信度值最高时，表示边界框中并不包含目标。第二部分就是边界框的location，包含4个值(cx,cy,w,h)，分别表示边界框的中心坐标以及宽高。但是真实预测值其实只是边界框相对于先验框的转换值。先验框位置用$d=(d^{cx},d^{cy},d^{w},d^{h})$表示，其对应边界框用$b=(b^{cx},b^{cy},b^{w},b^{h})$表示，那么边界框的预测值$l$其实是b相对于d的转换值：<br><img src="https://npm.elemecdn.com/justlovesmile-img/20220328114611.png"></p><h2 id="3-模型训练"><a href="#3-模型训练" class="headerlink" title="3. 模型训练"></a>3. 模型训练</h2><h3 id="3-1-正负样本划分"><a href="#3-1-正负样本划分" class="headerlink" title="3.1 正负样本划分"></a>3.1 正负样本划分</h3><p>首先，对于图片中每个ground truth，找到与其IOU最大的先验框，该先验框与其匹配，这样，可以保证每个ground truth一定与某个先验框匹配。通常称与ground truth匹配的先验框为正样本，其次，通过判断先验框和ground truth之间的IoU值是否大于阈值（如0.5），大于则为正样本</p><h3 id="3-2-损失计算"><a href="#3-2-损失计算" class="headerlink" title="3.2 损失计算"></a>3.2 损失计算</h3><p>损失包含两个部分：定位损失和分类损失</p><p>$$L(x,c,l,g)=\frac{1}{N}(L_{conf}(x,c)+\alpha L_{loc}(x,l,g))$$</p><p>其中N代表所匹配的正负样本数量，<code>l</code>代表预测框，<code>g</code>代表真实框，和faster rcnn相似，回归的偏移量的值是边界框的中心坐标(cx,cy)和框的宽度w和高度h。</p><p>$$\hat{g} _ {j}^{cx}=(g _ {j}^{cx}-d _ {i}^{cx})/d _ {i}^{w}$$</p><p>$$\hat{g} _ {j}^{cy}=(g_{j}^{cy}-d_{i}^{cy})/d_{i}^{h}$$</p><p>$$\hat{g} _ {j}^{w}=\log(\frac{g_{j}^{w}}{d_{i}^{w}})$$</p><p>$$\hat{g} _ {j}^{h}=\log(\frac{g_{j}^{h}}{d_{i}^{h}})$$</p><p>因此定位损失函数为：$L_{loc}(x,l,g)=\sum_{i \in Pos}^N \sum_{m\in {cx,cy,w,h}}x_{ij}^{k}smooth_{L1}(l_i^m-\hat{g} _ j^m)$<br>分类损失是一个softmax损失：$L_{conf}(x,c)=-\sum_{i\in Pos}^{N}x_{ij}^p\log(\hat{c} _ i^p)-\sum _ {i\in Neg}log(\hat{c} _ i^0)$<br>其中$\hat{c} _ i^p=\frac{exp(c_i^p)}{\sum_p(exp(c_i^p))}$</p><h2 id="4-参考文献"><a href="#4-参考文献" class="headerlink" title="4. 参考文献"></a>4. 参考文献</h2><p><a href="https://zhuanlan.zhihu.com/p/33544892">目标检测|SSD原理与实现 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <summary type="html">SSD算法，其英文全名是Single Shot MultiBox Detector, SSD的优势在于消除了bounding box proposal和pixel or feature resampling，并使用了multi-scale，因此达到了比Faster R-CNN和YOLO更高的检测精度和更快的检测速度。</summary>
    
    
    
    <category term="人工智能" scheme="https://blog.justlovesmile.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="深度学习" scheme="https://blog.justlovesmile.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="论文笔记" scheme="https://blog.justlovesmile.top/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="目标检测" scheme="https://blog.justlovesmile.top/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>目标检测 | FCOS，经典单阶段Anchor-Free目标检测模型</title>
    <link href="https://blog.justlovesmile.top/posts/bc226294.html"/>
    <id>https://blog.justlovesmile.top/posts/bc226294.html</id>
    <published>2022-03-26T05:48:39.000Z</published>
    <updated>2022-03-26T05:48:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FCOS-Fully-Convolutional-One-Stage-Object-Detection"><a href="#FCOS-Fully-Convolutional-One-Stage-Object-Detection" class="headerlink" title="FCOS: Fully Convolutional One-Stage Object Detection"></a>FCOS: Fully Convolutional One-Stage Object Detection</h1><blockquote><p>论文来源：ICCV2019<br>论文链接：<a href="https://arxiv.org/abs/1904.01355">https://arxiv.org/abs/1904.01355</a><br>论文代码：<a href="https://github.com/tianzhi0549/FCOS/">https://github.com/tianzhi0549/FCOS/</a></p></blockquote><p><img src="https://npm.elemecdn.com/justlovesmile-img/20211119114214.png" alt="20211119114214"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@inproceedings&#123;tian2019fcos,</span><br><span class="line">  title=&#123;Fcos: Fully convolutional one-stage object detection&#125;,</span><br><span class="line">  author=&#123;Tian, Zhi and Shen, Chunhua and Chen, Hao and He, Tong&#125;,</span><br><span class="line">  booktitle=&#123;Proceedings of the IEEE/CVF international conference on computer vision&#125;,</span><br><span class="line">  pages=&#123;9627--9636&#125;,</span><br><span class="line">  year=&#123;2019&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归纳总结"><a href="#归纳总结" class="headerlink" title="归纳总结"></a>归纳总结</h2><table><thead><tr><th>标签</th><th>目的</th><th>方法</th><th>总结</th></tr></thead><tbody><tr><td>#Anchor-Free #单阶段</td><td>解决Anchor-Base算法超参数设置复杂，计算量大的问题</td><td>FCN，Center-ness</td><td>Anchor-Free经典算法</td></tr></tbody></table><h2 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h2><p>FCOS是一种基于全卷积的单阶段目标检测算法，并且是一种Anchor box free的算法。其实现了无Anchor，无Proposal，并且提出了Center-ness的思想，极大的提升了Anchor-Free目标检测算法的性能。</p><p>Anchor free的好处是：</p><ul><li>避免了Anchor Box带来的复杂计算，如计算重合度IoU；</li><li>避免了Anchor Box相关的超参数设置，其对性能影响较大；</li></ul><p>因此，FCOS的优点是：</p><ul><li>其可以和其他使用FCN结构的任务相统一，方便其他任务方法之间的re-use</li><li>proposal free和anchor free，减少了超参数数量，更简单</li><li>减少了计算复杂度，如IoU计算</li><li>FCOS在单阶段算法中性能不错，并且证明了FCOS替换两阶段算法里的RPNs也可以取得更好的性能</li><li>适用于各种instance-wise的预测问题</li></ul><h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p>模型结构如下图：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211119160053912.png" alt="image-20211119160053912"></p><p>FCOS包含三个大模块：</p><ul><li>Backbone：提取图像特征，如结构图左侧所示，其中特征图尺寸逐层减半，如左侧$H×W$所示，$s=\frac{W^*}{W}$代表步长。对于坐标为$(x,y)$的位置，其映射回原图为$(\lfloor\frac{s}{2}\rfloor + xs,\lfloor\frac{s}{2}\rfloor+ys)$;</li><li>FPN：多层级预测，提高检测器对不同尺寸目标的检测性能；与Anchor Based不同的是，FCOS通过限制不同层级边界框回归范围来分配层级</li><li>Classification+Center-ness+Regression Head</li></ul><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211119155237711.png" alt="image-20211119155237711"></p><p>对于FCOS，其直接将每个位置$(x,y)$视为训练样本，其需要回归的值为一个4维向量$t=(l,t,r,b)$，如上图所示。<br>由于一张图片中的目标数量有限，所以导致基于Anchor的算法会产生更多的负样本，因此FCOS对于每个像素点只回归一组值（可以理解为Anchor数量为1），可以利用更多的前景（正）样本信息去训练。如果坐标落在任何ground-truth box中即为正样本，且该位置的类别为这个gt box的类别$c^*$，否则为负样本（即背景，类别为0），如果落在多个gt box中，则认为其是一个歧义样本（ambiguous sample），针对这种情况，可通过FPN解决。计算$(l^*, t^*, r^*, b^*)$，$m_i$为每个特征层最大距离（论文里作者设置$m_2$~$m_7$分别为0，64，128，256，512，$\infty$），如果$\max(l^*, t^*, r^*, b^*) &gt; m_i$ 或者 $\max(l^*, t^*, r^*, b^*) &lt; m_{i−1}$,则此位置为负样本，不进行计算；对于大小相近又存在重叠的gt box，FPN无法区别，则选择面积最小的gt box为回归目标。</p><h3 id="正负样本定义"><a href="#正负样本定义" class="headerlink" title="正负样本定义"></a>正负样本定义</h3><p>一个目标检测算法性能的优异性，最大影响因素就是<strong>如何定义正负样本</strong>。而FCOS的定义方式非常通俗易懂。主要分为两步：<br><strong>(1) 设置regress_ranges=((-1, 64), (64, 128), (128, 256), (256, 512),(512, INF)，用于将不同大小的bbox分配到不同的FPN层进行预测即距离4条边的最大值在给定范围内</strong><br><strong>(2) 设置center_sampling_ratio=1.5,用于确定对于任意一个输出层距离bbox中心多远的区域属于正样本（基于gt bbox中心点进行扩展出正方形，扩展范围是center_sample_radius×stride，正方形区域就当做新的gt bbox），该值越大，扩张比例越大，选择正样本区域越大；（细节：如果扩展比例过大，导致中心采样区域超过了gt bbox本身范围了，此时需要截断操作）</strong></p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>FCOS的损失函数为：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211119173209315.png" alt="image-20211119173209315"></p><p>其中$L_{cls}$是focal loss，$L_{reg}$是IoU loss，$N_{pos}$代表正样本数量，$\lambda$用于平衡$L_{reg}$的权重；$\mathbb{1} _ {c^{ * }<em>{i}}$当$c^{ * }</em>{i}&gt;0$时为1，否则为0；</p><p>为了减少低质量检测框，减少误检，FCOS增加了一个一层的分支，用于预测Center-ness，其描绘了位置到目标中心的归一化距离，下图展示了使用Center-ness（左）和不使用Center-ness（右）的区别。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211119175758242.png" alt="image-20211119175758242"></p><p>Center-ness的计算公式如下，其范围为0-1，训练阶段使用BCE Loss并和之前的损失函数相加，测试阶段用于加权预测得分：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211119180027086.png" alt="image-20211119180027086"></p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>对比实验结果：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211119180536280.png" alt="image-20211119180536280"></p><p>有无Center-ness分支的消融实验：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220326134621.png"></p><p>替换RPN的消融实验：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220326134721.png"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://zhuanlan.zhihu.com/p/267346645">mmdetection最小复刻版(六)：FCOS深入可视化分析 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <summary type="html">FCOS是一种基于全卷积的单阶段目标检测算法，并且是一种Anchor box free的算法。其实现了无Anchor，无Proposal，并且提出了Center-ness的思想，极大的提升了Anchor-Free目标检测算法的性能。</summary>
    
    
    
    <category term="人工智能" scheme="https://blog.justlovesmile.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="深度学习" scheme="https://blog.justlovesmile.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="论文笔记" scheme="https://blog.justlovesmile.top/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="目标检测" scheme="https://blog.justlovesmile.top/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>人工智能 | 测评推荐好用的GPU算力平台</title>
    <link href="https://blog.justlovesmile.top/posts/80a64b4b.html"/>
    <id>https://blog.justlovesmile.top/posts/80a64b4b.html</id>
    <published>2022-03-23T04:42:45.000Z</published>
    <updated>2022-03-23T04:42:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、免费GPU算力平台"><a href="#一、免费GPU算力平台" class="headerlink" title="一、免费GPU算力平台"></a>一、免费GPU算力平台</h1><h2 id="1-Google-Colab"><a href="#1-Google-Colab" class="headerlink" title="1. Google Colab"></a>1. Google Colab</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>Colab全称为Colaboratory，是Google提供的免费Jupyter notebook运行环境，并且完全在云端运行。<br>优点：</p><ul><li>可以免费使用</li><li>不需要自己去装深度学习的环境</li><li>数据可以通过谷歌网盘拉取<br>缺点：</li><li>需要翻墙，因此网络不稳定，容易断开连接</li><li>前台连接训练，如果需要后台训练需要购买Colab Pro</li><li>免费版GPU的挂载有时长限制（12h），超时需要重新挂载，注意保存训练结果</li></ul><h3 id="1-2-使用指南"><a href="#1-2-使用指南" class="headerlink" title="1.2 使用指南"></a>1.2 使用指南</h3><h4 id="1-2-1-连接GPU"><a href="#1-2-1-连接GPU" class="headerlink" title="1.2.1 连接GPU"></a>1.2.1 连接GPU</h4><p>进入Colab，官网地址：<a href="https://colab.research.google.com/">欢迎使用 Colaboratory - Colaboratory (google.com)</a>，创建一个jupyter notebook：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220322172825.png"></p><p>编写代码，连接Colab的GPU：点击左上角“修改-笔记本设置-GPU”</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220322173142.png"></p><p>更换成功后，可在notebook输入<code>!nvidia-smi</code>以查看GPU信息：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220322173421.png"></p><h4 id="1-2-2-获取数据集"><a href="#1-2-2-获取数据集" class="headerlink" title="1.2.2 获取数据集"></a>1.2.2 获取数据集</h4><p>首先将数据集上传至谷歌网盘，地址：<a href="https://drive.google.com/drive/">Google 云端硬盘</a>，然后在notebook中绑定硬盘：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> drive</span><br><span class="line"></span><br><span class="line">drive.mount(<span class="string">&#x27;/content/drive/&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后可以通过代码处理数据集或者数据集压缩包。</p><p>其他的使用和服务器是一样的，可以参考detectron2给的<a href="https://colab.research.google.com/drive/16jcaJoc6bCFAQ96jDe2HwtXj7BMD_-m5">Colab</a>代码。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323112055.png"></p><h2 id="2-Kaggle"><a href="#2-Kaggle" class="headerlink" title="2. Kaggle"></a>2. Kaggle</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>Kaggle是由 Anthony Goldbloom 2010年在墨尔本创立的，主要为开发商和数据科学家提供举办机器学习竞赛、托管数据库、编写和分享代码的平台。每周有30-43小时的GPU使用时长。</p><p>官网:<a href="https://www.kaggle.com/">Kaggle: Your Home for Data Science</a></p><h3 id="2-2-使用指南"><a href="#2-2-使用指南" class="headerlink" title="2.2 使用指南"></a>2.2 使用指南</h3><p>数据集可以直接引用别人上传的数据集,也可以自己上传打包好的数据集。</p><p>点击工具栏中Data，在右方出现的界面中，点击New Dataset</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323113136.png"></p><p>之后建立Notebook:<br><img src="https://npm.elemecdn.com/justlovesmile-img/20220323113427.png"></p><p>可以选择运算资源:<br><img src="https://npm.elemecdn.com/justlovesmile-img/20220323113555.png"></p><h2 id="3-阿里天池GPU"><a href="#3-阿里天池GPU" class="headerlink" title="3. 阿里天池GPU"></a>3. 阿里天池GPU</h2><p>阿里云天池GPU平台提供在线 Jupyter notebook , 每次连接可以使用 8 小时的GPU算力，官网: <a href="https://tianchi.aliyun.com/">天池大数据众智平台-阿里云天池 (aliyun.com)</a></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323114733.png"></p><h2 id="4-华为NAIE"><a href="#4-华为NAIE" class="headerlink" title="4. 华为NAIE"></a>4. 华为NAIE</h2><p>网络人工智能引擎iMaster NAIE是自动驾驶网络的网络AI设计和开发基础平台，支持对上传到云端的各种网络数据，持续进行AI训练和知识提取，生成AI模型和网络知识成果。最开始注册可以免费使用三个月(不过现在好像只能免费使用几天).</p><p>官网:<a href="https://www.hwtelcloud.com/">网络人工智能引擎 (hwtelcloud.com)</a></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323115017.png"></p><p>值得注意的是,该平台需要使用NAIE自带的包来处理数据加载和保存.</p><h2 id="5-百度飞桨Ai-Studio"><a href="#5-百度飞桨Ai-Studio" class="headerlink" title="5. 百度飞桨Ai Studio"></a>5. 百度飞桨Ai Studio</h2><p>只能用PaddlePaddle框架,运行项目或者学习课程可以免费白嫖算力卡,官网:<a href="https://aistudio.baidu.com/aistudio/index">飞桨AI Studio - 人工智能学习实训社区 (baidu.com)</a><br><img src="https://npm.elemecdn.com/justlovesmile-img/20220323120131.png"></p><h1 id="二、付费GPU算力平台"><a href="#二、付费GPU算力平台" class="headerlink" title="二、付费GPU算力平台"></a>二、付费GPU算力平台</h1><h2 id="1-矩池云"><a href="#1-矩池云" class="headerlink" title="1. 矩池云"></a>1. 矩池云</h2><h3 id="1-1-简介-1"><a href="#1-1-简介-1" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>矩池云是一个 GPU 云共享平台，可以按需租用到性价比极高的 GPU 云主机，并且注册并绑定公众号即可免费体验2小时GPU服务以及5元代金券，官网：<a href="https://matpool.com/">矩池云 - 专注于人工智能领域的云服务商 (matpool.com)</a></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323103316.png"></p><h3 id="1-2-使用指南-1"><a href="#1-2-使用指南-1" class="headerlink" title="1.2 使用指南"></a>1.2 使用指南</h3><p>首先将数据集打包上传至矩池云网盘，默认最大容量为5G，数据集太大的话可以购买容量。</p><p>然后可以在官网充值，学生或老师有优惠，充值后直接在GPU主机市场租用服务器，系统镜像丰富，选择自己需要的就行。<br><img src="https://npm.elemecdn.com/justlovesmile-img/20220323103526.png"></p><p>租用后即可在“我的租用”列表里看见服务器，启动后有三种连接方式：</p><ul><li>SSH</li><li>VNC</li><li>Jupyter Lab</li></ul><p>连接后就可以正常使用了，值得注意的是结束训练后记得保存环境，停止并释放资源。保存的环境会存储在网盘中，注意查看网盘容量。</p><h2 id="2-恒源云"><a href="#2-恒源云" class="headerlink" title="2. 恒源云"></a>2. 恒源云</h2><p>恒源云是一个专注 AI 行业的共享算力平台，旨在为用户提供高性价比的GPU云主机和存储服务，让用户拥有高效的云端编程和训练体验，不再担忧硬件迭代/环境搭建/数据存储等一系列问题。其价格相比较矩池云更便宜。官网：<a href="https://gpushare.com/">恒源云_GPUSHARE-恒源智享云</a></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323104206.png"></p><h2 id="3-AutoDL"><a href="#3-AutoDL" class="headerlink" title="3. AutoDL"></a>3. AutoDL</h2><p>AutoDL针对不同会员等级有不同的优惠，学生可以免费升级会员，性价比较高。官网：<a href="https://www.autodl.com/home">AutoDL-品质GPU租用平台-租GPU就上AutoDL</a></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323105140.png"></p><h2 id="4-智星云"><a href="#4-智星云" class="headerlink" title="4. 智星云"></a>4. 智星云</h2><p>智星云提供了弹性灵活的分时租用方式，分时租用在服务器启动时开始计费并每分钟扣费。例如RTX2080Ti分时租用价格为3元/小时，系统会按照3除以60的金额每分钟扣费0.05元并在1小时总共扣除3元。官网：<a href="http://gpu.ai-galaxy.cn/store">智星云 AI Galaxy | GPU云服务器 (ai-galaxy.cn)</a></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323104607.png"></p><h2 id="5-FEATURIZE"><a href="#5-FEATURIZE" class="headerlink" title="5. FEATURIZE"></a>5. FEATURIZE</h2><p>官网：<a href="https://featurize.cn/">Featurize</a><br><img src="https://npm.elemecdn.com/justlovesmile-img/20220323110835.png"></p><h2 id="6-滴滴云"><a href="#6-滴滴云" class="headerlink" title="6. 滴滴云"></a>6. 滴滴云</h2><p>目前提供P4，P40，P100，T4四种机型，官网：<a href="https://www.didiyun.com/production/gpu.html">GPU云服务器-滴滴出行的云计算服务 (didiyun.com)</a></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323111514.png"></p><h2 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h2><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323111747.png"><br>图片来自机器之心</p><h1 id="三、云计算巨头"><a href="#三、云计算巨头" class="headerlink" title="三、云计算巨头"></a>三、云计算巨头</h1><h2 id="1-阿里云GPU服务器"><a href="#1-阿里云GPU服务器" class="headerlink" title="1. 阿里云GPU服务器"></a>1. 阿里云GPU服务器</h2><p>官网：<a href="https://www.aliyun.com/product/ecs/gpu">GPU云服务器_GPU云计算_异构计算_弹性计算-阿里云 (aliyun.com)</a></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323105342.png"></p><h2 id="2-腾讯云GPU服务器"><a href="#2-腾讯云GPU服务器" class="headerlink" title="2. 腾讯云GPU服务器"></a>2. 腾讯云GPU服务器</h2><p>官网：<a href="https://cloud.tencent.com/product/gpu">GPU云服务器_并行计算_弹性计算_人工智能_深度学习 (tencent.com)</a></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323105639.png"></p><h2 id="3-华为云GPU服务器"><a href="#3-华为云GPU服务器" class="headerlink" title="3. 华为云GPU服务器"></a>3. 华为云GPU服务器</h2><p>官网：<a href="https://www.huaweicloud.com/product/gpu.html">GPU加速云服务器_GPU云服务器_GPU云主机-华为云 (huaweicloud.com)</a></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220323105856.png"></p>]]></content>
    
    
    <summary type="html">市面上有不少平台提供GPU租用服务，其中的价格和质量也是飘忽不定，本文主要根据价格和质量，总结了几个比较不错的GPU算力平台。</summary>
    
    
    
    <category term="人工智能" scheme="https://blog.justlovesmile.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="深度学习" scheme="https://blog.justlovesmile.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="GPU" scheme="https://blog.justlovesmile.top/tags/GPU/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 | Detectron2使用指南</title>
    <link href="https://blog.justlovesmile.top/posts/589ec011.html"/>
    <id>https://blog.justlovesmile.top/posts/589ec011.html</id>
    <published>2022-03-18T10:16:03.000Z</published>
    <updated>2022-03-18T10:16:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Detectron2</code>是<code>Facebook AI Research</code>的检测和分割框架，其主要基于<code>PyTorch</code>实现，但具有更模块化设计，因此它是灵活且便于扩展的，具体简介可见<a href="https://github.com/facebookresearch/detectron2">Github库</a>和<a href="https://ai.facebook.com/blog/-detectron2-a-pytorch-based-modular-object-detection-library-/">Meta AI Blog Post</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@misc&#123;wu2019detectron2,</span><br><span class="line">  author =       &#123;Yuxin Wu and Alexander Kirillov and Francisco Massa and</span><br><span class="line"> Wan-Yen Lo and Ross Girshick&#125;,</span><br><span class="line">  title =        &#123;Detectron2&#125;,</span><br><span class="line">  howpublished = &#123;\url&#123;https://github.com/facebookresearch/detectron2&#125;&#125;,</span><br><span class="line">  year =         &#123;2019&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1-Detectron2安装"><a href="#1-Detectron2安装" class="headerlink" title="1. Detectron2安装"></a>1. Detectron2安装</h1><blockquote><p>首先官方要求的环境条件如下：</p><ul><li>Linux or macOS with Python ≥ 3.6</li><li>PyTorch ≥ 1.8 and <a href="https://github.com/pytorch/vision/">torchvision</a> that matches the PyTorch installation. Install them together at <a href="https://pytorch.org/">pytorch.org</a> to make sure of this</li><li>OpenCV is optional but needed by demo and visualization</li><li> gcc &amp; g++ ≥ 5.4 are required</li><li><a href="https://ninja-build.org/">ninja</a> is optional but recommended for faster build</li><li>Cuda &amp; Cudnn</li></ul></blockquote><p>因此想要安装并使用Detectron2，需要有：</p><ul><li>环境：Python，Cuda，Cudnn，gcc&amp;g++</li><li>Python包：pytorch，torchvision，python-opencv</li><li>推荐：Anaconda</li></ul><h2 id="1-1-Linux"><a href="#1-1-Linux" class="headerlink" title="1.1 Linux"></a>1.1 Linux</h2><p>Linux安装直接按照<a href="https://detectron2.readthedocs.io/en/latest/tutorials/install.html">官方文档</a>的安装步骤即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install &#x27;git+https://github.com/facebookresearch/detectron2.git&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> (add --user <span class="keyword">if</span> you don<span class="string">&#x27;t have permission)</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Or, to install it from a local clone:</span></span></span><br><span class="line">git clone https://github.com/facebookresearch/detectron2.git</span><br><span class="line">python -m pip install -e detectron2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> On macOS, you may need to prepend the above commands with a few environment variables:</span></span></span><br><span class="line">CC=clang CXX=clang++ ARCHFLAGS=&quot;-arch x86_64&quot; python -m pip install ...</span><br></pre></td></tr></table></figure><p>如果以上安装失败，可以尝试直接安装预编译文件，同样在<a href="https://detectron2.readthedocs.io/en/latest/tutorials/install.html">官方文档有提供</a></p><h2 id="1-2-Windows"><a href="#1-2-Windows" class="headerlink" title="1.2 Windows"></a>1.2 Windows</h2><h3 id="1-2-1-VS2019-C-编译环境"><a href="#1-2-1-VS2019-C-编译环境" class="headerlink" title="1.2.1 VS2019 C++编译环境"></a>1.2.1 VS2019 C++编译环境</h3><p>Windows想要安装Detectron2，需要提前安装<strong>Microsoft Visual Studio 2019</strong>，然后选择安装“<strong>使用C++的桌面开发</strong>”，其他均默认即可。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220316165420.png"></p><h3 id="1-2-2-pycocotools"><a href="#1-2-2-pycocotools" class="headerlink" title="1.2.2 pycocotools"></a>1.2.2 pycocotools</h3><p>安装方法一：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/philferriere/cocoapi.git#subdirectory=PythonAPI</span><br></pre></td></tr></table></figure><p>安装方法二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pdollar/coco.git</span><br><span class="line"></span><br><span class="line">cd coco/PythonAPI</span><br><span class="line"></span><br><span class="line">python setup.py build_ext --inplace</span><br><span class="line">python setup.py build_ext install</span><br></pre></td></tr></table></figure><p>如果安装失败（一般都会失败），尝试下载“Microsoft Visual C++ Build Tools.exe” ，官网链接：<a href="https://go.microsoft.com/fwlink/?LinkId=691126">https://go.microsoft.com/fwlink/?LinkId=691126</a>。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220316171845.png"></p><p>如果在安装的过程中因网络问题失败，可以使用离线包，网盘链接：<a href="https://pan.baidu.com/s/1GeJ2c8MxnZP8lAYAwQACzg">https://pan.baidu.com/s/1GeJ2c8MxnZP8lAYAwQACzg</a>，提取码<code>1114</code>。</p><h3 id="1-2-3-Detectron2"><a href="#1-2-3-Detectron2" class="headerlink" title="1.2.3 Detectron2"></a>1.2.3 Detectron2</h3><p>使用Conda（推荐！之前有过同一个包使用conda安装的好用而pip安装的不好用的经历）或者pip下载包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda install cython</span><br><span class="line">conda install ninja</span><br><span class="line">conda install pywin32</span><br></pre></td></tr></table></figure><p>下载Detectron2到本地:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/facebookresearch/detectron2.git</span><br><span class="line">python -m pip install -e detectron2</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/facebookresearch/detectron2.git</span><br><span class="line">cd detectron2 </span><br><span class="line">python setup.py build develop</span><br></pre></td></tr></table></figure><h1 id="2-自定义数据集"><a href="#2-自定义数据集" class="headerlink" title="2.  自定义数据集"></a>2.  自定义数据集</h1><h2 id="2-1-关于COCO格式"><a href="#2-1-关于COCO格式" class="headerlink" title="2.1 关于COCO格式"></a>2.1 关于COCO格式</h2><p>Detectron2已经写好了COCO格式的数据集图像和标注的读取，因此通常减少工作量，可以自己写一个脚本将<strong>数据集转为COCO格式</strong>的标注。</p><p>COCO的文件目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-coco/</span><br><span class="line">    |-train2017/</span><br><span class="line">    |-1.jpg</span><br><span class="line">    |-2.jpg</span><br><span class="line">    |-val2017/</span><br><span class="line">    |-3.jpg</span><br><span class="line">    |-4.jpg</span><br><span class="line">    |-test2017/</span><br><span class="line">    |-5.jpg</span><br><span class="line">    |-6.jpg</span><br><span class="line">    |-annotations/</span><br><span class="line">    |-instances_train2017.json</span><br><span class="line">    |-instances_val2017.json</span><br><span class="line">    |-*.json</span><br></pre></td></tr></table></figure><p>其中标注文件（json）最为重要，其格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;info&quot;</span>: &#123;<span class="comment">//数据集信息，对于训练而言不重要</span></span><br><span class="line"><span class="attr">&quot;year&quot;</span>: int, </span><br><span class="line"><span class="attr">&quot;version&quot;</span>: str, </span><br><span class="line"><span class="attr">&quot;description&quot;</span>: str, </span><br><span class="line"><span class="attr">&quot;contributor&quot;</span>: str, </span><br><span class="line"><span class="attr">&quot;url&quot;</span>: str, </span><br><span class="line"><span class="attr">&quot;date_created&quot;</span>: datetime,</span><br><span class="line">&#125;, </span><br><span class="line"><span class="attr">&quot;images&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: int, <span class="comment">//必要</span></span><br><span class="line"><span class="attr">&quot;width&quot;</span>: int, <span class="comment">//必要</span></span><br><span class="line"><span class="attr">&quot;height&quot;</span>: int, <span class="comment">//必要</span></span><br><span class="line"><span class="attr">&quot;file_name&quot;</span>: str, <span class="comment">//必要</span></span><br><span class="line"><span class="attr">&quot;license&quot;</span>: int,</span><br><span class="line"><span class="attr">&quot;flickr_url&quot;</span>: str,</span><br><span class="line"><span class="attr">&quot;coco_url&quot;</span>: str,</span><br><span class="line"><span class="attr">&quot;date_captured&quot;</span>: datetime, </span><br><span class="line">&#125;,&#123;...&#125;], <span class="comment">//列表</span></span><br><span class="line"><span class="attr">&quot;annotations&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: int, <span class="comment">//标注id</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span>: int, <span class="comment">//所属图像id</span></span><br><span class="line"><span class="attr">&quot;category_id&quot;</span>: int, <span class="comment">//类别id</span></span><br><span class="line"><span class="attr">&quot;segmentation&quot;</span>: RLE or [polygon], <span class="comment">//图像分割标注</span></span><br><span class="line"><span class="attr">&quot;area&quot;</span>: float, <span class="comment">//区域面积</span></span><br><span class="line"><span class="attr">&quot;bbox&quot;</span>: [x,y,width,height], <span class="comment">//目标框左上角坐标以及宽高</span></span><br><span class="line"><span class="attr">&quot;iscrowd&quot;</span>: <span class="number">0</span> or <span class="number">1</span>, <span class="comment">//是否密集</span></span><br><span class="line">&#125;,&#123;...&#125;], <span class="comment">//列表</span></span><br><span class="line"><span class="attr">&quot;categories&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: int, <span class="comment">//类别序号</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span>: str, <span class="comment">//类别名称</span></span><br><span class="line"><span class="attr">&quot;supercategory&quot;</span>: str, <span class="comment">//父类别</span></span><br><span class="line">&#125;], <span class="comment">//列表</span></span><br><span class="line"><span class="attr">&quot;licenses&quot;</span>: [&#123;<span class="comment">//对于训练，不重要</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span>: int, </span><br><span class="line"><span class="attr">&quot;name&quot;</span>: str, </span><br><span class="line"><span class="attr">&quot;url&quot;</span>: str,</span><br><span class="line">&#125;], <span class="comment">//列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-注册数据集"><a href="#2-2-注册数据集" class="headerlink" title="2.2 注册数据集"></a>2.2 注册数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> detectron2.data <span class="keyword">import</span> DatasetCatalog, MetadataCatalog</span><br><span class="line"><span class="keyword">from</span> detectron2.data.datasets.register_coco <span class="keyword">import</span> register_coco_instances</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DATA_ALL_CATEGORIES = [</span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;airplane&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ship&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;storage tank&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;baseball diamond&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tennis court&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;basketball court&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ground track field&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;harbor&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;bridge&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;vehicle&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">DATA_SPLITS = &#123;&#125;</span><br><span class="line">DATA_SPLITS[<span class="string">&#x27;nwpu_all&#x27;</span>] = &#123;</span><br><span class="line"><span class="string">&#x27;nwpu_all_trainval&#x27;</span>: (</span><br><span class="line">os.path.join(DATA_ROOT,<span class="string">&quot;positive image set&quot;</span>),</span><br><span class="line">os.path.join(DATA_ROOT,<span class="string">&#x27;trainval.json&#x27;</span>)</span><br><span class="line">),</span><br><span class="line"><span class="string">&#x27;nwpu_all_test&#x27;</span>: (</span><br><span class="line">os.path.join(DATA_ROOT,<span class="string">&quot;positive image set&quot;</span>),</span><br><span class="line">os.path.join(DATA_ROOT,<span class="string">&#x27;test.json&#x27;</span>)</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_data_all_instance_meta</span>():</span></span><br><span class="line">    thing_ids = [k[<span class="string">&quot;id&quot;</span>] <span class="keyword">for</span> k <span class="keyword">in</span> DATA_ALL_CATEGORIES]</span><br><span class="line">    thing_dataset_id_to_contiguous_id = &#123;k: i <span class="keyword">for</span> i, k <span class="keyword">in</span> <span class="built_in">enumerate</span>(thing_ids)&#125;</span><br><span class="line">    thing_classes = [k[<span class="string">&quot;name&quot;</span>] <span class="keyword">for</span> k <span class="keyword">in</span> DATA_ALL_CATEGORIES]</span><br><span class="line">    ret = &#123;</span><br><span class="line">        <span class="string">&quot;thing_dataset&quot;</span>: thing_dataset_id_to_contiguous_id,</span><br><span class="line">        <span class="string">&quot;thing_classes&quot;</span>: thing_classes,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_builtin_metadata</span>(<span class="params">dataset_name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> dataset_name == <span class="string">&quot;nwpu_all&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> _get_data_instance_meta(DATA_ALL_CATEGORIES)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_all</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">for</span> dataset_name, splits_per_dataset <span class="keyword">in</span> DATA_SPLITS.items():</span><br><span class="line">        <span class="keyword">for</span> key, (image_root, json_file) <span class="keyword">in</span> splits_per_dataset.items():</span><br><span class="line">            <span class="keyword">assert</span> os.path.exists(os.path.join(root, json_file))</span><br><span class="line">            register_coco_instances(</span><br><span class="line">                key,</span><br><span class="line">                _get_builtin_metadata(dataset_name),</span><br><span class="line">                os.path.join(root, json_file) <span class="keyword">if</span> <span class="string">&quot;://&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> json_file <span class="keyword">else</span> json_file,</span><br><span class="line">                os.path.join(root, image_root),</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">DATA_ROOT = <span class="string">&quot;D:/GISP/XIEMINGJIE/Code/Detection/dataset/NWPU VHR-10 dataset/&quot;</span></span><br><span class="line"></span><br><span class="line">register_all(DATA_ROOT)</span><br></pre></td></tr></table></figure><p>此时已完成<code>nwpu_all_trainval</code>以及<code>nwpu_all_test</code>数据集的注册，可以通过代码查看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(DatasetCatalog.get(<span class="string">&quot;nwpu_all_trainval&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(DatasetCatalog.get(<span class="string">&quot;nwpu_all_test&quot;</span>))</span><br></pre></td></tr></table></figure><p>当然，如果不想要使用COCO格式数据集也可以自定义注册函数，可以参考<code>register_coco_instances</code>的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_coco_instances</span>(<span class="params">name, metadata, json_file, image_root</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        name (str): the name that identifies a dataset, e.g. &quot;coco_2014_train&quot;.</span></span><br><span class="line"><span class="string">        metadata (dict): extra metadata associated with this dataset.  You can</span></span><br><span class="line"><span class="string">            leave it as an empty dict.</span></span><br><span class="line"><span class="string">        json_file (str): path to the json instance annotation file.</span></span><br><span class="line"><span class="string">        image_root (str or path-like): directory which contains all the images.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(name, <span class="built_in">str</span>), name</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(json_file, (<span class="built_in">str</span>, os.PathLike)), json_file</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(image_root, (<span class="built_in">str</span>, os.PathLike)), image_root</span><br><span class="line">    <span class="comment"># 1. register a function which returns dicts</span></span><br><span class="line">    DatasetCatalog.register(name, <span class="keyword">lambda</span>: load_coco_json(json_file, image_root, name))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. Optionally, add metadata about this dataset,</span></span><br><span class="line">    <span class="comment"># since they might be useful in evaluation, visualization or logging</span></span><br><span class="line">    MetadataCatalog.get(name).<span class="built_in">set</span>(</span><br><span class="line">        json_file=json_file, image_root=image_root, evaluator_type=<span class="string">&quot;coco&quot;</span>, **metadata</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>其中<code>load_coco_json</code>函数的功能是读取数据集标注文件，并以固定的形式返回，详细可见<a href="https://detectron2.readthedocs.io/en/latest/tutorials/datasets.html#register-a-dataset">官网</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load_coco_json返回的是一个列表</span></span><br><span class="line"><span class="comment"># 返回格式如下：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_coco_json</span>(<span class="params">json_file, image_root, dataset_name=<span class="literal">None</span>, extra_annotation_keys=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="comment"># read and do something</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># generate dataset_dicts like: ↓</span></span><br><span class="line">    dataset_dicts = [&#123;<span class="string">&#x27;file_name&#x27;</span>: <span class="string">&#x27;...\\images\\001.jpg&#x27;</span>, <span class="string">&#x27;height&#x27;</span>: <span class="number">939</span>, <span class="string">&#x27;width&#x27;</span>: <span class="number">1356</span>, <span class="string">&#x27;image_id&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;annotations&#x27;</span>: [&#123;<span class="string">&#x27;iscrowd&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;bbox&#x27;</span>: [<span class="number">903</span>, <span class="number">57</span>, <span class="number">129</span>, <span class="number">123</span>], <span class="string">&#x27;category_id&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;bbox_mode&#x27;</span>: &lt;BoxMode.XYWH_ABS: <span class="number">1</span>&gt;&#125;]&#125;, &#123;...&#125;]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dataset_dicts</span><br></pre></td></tr></table></figure><h2 id="2-3-可视化工具"><a href="#2-3-可视化工具" class="headerlink" title="2.3 可视化工具"></a>2.3 可视化工具</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> detectron2.data <span class="keyword">import</span> MetadataCatalog</span><br><span class="line"><span class="keyword">from</span> detectron2.data <span class="keyword">import</span> detection_utils <span class="keyword">as</span> utils</span><br><span class="line"><span class="keyword">from</span> detectron2.utils.visualizer <span class="keyword">import</span> Visualizer</span><br><span class="line"></span><br><span class="line">datasets_dicts = DatasetCatalog.get(<span class="string">&quot;nwpu_all_trainval_1shot&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> random.sample(datasets_dicts, <span class="number">1</span>):</span><br><span class="line">    img = utils.read_image(data[<span class="string">&quot;file_name&quot;</span>])</span><br><span class="line">    visual = Visualizer(img, metadata=MetadataCatalog.get(<span class="string">&quot;nwpu_all_trainval&quot;</span>),scale=<span class="number">0.5</span>)</span><br><span class="line">    vis = visual.draw_dataset_dict(data)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;window&quot;</span>, vis.get_image()[:, :, ::-<span class="number">1</span>])</span><br><span class="line">    cv2.waitKey()</span><br></pre></td></tr></table></figure><p><img src="https://npm.elemecdn.com/justlovesmile-img/20220316211311.png"></p><h2 id="2-4-自定义数据增强"><a href="#2-4-自定义数据增强" class="headerlink" title="2.4 自定义数据增强"></a>2.4 自定义数据增强</h2><p>在注册了数据集之后就可以用<code>detectron2.data.build_detection_train_loader</code>和<code>detectron2.data.build_detection_test_loader</code>构建<code>Dataloader</code>，即数据集的加载方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> detectron2.config <span class="keyword">import</span> get_cfg</span><br><span class="line"><span class="keyword">import</span> detectron2.data.transforms <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">from</span> detectron2.model_zoo <span class="keyword">import</span> model_zoo</span><br><span class="line"><span class="keyword">from</span> detectron2.data <span class="keyword">import</span> build_detection_train_loader</span><br><span class="line"><span class="keyword">from</span> detectron2.data <span class="keyword">import</span> DatasetMapper   <span class="comment"># the default mapper</span></span><br><span class="line"></span><br><span class="line">cfg = get_cfg()</span><br><span class="line">cfg.merge_from_file(model_zoo.get_config_file(<span class="string">&quot;COCO-Detection/retinanet_R_50_FPN_1x.yaml&quot;</span>))</span><br><span class="line">cfg.DATASETS.TRAIN = (<span class="string">&quot;nwpu_all_trainval&quot;</span>,)</span><br><span class="line"></span><br><span class="line">mapper = DatasetMapper(cfg,is_train=<span class="literal">True</span>,augmentations=[T.Resize((<span class="number">800</span>, <span class="number">800</span>))])</span><br><span class="line">train_loader = build_detection_train_loader(cfg,mapper=mapper)</span><br></pre></td></tr></table></figure><p><code>build_detection_train_loader()</code>的参数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">build_detection_train_loader(</span><br><span class="line">    dataset,</span><br><span class="line">    *,</span><br><span class="line">    mapper,</span><br><span class="line">    sampler=<span class="literal">None</span>,</span><br><span class="line">    total_batch_size,</span><br><span class="line">    aspect_ratio_grouping=<span class="literal">True</span>,</span><br><span class="line">    num_workers=<span class="number">0</span>,</span><br><span class="line">    collate_fn=<span class="literal">None</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其中<code>mapper</code>对应的就是数据增强部分，默认为<code>detectron2.data.DatasetMapper</code>，<code>sampler</code>对应的采样策略部分，通常只需要关注<code>mapper</code>即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatasetMapper</span>:</span></span><br><span class="line"><span class="meta">    @configurable</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,is_train: <span class="built_in">bool</span></span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_config</span>(<span class="params">cls, cfg, is_train: <span class="built_in">bool</span> = <span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_transform_annotations</span>(<span class="params">self, dataset_dict, transforms, image_shape</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, dataset_dict</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> dataset_dict</span><br></pre></td></tr></table></figure><p>官方给的自定义简化DataMapper：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> detectron2.data <span class="keyword">import</span> detection_utils <span class="keyword">as</span> utils</span><br><span class="line"><span class="keyword">import</span> detectron2.data.transforms <span class="keyword">as</span> T</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapper</span>(<span class="params">dataset_dict</span>):</span></span><br><span class="line">    dataset_dict = copy.deepcopy(dataset_dict)  <span class="comment"># it will be modified by code below</span></span><br><span class="line">    <span class="comment"># can use other ways to read image</span></span><br><span class="line">    image = utils.read_image(dataset_dict[<span class="string">&quot;file_name&quot;</span>], <span class="built_in">format</span>=<span class="string">&quot;BGR&quot;</span>)</span><br><span class="line">    <span class="comment"># &quot;Data Augmentation&quot;</span></span><br><span class="line">    auginput = T.AugInput(image)</span><br><span class="line">    transform = T.Resize((<span class="number">800</span>, <span class="number">800</span>))(auginput)</span><br><span class="line">    image = torch.from_numpy(auginput.image.transpose(<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">    annos = [</span><br><span class="line">        utils.transform_instance_annotations(annotation, [transform], image.shape[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">for</span> annotation <span class="keyword">in</span> dataset_dict.pop(<span class="string">&quot;annotations&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="comment"># create the format that the model expects</span></span><br><span class="line">       <span class="string">&quot;image&quot;</span>: image,</span><br><span class="line">       <span class="string">&quot;instances&quot;</span>: utils.annotations_to_instances(annos, image.shape[<span class="number">1</span>:])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">dataloader = build_detection_train_loader(cfg, mapper=mapper)</span><br></pre></td></tr></table></figure><p>因此自定义的数据增强需要满足，输入为<code>dataset_dict</code>，输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;images&quot;</span>: image_tensor,</span><br><span class="line"> <span class="string">&quot;instances&quot;</span>: utils.annotations_to_instances =&gt; Instances类</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-自定义模型"><a href="#3-自定义模型" class="headerlink" title="3. 自定义模型"></a>3. 自定义模型</h1><p>Detectron2的模型是分模块的，它将目标检测模型拆分为了4个核心模块：<code>backbone</code>，<code>proposal_generator</code>，<code>roi_heads</code>以及<code>meta_arch</code>。</p><h2 id="3-1-特征提取网络（backbone）"><a href="#3-1-特征提取网络（backbone）" class="headerlink" title="3.1 特征提取网络（backbone）"></a>3.1 特征提取网络（backbone）</h2><p>在<code>detectron2.modeling.backbone</code>路径下可以看到，目前只有<code>ResNet</code>、<code>FPN</code>和<code>RegNet</code></p><p>可直接使用的<code>backbone</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">build_resnet_backbone</span><br><span class="line">build_resnet_fpn_backbone</span><br><span class="line">build_retinanet_resnet_fpn_backbone</span><br></pre></td></tr></table></figure><p>官方的自定义<code>backbone</code>的案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> detectron2.modeling <span class="keyword">import</span> BACKBONE_REGISTRY, Backbone, ShapeSpec</span><br><span class="line"></span><br><span class="line"><span class="meta">@BACKBONE_REGISTRY.register()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToyBackbone</span>(<span class="params">Backbone</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, cfg, input_shape</span>):</span></span><br><span class="line">    <span class="built_in">super</span>().__init__()</span><br><span class="line">    <span class="comment"># create your own backbone</span></span><br><span class="line">    self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">7</span>, stride=<span class="number">16</span>, padding=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, image</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;conv1&quot;</span>: self.conv1(image)&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">output_shape</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;conv1&quot;</span>: ShapeSpec(channels=<span class="number">64</span>, stride=<span class="number">16</span>)&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-候选框生成器（proposal-generator）"><a href="#3-2-候选框生成器（proposal-generator）" class="headerlink" title="3.2 候选框生成器（proposal_generator）"></a>3.2 候选框生成器（proposal_generator）</h2><p>同样可以自定义注册</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PROPOSAL_GENERATOR_REGISTRY.register()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToyRPN</span>(<span class="params">RPN</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,*args, **kwargs</span>):</span></span><br><span class="line"><span class="built_in">super</span>().__init__()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RPN_HEAD_REGISTRY.register()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToyRPNHead</span>(<span class="params">StandardRPNHead</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,*args, **kwargs</span>):</span></span><br><span class="line">    <span class="built_in">super</span>().__init__()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="3-3-检测器（roi-heads）"><a href="#3-3-检测器（roi-heads）" class="headerlink" title="3.3 检测器（roi_heads）"></a>3.3 检测器（roi_heads）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ROI_MASK_HEAD_REGISTRY.register()</span></span><br><span class="line"><span class="meta">@ROI_KEYPOINT_HEAD_REGISTRY.register()</span></span><br><span class="line"><span class="meta">@ROI_HEADS_REGISTRY.register()</span></span><br><span class="line"><span class="meta">@ROI_BOX_HEAD_REGISTRY.register()</span></span><br></pre></td></tr></table></figure><h2 id="3-4-模型框架（meta-arch）"><a href="#3-4-模型框架（meta-arch）" class="headerlink" title="3.4 模型框架（meta_arch）"></a>3.4 模型框架（meta_arch）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@META_ARCH_REGISTRY.register()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToyNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"><span class="meta">    @configurable</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_config</span>(<span class="params">cls, cfg</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward_training</span>(<span class="params">self,*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span>(<span class="params">self,*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @torch.no_grad()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">label_anchors</span>(<span class="params">self,*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward_inference</span>(<span class="params">self,*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inference_single_image</span>(<span class="params">self,*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>具体可参考官方复现的<a href="https://github.com/facebookresearch/detectron2/tree/main/projects">projects</a></p><h1 id="4-模型训练"><a href="#4-模型训练" class="headerlink" title="4. 模型训练"></a>4. 模型训练</h1><h2 id="4-1-默认训练"><a href="#4-1-默认训练" class="headerlink" title="4.1 默认训练"></a>4.1 默认训练</h2><p>一般而言，我们可以继承使用默认的目标检测任务训练器<code>DefalutTrainer</code>，而<code>DefalutTrainer</code>又是继承自<code>TrainerBase</code>，<code>TrainerBase</code>中又使用到了<code>HookBase</code>。我的理解是<code>HookBase</code>和<code>TrainerBase</code>是将一个训练过程抽象并拆分成阶段步骤的过程，先看<code>HookBase</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HookBase</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">before_train</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Called before the first iteration.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">after_train</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Called after the last iteration.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">before_step</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Called before each iteration.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">after_step</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Called after each iteration.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">state_dict</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>对于训练而言，它将一个完整的训练拆分成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrainerBase</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._hooks: <span class="type">List</span>[HookBase] = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register_hooks</span>(<span class="params">self, hooks: <span class="type">List</span>[<span class="type">Optional</span>[HookBase]]</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        hooks = [h <span class="keyword">for</span> h <span class="keyword">in</span> hooks <span class="keyword">if</span> h <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>]</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> hooks:</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">isinstance</span>(h, HookBase)</span><br><span class="line">            h.trainer = weakref.proxy(self)</span><br><span class="line">        self._hooks.extend(hooks)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">self, start_iter: <span class="built_in">int</span>, max_iter: <span class="built_in">int</span></span>):</span></span><br><span class="line">        self.<span class="built_in">iter</span> = self.start_iter = start_iter</span><br><span class="line">        self.max_iter = max_iter</span><br><span class="line">        <span class="keyword">with</span> EventStorage(start_iter) <span class="keyword">as</span> self.storage:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.before_train()</span><br><span class="line">                <span class="keyword">for</span> self.<span class="built_in">iter</span> <span class="keyword">in</span> <span class="built_in">range</span>(start_iter, max_iter):</span><br><span class="line">                    self.before_step()</span><br><span class="line">                    self.run_step()</span><br><span class="line">                    self.after_step()</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                self.after_train()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">before_train</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> self._hooks:</span><br><span class="line">            h.before_train()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">after_train</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.storage.<span class="built_in">iter</span> = self.<span class="built_in">iter</span></span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> self._hooks:</span><br><span class="line">            h.after_train()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">before_step</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.storage.<span class="built_in">iter</span> = self.<span class="built_in">iter</span></span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> self._hooks:</span><br><span class="line">            h.before_step()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">after_step</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> self._hooks:</span><br><span class="line">            h.after_step()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_step</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">state_dict</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_state_dict</span>(<span class="params">self, state_dict</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>简化一点，它将一个训练过程抽象成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hook.before_train()</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">iter</span> <span class="keyword">in</span> <span class="built_in">range</span>(start_iter, max_iter):</span><br><span class="line">    hook.before_step()</span><br><span class="line">    trainer.run_step()</span><br><span class="line">    hook.after_step()</span><br><span class="line"><span class="built_in">iter</span> += <span class="number">1</span></span><br><span class="line">hook.after_train()</span><br></pre></td></tr></table></figure><p>具体到目标检测任务，<code>DefaultTrainer</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultTrainer</span>(<span class="params">TrainerBase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, cfg</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_hooks</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_writers</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">cls, cfg, model, evaluators=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    <span class="comment"># a lot of</span></span><br><span class="line">    <span class="comment"># def ...(...):</span></span><br><span class="line">    <span class="comment">#     .....</span></span><br><span class="line">    <span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_train_loader</span>(<span class="params">cls, cfg</span>):</span></span><br><span class="line">        <span class="keyword">return</span> build_detection_train_loader(cfg)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_test_loader</span>(<span class="params">cls, cfg, dataset_name</span>):</span></span><br><span class="line">        <span class="keyword">return</span> build_detection_test_loader(cfg, dataset_name)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_evaluator</span>(<span class="params">cls, cfg, dataset_name</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="4-2-自定义训练"><a href="#4-2-自定义训练" class="headerlink" title="4.2 自定义训练"></a>4.2 自定义训练</h2><p>由于Detectron2已经将训练过程模块化，因此只需要修改对应模块即可，而一般而言，我们只需要修改数据加载和<code>evaluate</code>部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> detectron2.engine <span class="keyword">import</span> DefaultTrainer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trainer</span>(<span class="params">DefaultTrainer</span>):</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_evaluator</span>(<span class="params">cls, cfg, dataset_name, output_folder=<span class="literal">None</span></span>):</span></span><br><span class="line">        evaluator_list = []</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> DatasetEvaluators(evaluator_list)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_test_loader</span>(<span class="params">cls, cfg, dataset_name</span>):</span></span><br><span class="line">        <span class="keyword">return</span> build_detection_test_loader(cfg, dataset_name, mapper=my_mapper(cfg,<span class="string">&quot;test&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_train_loader</span>(<span class="params">cls, cfg</span>):</span></span><br><span class="line">        <span class="keyword">return</span> build_detection_train_loader(cfg, mapper=my_mapper(cfg, <span class="string">&quot;train&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="4-3-完整训练流程"><a href="#4-3-完整训练流程" class="headerlink" title="4.3 完整训练流程"></a>4.3 完整训练流程</h2><p>参考<code>tools/train_net.py</code>或者<code>tools/plain_train_net.py</code>，已经写的非常详细了👍，注意别忘了导入自己写好的注册数据集以及注册模型的文件，只要导入了就会自动注册，就可以在配置文件中使用。</p><h1 id="5-配置文件"><a href="#5-配置文件" class="headerlink" title="5. 配置文件"></a>5. 配置文件</h1><p>参考<code>configs</code>文件夹下的<code>yaml</code>文件格式，，可以通过<code>__BASE__</code>继承基础配置文件，还可以直接覆盖之前的配置，如<code>retinanet_R_50_FPN_3x.yaml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">_BASE_:</span> <span class="string">&quot;../Base-RetinaNet.yaml&quot;</span></span><br><span class="line"><span class="attr">MODEL:</span></span><br><span class="line">  <span class="attr">WEIGHTS:</span> <span class="string">&quot;detectron2://ImageNetPretrained/MSRA/R-50.pkl&quot;</span></span><br><span class="line">  <span class="attr">RESNETS:</span></span><br><span class="line">    <span class="attr">DEPTH:</span> <span class="number">50</span></span><br><span class="line"><span class="attr">SOLVER:</span></span><br><span class="line">  <span class="attr">STEPS:</span> <span class="string">(210000,</span> <span class="number">250000</span><span class="string">)</span></span><br><span class="line">  <span class="attr">MAX_ITER:</span> <span class="number">270000</span></span><br></pre></td></tr></table></figure><p>查看全部配置项：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> detectron2.config <span class="keyword">import</span> get_cfg</span><br><span class="line">cfg = get_cfg()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cfg)</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">print</span>(cfg.dump())</span><br></pre></td></tr></table></figure><p>在python文件中修改配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cfg.SOLVER.BASE_LR = <span class="number">0.001</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">cfg.merge_from_list([<span class="string">&quot;SOLVER.BASE_LR&quot;</span>, <span class="string">&quot;0.001&quot;</span>])</span><br></pre></td></tr></table></figure><p>合并多个文件中的配置项：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfg.merge_from_file(<span class="string">&quot;my_cfg.yaml&quot;</span>)</span><br></pre></td></tr></table></figure><p>由于配置项本质上还是转换成了字典类型，因此可以直接从python文件导入配置，并且也提供了python格式的配置文件该怎么进行训练的示例，参考<code>tools/lazyconfig_train_net.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.py</span></span><br><span class="line">NEW_MODEL = <span class="built_in">dict</span>(NUM=<span class="number">1</span>,SIZE=<span class="built_in">dict</span>(W=<span class="number">2</span>,H=<span class="number">3</span>))</span><br><span class="line">NEW_OPT = <span class="built_in">dict</span>(NAME=<span class="string">&quot;hhhh&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"><span class="keyword">from</span> detectron2.config <span class="keyword">import</span> LazyConfig</span><br><span class="line">cfg = LazyConfig.load(<span class="string">&quot;config.py&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> cfg.NEW_MODEL.SIZE.W==<span class="number">2</span></span><br><span class="line"><span class="comment"># cfg = LazyConfig.load(args.config_file)</span></span><br><span class="line"><span class="comment"># cfg = LazyConfig.apply_overrides(cfg, args.opts)</span></span><br></pre></td></tr></table></figure><p>并且Detectron2还提供了一个帮助创建配置字典的函数，<code>LazyCall</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> detectron2.config <span class="keyword">import</span> LazyCall <span class="keyword">as</span> L</span><br><span class="line"><span class="keyword">from</span> detectron2.modeling.backbone <span class="keyword">import</span> RegNet</span><br><span class="line"><span class="keyword">from</span> detectron2.modeling.backbone.regnet <span class="keyword">import</span> SimpleStem, ResBottleneckBlock</span><br><span class="line"></span><br><span class="line">bottom_up = L(RegNet)(</span><br><span class="line">    stem_class=SimpleStem,</span><br><span class="line">    stem_width=<span class="number">32</span>,</span><br><span class="line">    block_class=ResBottleneckBlock,</span><br><span class="line">    depth=<span class="number">23</span>,</span><br><span class="line">    w_a=<span class="number">38.65</span>,</span><br><span class="line">    w_0=<span class="number">96</span>,</span><br><span class="line">    w_m=<span class="number">2.43</span>,</span><br><span class="line">    group_width=<span class="number">40</span>,</span><br><span class="line">    norm=<span class="string">&quot;SyncBN&quot;</span>,</span><br><span class="line">    out_features=[<span class="string">&quot;s1&quot;</span>, <span class="string">&quot;s2&quot;</span>, <span class="string">&quot;s3&quot;</span>, <span class="string">&quot;s4&quot;</span>],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bottom_up)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Detectron2是Facebook AI Research的检测和分割框架，其主要基于PyTorch实现，但具有更模块化设计，因此它是灵活且便于扩展的，具体简介可见Github库和Meta AI Blog Post。</summary>
    
    
    
    <category term="人工智能" scheme="https://blog.justlovesmile.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="深度学习" scheme="https://blog.justlovesmile.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Detectron2" scheme="https://blog.justlovesmile.top/tags/Detectron2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客 | 如何让Butterfly主题导航栏居中</title>
    <link href="https://blog.justlovesmile.top/posts/56b0563d.html"/>
    <id>https://blog.justlovesmile.top/posts/56b0563d.html</id>
    <published>2022-03-15T01:25:18.000Z</published>
    <updated>2022-03-15T01:25:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近有很多小伙伴留言问我ButterFly主题的<strong>导航栏是怎么居中的</strong>，说实话我的博客样式其实都是一点一点从其他博主的博客那模仿来的（如果我没记错的话，导航栏应该是看的<a href="https://blog.zhheo.com/">Heo大佬</a>的），所以样式修改的时间跨度有点长，我自己也不太清楚具体改了哪些地方，但是鉴于问的小伙伴太多，我决定把导航栏文件全部展示出来，至于CSS可以参考我的<a href="/css/justlovesmile.css">css文件</a>第168到434行（当前时间2022/3/15，不排除之后我又改了）……</p><h2 id="主题模板文件"><a href="#主题模板文件" class="headerlink" title="主题模板文件"></a>主题模板文件</h2><h3 id="index-pug"><a href="#index-pug" class="headerlink" title="index.pug"></a>index.pug</h3><p><code>themes\butterfly\layout\includes\header\index.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">if !theme.disable_top_img &amp;&amp; page.top_img !== false</span><br><span class="line">  if is_post()</span><br><span class="line">    - var top_img = page.top_img || page.cover || page.randomcover</span><br><span class="line">  else if is_page()</span><br><span class="line">    - var top_img = page.top_img || theme.default_top_img</span><br><span class="line">  else if is_tag()</span><br><span class="line">    - var top_img = theme.tag_per_img &amp;&amp; theme.tag_per_img[page.tag] </span><br><span class="line">    - top_img = top_img ? top_img : (theme.tag_img !== false ? theme.tag_img || theme.default_top_img : false)</span><br><span class="line">  else if is_category()</span><br><span class="line">    - var top_img = theme.category_per_img &amp;&amp; theme.category_per_img[page.category]</span><br><span class="line">    - top_img = top_img ? top_img : (theme.category_img !== false ? theme.category_img || theme.default_top_img : false)</span><br><span class="line">  else if is_home()</span><br><span class="line">    - var top_img = theme.index_img !== false ? theme.index_img || theme.default_top_img : false</span><br><span class="line">  else if is_archive()</span><br><span class="line">    - var top_img = theme.archive_img !== false ? theme.archive_img || theme.default_top_img : false</span><br><span class="line">  else</span><br><span class="line">    - var top_img = page.top_img || theme.default_top_img</span><br><span class="line"></span><br><span class="line">  if top_img !== false</span><br><span class="line">    - var imgSource = top_img &amp;&amp; top_img.indexOf(&#x27;/&#x27;) !== -1 ? `background-image: url(&#x27;$&#123;url_for(top_img)&#125;&#x27;)` : `background: $&#123;top_img&#125;`</span><br><span class="line">    - var bg_img = top_img ? imgSource : &#x27;&#x27;</span><br><span class="line">    - var site_title = is_archive() ? fragment_cache(&#x27;findArchivesTitle&#x27;, function()&#123;return findArchivesTitle(theme.menu);&#125;) : page.title || page.tag || page.category || config.title</span><br><span class="line">    - var isHomeClass = is_home() ? &#x27;full_page&#x27; : &#x27;not-home-page&#x27;</span><br><span class="line">    - is_post() ? isHomeClass = &#x27;post-bg&#x27; : isHomeClass</span><br><span class="line">  else</span><br><span class="line">    - var isHomeClass = &#x27;not-top-img&#x27;</span><br><span class="line">else</span><br><span class="line">  - var top_img = false</span><br><span class="line">  - var isHomeClass = &#x27;not-top-img&#x27;</span><br><span class="line"></span><br><span class="line">header#page-header(class=isHomeClass style=bg_img)</span><br><span class="line">  !=partial(&#x27;includes/header/nav&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line">  if top_img !== false</span><br><span class="line">    if is_post()</span><br><span class="line">      #coverdiv.coverdiv</span><br><span class="line">        img#post-cover.cover.entered.loading(alt=&#x27;cover&#x27; src=`$&#123;top_img&#125;`)</span><br><span class="line">      include ./post-info.pug</span><br><span class="line">    else if is_home() </span><br><span class="line">      #site-info</span><br><span class="line">        h1#site-title=site_title</span><br><span class="line">        if theme.subtitle.enable</span><br><span class="line">          - var loadSubJs = true</span><br><span class="line">          #site-subtitle</span><br><span class="line">            span#subtitle</span><br><span class="line">        if(theme.social)</span><br><span class="line">          #site_social_icons</span><br><span class="line">            !=fragment_cache(&#x27;social&#x27;, function()&#123;return partial(&#x27;includes/header/social&#x27;)&#125;)</span><br><span class="line">      #scroll-down</span><br><span class="line">        i.fas.fa-angle-down.scroll-down-effects</span><br><span class="line">    else</span><br><span class="line">      #coverdiv.coverdiv</span><br><span class="line">        img#post-cover.cover.entered.loading(alt=&#x27;cover&#x27; src=`$&#123;top_img&#125;`)</span><br><span class="line">      #page-site-info</span><br><span class="line">        h1#site-title=site_title</span><br></pre></td></tr></table></figure><h3 id="nav-pug"><a href="#nav-pug" class="headerlink" title="nav.pug"></a>nav.pug</h3><p><code>themes\butterfly\layout\includes\header\nav.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">nav#nav</span><br><span class="line">  #nav-group</span><br><span class="line">    #blog_name</span><br><span class="line">      a#site-name(href=url_for(&#x27;/&#x27;)) #[=config.author]</span><br><span class="line"></span><br><span class="line">    #menus</span><br><span class="line">      !=partial(&#x27;includes/header/menu_item&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line"></span><br><span class="line">    #nav-right</span><br><span class="line">      if (theme.algolia_search.enable || theme.local_search.enable)</span><br><span class="line">        #search-button</span><br><span class="line">          a.nav-rightbutton.site-page.social-icon.search</span><br><span class="line">            i.fas.fa-search.fa-fw</span><br><span class="line">      #darkmode_navswitch</span><br><span class="line">        a.nav-rightbutton.site-page.darkmode_switchbutton(onclick=&quot;switchDarkMode()&quot;)</span><br><span class="line">          i.fas.fa-adjust</span><br><span class="line">      #toggle-menu</span><br><span class="line">        a.nav-rightbutton.site-page</span><br><span class="line">          i.fas.fa-bars.fa-fw</span><br></pre></td></tr></table></figure><p>上面提到的<code>switchDarkMode()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">switchDarkMode</span>(<span class="params"></span>) </span>&#123; <span class="comment">// Switch Between Light And Dark Mode</span></span><br><span class="line">      <span class="keyword">const</span> nowMode = <span class="built_in">document</span>.documentElement.getAttribute(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;dark&#x27;</span> ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span></span><br><span class="line">      <span class="keyword">if</span> (nowMode === <span class="string">&#x27;light&#x27;</span>) &#123;</span><br><span class="line">        activateDarkMode()</span><br><span class="line">        saveToLocal.set(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;dark&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">        GLOBAL_CONFIG.Snackbar !== <span class="literal">undefined</span> &amp;&amp; btf.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        activateLightMode()</span><br><span class="line">        saveToLocal.set(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;light&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">        GLOBAL_CONFIG.Snackbar !== <span class="literal">undefined</span> &amp;&amp; btf.snackbarShow(GLOBAL_CONFIG.Snackbar.night_to_day)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// handle some cases</span></span><br><span class="line">      <span class="keyword">typeof</span> utterancesTheme === <span class="string">&#x27;function&#x27;</span> &amp;&amp; utterancesTheme()</span><br><span class="line">      <span class="keyword">typeof</span> FB === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="built_in">window</span>.loadFBComment()</span><br><span class="line">      <span class="built_in">window</span>.DISQUS &amp;&amp; <span class="built_in">document</span>.getElementById(<span class="string">&#x27;disqus_thread&#x27;</span>).children.length &amp;&amp; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">window</span>.disqusReset(), <span class="number">200</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>请自行F12查看，截至目前（2022/3/15）导航栏相关css样式是在<a href="/css/justlovesmile.css">/css/justlovesmile.css</a>第168到434行….</p><p>其他的之后再补充，有问题的欢迎留言提问</p>]]></content>
    
    
    <summary type="html">最近有很多小伙伴留言问我ButterFly主题的导航栏是怎么居中的，说实话我的博客样式其实都是一点一点从其他博主的博客那模仿来的，所以样式修改的时间跨度有点长，我自己也不太清楚具体改了哪些地方，但是鉴于问的小伙伴太多，我决定把导航栏文件全部展示出来......</summary>
    
    
    
    <category term="博客相关" scheme="https://blog.justlovesmile.top/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="前端" scheme="https://blog.justlovesmile.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Hexo" scheme="https://blog.justlovesmile.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>目标检测 | RetinaNet，经典单阶段Anchor-Based目标检测模型</title>
    <link href="https://blog.justlovesmile.top/posts/bb608df3.html"/>
    <id>https://blog.justlovesmile.top/posts/bb608df3.html</id>
    <published>2022-03-14T03:26:21.000Z</published>
    <updated>2022-03-14T03:26:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Focal-Loss-for-Dense-Object-Detection"><a href="#Focal-Loss-for-Dense-Object-Detection" class="headerlink" title="Focal Loss for Dense Object Detection"></a>Focal Loss for Dense Object Detection</h1><blockquote><p>论文来源：IEEE Transactions on Pattern Analysis and Machine Intelligence 2020<br>论文链接：<a href="https://ieeexplore.ieee.org/document/8417976">Focal Loss for Dense Object Detection | IEEE Xplore</a><br>论文代码：<a href="https://github.com/facebookresearch/Detectron">https://github.com/facebookresearch/Detectron</a></p></blockquote><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211119213555220.png" alt="image-20211119213555220"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@inproceedings&#123;lin2017focal,</span><br><span class="line">  title=&#123;Focal loss for dense object detection&#125;,</span><br><span class="line">  author=&#123;Lin, Tsung-Yi and Goyal, Priya and Girshick, Ross and He, Kaiming and Doll&#123;\&#x27;a&#125;r, Piotr&#125;,</span><br><span class="line">  booktitle=&#123;Proceedings of the IEEE international conference on computer vision&#125;,</span><br><span class="line">  pages=&#123;2980--2988&#125;,</span><br><span class="line">  year=&#123;2017&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归纳总结"><a href="#归纳总结" class="headerlink" title="归纳总结"></a>归纳总结</h2><table><thead><tr><th>标签</th><th>目的</th><th>方法</th><th>总结</th></tr></thead><tbody><tr><td>#Anchor #单阶段</td><td>解决正负样本严重不均衡的问题</td><td>retinanet和focal loss</td><td>针对训练过程中的实际问题，修改损失函数以达到优化的目的</td></tr></tbody></table><h2 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h2><p>作者认为之前的单阶段检测算法精度不高的原因可能是前后景类别（正负样本）严重不均衡导致的。因此作者重新设计了一个损失：Focal Loss，其能降低可以较好分类的样本的损失权重，防止训练过程中大量的easy negatives给检测器带来的压制影响，并基于Focal Loss设计提出并训练了RetinaNet。</p><h3 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h3><p>RetinaNet的结构如下图：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120135540595.png" alt="image-20211120135540595"></p><p>主要包括三个部分：</p><ul><li>Backbone：使用了ResNet+FPN，用于生成多尺度{p3~p7}卷积特征图</li><li>Anchor：p3-p7特征图的base_size设置为$[32^2,64^2,128^2,256^2,512^2]$，在每一层特征图针对denser scale coverage，设置{${2^0,2^{1/3},2^{2/3}}$}三种不同的anchor size，比例为{1:2,1:1,2:1}，即每个位置9种Anchor。</li><li>subnets：用于分类和回归，结构相同但参数不共享的小型FCN结构</li></ul><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120135222791.png" alt="image-20211120135222791"></p><h3 id="Focal-Loss"><a href="#Focal-Loss" class="headerlink" title="Focal Loss"></a>Focal Loss</h3><p>作者提到基于R-CNN模式的两阶段算法在解决训练过程中的正负样本不均衡的方法是：</p><ul><li>两阶段级联：在proposal阶段过滤掉大量负样本</li><li>启发式采样：例如固定正负样本比例（例如1:3）或者在线难样本挖掘（Online Hard Example Mining，OHEM）</li></ul><p>Focal loss的做法是设置一个sacling factor，如下图的$(1-p_t)^{\gamma}$，其可以自动的对easy example进行降权，从而使模型更关注hard example。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120135146831.png" alt="image-20211120135146831"></p><p>首先，对于二分类任务，普通的交叉熵如下：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120132951497.png" alt="image-20211120132951497"></p><p>如果定义$p_t$：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120133459396.png" alt="image-20211120133459396"></p><p>那么交叉熵可以写成$CE(p,y)=CE(p_t)=-log(p_t)$</p><p>有一种常见的用于解决类别不均衡的方法是添加一个权重变量$\alpha \in [0,1]$：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120133655071.png" alt="image-20211120133655071"></p><p>Focal Loss的做法是添加了一个权重变量$(1-p_t)^{\gamma}$：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120133916235.png" alt="image-20211120133916235"></p><p>因此当$p_t$趋近于1时，可以较好分类的样本被降权；而$\gamma$可以用来调节权重比率。除此之外，还可以将$\alpha$和FL损失相结合：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120134227038.png" alt="image-20211120134227038"></p><p>除此之外还有其他的Focal Loss变种形式。</p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120141212266.png" alt="image-20211120141212266"></p>]]></content>
    
    
    <summary type="html">RetinaNet是He Kaiming等人在提出的一种单阶段目标检测算法，其针对现有单阶段检测模型中前后景（正负样本）类别的不平衡问题，提出了Focal Loss损失函数，用来降低大量easy negatives样本在标准交叉熵中所占权重。</summary>
    
    
    
    <category term="人工智能" scheme="https://blog.justlovesmile.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="深度学习" scheme="https://blog.justlovesmile.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="论文笔记" scheme="https://blog.justlovesmile.top/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="目标检测" scheme="https://blog.justlovesmile.top/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>目标检测 | Faster R-CNN，经典两阶段检测模型</title>
    <link href="https://blog.justlovesmile.top/posts/fc798de3.html"/>
    <id>https://blog.justlovesmile.top/posts/fc798de3.html</id>
    <published>2022-03-12T13:59:01.000Z</published>
    <updated>2022-03-12T13:59:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Faster-R-CNN-Towards-Real-Time-ObjectDetection-with-Region-Proposal-Networks"><a href="#Faster-R-CNN-Towards-Real-Time-ObjectDetection-with-Region-Proposal-Networks" class="headerlink" title="Faster R-CNN: Towards Real-Time ObjectDetection with Region Proposal Networks"></a>Faster R-CNN: Towards Real-Time ObjectDetection with Region Proposal Networks</h1><blockquote><p>论文发表：2015<br>论文链接：<a href="https://arxiv.org/abs/1506.01497">https://arxiv.org/abs/1506.01497</a><br>论文代码：<a href="https://github.com/rbgirshick/py-faster-rcnn">https://github.com/rbgirshick/py-faster-rcnn</a></p></blockquote><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120141803069.png" alt="image-20211120141803069"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@article&#123;ren2015faster,</span><br><span class="line">  title=&#123;Faster r-cnn: Towards real-time object detection with region proposal networks&#125;,</span><br><span class="line">  author=&#123;Ren, Shaoqing and He, Kaiming and Girshick, Ross and Sun, Jian&#125;,</span><br><span class="line">  journal=&#123;Advances in neural information processing systems&#125;,</span><br><span class="line">  volume=&#123;28&#125;,</span><br><span class="line">  pages=&#123;91--99&#125;,</span><br><span class="line">  year=&#123;2015&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归纳总结"><a href="#归纳总结" class="headerlink" title="归纳总结"></a>归纳总结</h2><table><thead><tr><th>标签</th><th>目的</th><th>方法</th><th>总结</th></tr></thead><tbody><tr><td>#Anchor #两阶段</td><td>-</td><td>RPN</td><td>首次提出RPN和Anchor</td></tr></tbody></table><h2 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h2><p>Faster R-CNN是在R-CNN和Fast R-CNN的基础上提出的一种两阶段目标检测算法，其主要包括：</p><ul><li>特征提取网络（Backbone）</li><li>RPN（Region Proposal Networks）</li><li>RoI Pooling（Region of Interesting Pooling）</li><li>分类回归（Classification and Regression）</li></ul><p>论文中的结构图如下：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120142753845.png" alt="image-20211120142753845"></p><p>自己画的训练流程图如下：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120143345989.png" alt="image-20211120143345989"></p><p>网上找的训练流程图如下：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/fasterRCNN.png" alt="fasterRCNN"></p><blockquote><p>图片来自<a href="https://github.com/WZMIAOMIAO/deep-learning-for-image-processing/tree/master/pytorch_object_detection/faster_rcnn">WZMIAOMIAO/deep-learning-for-image-processing (github.com)</a></p></blockquote><p>对于Backbone生成的特征图，首先输入到RPN结构中，用于生成Proposal。RPN，即区域推荐网络，对于目标检测任务而言，不仅需要对目标分类还需要对目标定位，因此Faster RCNN模型提出了Anchor机制，其中的做法是，在特征图的每个像素位置预设一组多尺度的先验框，即Anchor（作者使用了3种尺寸（128，256，512），3种比例（1:1，1:2，2:1）的Anchor，共9种）：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120143554871.png" alt="image-20211120143554871"></p><p>如果输入一张800×600的图片，经过Backbone后被下采样16倍，那么这个特征图的尺寸为$\frac{800}{16}×\frac{600}{16}=1900$个像素，那么这个特征图上需要设置1900×9=17100个Anchor。但这一步得到的Anchor肯定不可能全部当作候选区域，因此在预设了Anchor之后，为了筛选有意义的proposal，还设置了一个3×3的卷积层后接两个1×1的卷积层来预测该区域是否包含目标(cls)以及偏移量预测(reg)，如果包含目标则需要根据预测的偏移量对该Anchor进行微调。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120143818038.png" alt="image-20211120143818038"></p><p>这两个1×1的卷积层的输出维度分别为2k和4k，其中k为每个位置的Anchor数量，2代表包含目标和不包含目标的概率，4代表对目标框坐标值（x,y,w,h）的偏移量预测：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120144113585.png" alt="image-20211120144113585"></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120144227681.png" alt="image-20211120144227681"></p><p>可以根据上述公式，计算出候选区域的坐标。并且当我们得到了该区域包含目标的概率之后，我们就可以进行一个简单的筛选，按照包含目标可能性排序，只保留前2000个作为候选区域，并且对于超出图片边界的边框还需要进行一个裁剪处理。</p><p>尽管我们筛选出了2000个候选区域，但我们在计算Loss的时候并不是拿这2000个候选区域来计算，这里Faster RCNN定义了正负样本的概念，首先我们需要将特征图上的Anchor映射回原始图像，因为我们的Ground-Truth是在原始图像上标注的，RPN需要根据这个来进行学习，其次还需要了解IoU这个概念，IoU可以用来计算两个框之间的重合度，其值为两个框的交集与并集的比值。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120151522563.png" alt="image-20211120151522563"></p><p>那么我们就可以定义候选区域和ground-truth的IoU值大于0.7的为正样本，小于0.3的为负样本，其他的都不用于计算损失，然后从中分别随机抽取128个正负样本。RPN的损失函数如下：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120144312326.png" alt="image-20211120144312326"></p><p>RoI Pooling的作用是将 RPN 输出的大小不等的候选框缩放到统一的尺寸。具体做法是，假设需要固定候选区域为7×7大小，那么就可以将其划分为7×7个块，然后对每个块进行最大值池化，最后输出的大小就是所需要的。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120144459517.png" alt="image-20211120144459517"></p><p>这样，将所有的候选区域统一大小后，将其展平为49×1大小，通道数为256的向量，输入到两个全连接层隐藏层，最后再分别接两个输出大小为类别数以及类别数×4的全连接层。来实现对候选区域包含目标所属类别概率以及对该目标框的偏移量的预测。分类回归的损失函数和之前RPN的损失函数类似，只是分类损失不再是二分类交叉熵而是多分类交叉熵。预测框的坐标计算也和之前RPN部分的一样。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120151313142.png" alt="image-20211120151313142"></p><p>而在得到了预测目标框和类别概率之后，还需要进一步筛选，因为之前保留了2000个候选区域，而实际场景中目标数量根本达不到那么多，因此我们使用了NMS算法对重叠目标框进行去重。NMS算法的流程如下图所示：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120151353580.png" alt="image-20211120151353580"></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120151446230.png" alt="image-20211120151446230"></p><p>首先对同一个类别所有的目标框进行排序，（这里默认之前预测的分类概率最大的类别为目标所属类别），然后从大到小依次选择一个目标框和其他剩余目标框计算IoU值，如果IoU值大于设定的阈值如0.5，就代表重叠，此时舍去得分小的目标框，否则就保留，然后依次比较之后，就能实现对重叠目标的去重处理。</p><p>论文里的实验结果：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120151656814.png" alt="image-20211120151656814"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://zhuanlan.zhihu.com/p/31426458">一文读懂Faster RCNN - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <summary type="html">Faster R-CNN是He Kaiming等人在R-CNN和Fast R-CNN的基础上提出的一种两阶段目标检测算法，其主要包括：特征提取网络（Backbone），RPN（Region Proposal Networks），RoI Pooling（Region of Interesting Pooling）以及分类回归（Classification and Regression）。</summary>
    
    
    
    <category term="人工智能" scheme="https://blog.justlovesmile.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="深度学习" scheme="https://blog.justlovesmile.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="论文笔记" scheme="https://blog.justlovesmile.top/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="目标检测" scheme="https://blog.justlovesmile.top/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 | 小样本学习基础概念</title>
    <link href="https://blog.justlovesmile.top/posts/d150f284.html"/>
    <id>https://blog.justlovesmile.top/posts/d150f284.html</id>
    <published>2022-01-27T02:24:38.000Z</published>
    <updated>2022-01-27T02:24:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小样本学习"><a href="#小样本学习" class="headerlink" title="小样本学习"></a>小样本学习</h1><p>人类非常擅长通过极少量的样本识别一个新物体，比如小孩子只需要书中的一些图片就可以认识什么是“斑马”，什么是“犀牛”。在人类的快速学习能力的启发下，研究人员希望机器学习模型在学习了一定类别的大量数据后，对于新的类别，只需要少量的样本就能快速学习，这就是 Few-shot Learning 要解决的问题。Few-shot learning (FSL) 在机器学习领域具有重大意义和挑战性，是否拥有从少量样本中学习和概括的能力，是将人工智能和人类智能进行区分的明显分界点，因为人类可以仅通过一个或几个示例就可以轻松地建立对新事物的认知，而机器学习算法通常需要成千上万个有监督样本来保证其泛化能力。</p><h2 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1.基础概念"></a>1.基础概念</h2><p>机器学习定义：A computer program is said to learn from experience <code>E</code> with respect to some classes of task <code>T</code> and performance measure <code>P</code> if its performance can improve with <code>E</code> on <code>T</code> measured by <code>P</code>.</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/202109201329876.png" alt="image-20210920132843364"></p><p>小样本学习定义：Few-Shot Learning (FSL) is a type of machine learning problems (specified by <code>E</code>, <code>T</code> and <code>P</code>), where <code>E</code> contains only a limited number of examples with supervised information for the target <code>T</code>.</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/202109201329400.png" alt="image-20210920132907931"></p><p>小样本学习（Few-shot learning），或者称为少样本学习（Low-shot learning），包含了n-shot learning，其中<code>n</code>代表样本数量，<code>n=1</code>的情况下，也被称One-shot learning，而<code>n=0</code>的情况下，被称为Zero-shot learning。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/202109201348334.png" alt="image-20210920134843156"></p><p>小样本学习的主要思想是利用先验知识使其快速适用于只包含少量带有监督信息的样本的任务中。</p><h2 id="2-方法分类"><a href="#2-方法分类" class="headerlink" title="2. 方法分类"></a>2. 方法分类</h2><p><img src="https://npm.elemecdn.com/justlovesmile-img/202109201336741.png" alt="image-20210920133613257"></p><p>小样本学习问题的解决方法可以根据先验知识的利用方式分为三类：</p><ul><li>数据：此类方法利用先验知识来增强训练数据集或者增加样本数量（从样本量的角度）<ul><li><img src="https://npm.elemecdn.com/justlovesmile-img/202110051544192.png" alt="image-20211005154338367"></li><li>1.使用旋转，翻转，裁剪等方法对训练集图像增强</li><li>2.从其他数据集获取图像用于扩充训练集</li><li>3.使用GAN来生成具有相似分布的数据用于扩充训练集</li></ul></li><li>模型：此类方法利用先验知识来限制假设空间的复杂性（从模型训练的角度）<ul><li><img src="https://npm.elemecdn.com/justlovesmile-img/202110051544913.png" alt="image-20211005154419771"></li><li>1.多任务学习（同时进行多个相关任务训练，共享表示，以获得更好的泛化能力）与迁移学习不同（将源任务中学到的知识运用到目标任务中）<ul><li>parameter sharing：多任务间共享参数（例如最开始几层网络结构共享，最后输出层单独训练）</li><li>parameter typing：对不同任务的参数正则化处理，使其参数相似（encourages parameters of different tasks to be similar using regularization）</li></ul></li><li>2.嵌入学习（将样本映射（嵌入）到低纬度空间后，相似样本距离更近，不相似样本距离远）<ul><li><img src="https://npm.elemecdn.com/justlovesmile-img/202110052028366.png" alt="image-20211005202850882"></li><li>Task-Specific Embedding Model:只使用来自任务的信息学习一个定制的嵌入函数</li><li>Task-Invariant Embedding Model：将从其他充足样本中学到的信息直接利用到小样本学习任务中<ul><li><img src="https://npm.elemecdn.com/justlovesmile-img/202110062246351.png" alt="image-20211006224637164"></li><li>Matching Nets</li><li>Prototypical Networks(ProtoNet)</li></ul></li><li>Hybrid Embedding Model: 前两种方法的结合，使用小样本任务中的task specific信息运用到从先验知识学到的task invariant嵌入模型<ul><li><img src="https://npm.elemecdn.com/justlovesmile-img/202110062249691.png" alt="image-20211006224925493"></li></ul></li></ul></li><li>3.带有存储的模型，构建键值存储，并优化内存，每个新样本都可以由内存中提取出的内容的加权平均值表示（通过查询相似性），进一步限制假设空间。<ul><li><img src="https://npm.elemecdn.com/justlovesmile-img/202110052104077.png" alt="image-20211005202918521"></li><li><img src="https://npm.elemecdn.com/justlovesmile-img/202110052033347.png" alt="image-20211005203314132"></li><li>优化表征（representation）</li><li>优化参数（parameter）</li></ul></li><li>4.生成模型，对于样本x在先验知识的帮助下可以估计其分布p(x)：假设x的分布可以表示为受$\theta$约束的$p(x;\theta)$，并且通常还存在潜在变量$z \sim p(z;y)$，因此$x \sim \int p(x|z;\theta)p(z;y)dz$，即在先验分布$p(z;y)$的帮助下，可以进一步缩小假设空间的大小.<ul><li><img src="https://npm.elemecdn.com/justlovesmile-img/202110052048660.png" alt="image-20211005204829440"></li><li>Decomposable Components：训练可分解组件模型，在不同任务间共享分解组件的信息，最后再找到分解组件的组合方式（模型层面？）</li><li>Groupwise Shared Prior：使用无监督学习将数据集分组，对于新类别，首先查询其所属组，再根据其所属组的先验概率建模（相似的任务拥有相似的先验概率）</li><li>Parameters of Inference Networks：找到最佳的$\theta$，使得最大化$p(z|x;\theta,\gamma)=\frac{p(x,z;\theta,\gamma)}{p(x;\gamma)}=\frac{p(x|z;\theta)p(z;\gamma)}{\int p(x|z;\theta)p(z;\gamma)dz}$，通常使用从数据中学到的变分分布$q(z;\delta)$来估计$p(z|x;\theta,\gamma)$。（？）</li></ul></li></ul></li><li>算法：此类方法利用先验知识在假设空间中搜索最优的假设<ul><li><img src="https://npm.elemecdn.com/justlovesmile-img/202110052106876.png" alt="image-20211005210608746"></li><li>1.精炼现存参数<ul><li>使用预训练模型，通过正则化进行微调<ul><li><img src="https://npm.elemecdn.com/justlovesmile-img/202110052115770.png" alt="image-20211005211532604"></li><li>Early-stopping</li><li>Selectively updating parameters</li><li>Updating related parts of parameters together</li><li>Using a model regression network</li></ul></li><li>聚集子任务的参数（参数层面？）<ul><li><img src="https://npm.elemecdn.com/justlovesmile-img/202110052109091.png" alt="image-20211005210954883"></li></ul></li><li>使用新参数微调现有参数：给模型参数扩充一个$\delta$，使其参数为$\theta={\theta_0,\delta}$，然后通过学习$\delta$来微调初始参数$\theta_0$。</li></ul></li><li>2.精炼Meta-Learned参数<ul><li><img src="https://npm.elemecdn.com/justlovesmile-img/202110071533336.png" alt="image-20211007153301984"></li></ul></li><li>3.学习优化器：不使用梯度下降来更新参数，而是通过学习一个优化器来输出参数的更新，即$\Delta{\theta^{i-1}}$<ul><li><img src="https://npm.elemecdn.com/justlovesmile-img/202110071540903.png" alt="image-20211007154007652"></li></ul></li></ul></li></ul><h2 id="3-小样本学习常用数据集"><a href="#3-小样本学习常用数据集" class="headerlink" title="3. 小样本学习常用数据集"></a>3. 小样本学习常用数据集</h2><p>小样本常用Benchmark图像数据集：</p><ul><li>Omniglot</li><li>Mini-Imagenet</li><li>CU-Birds</li></ul>]]></content>
    
    
    <summary type="html">在很多场景下，收集大量的有标签的数据是非常昂贵、困难、甚至不可能的，比如医疗数据、手机上用户手动标注的数据等。是否能仅利用少量带标签的数据来训练就得到一个好的模型？这已经成为机器学习的发展中一个十分重要的课题，不论是学术界还是工业界都高度关注。</summary>
    
    
    
    <category term="人工智能" scheme="https://blog.justlovesmile.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="深度学习" scheme="https://blog.justlovesmile.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="小样本学习" scheme="https://blog.justlovesmile.top/tags/%E5%B0%8F%E6%A0%B7%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Lab | 安装、配置、插件推荐、多用户使用教程</title>
    <link href="https://blog.justlovesmile.top/posts/e05a9ab6.html"/>
    <id>https://blog.justlovesmile.top/posts/e05a9ab6.html</id>
    <published>2021-11-25T09:38:43.000Z</published>
    <updated>2021-11-25T09:38:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先相信很多使用过python的人都或多或少地了解过<code>Jupyter Notebook</code>这个应用。<code>Jupyter Notebook</code>是一个开源Web应用程序，可让用户创建和共享包含实时代码、公式、可视化和叙述文本的文档。 用途包括：数据清理和转换、数值模拟、统计建模、数据可视化、机器学习等等。</p><p>而<code>Jupyter Lab</code>则是Jupyter的下一代笔记本界面。<code>Jupyter Lab</code> 是一个基于Web的交互式开发环境，用于Jupyter notebook、代码和数据。 <code>Jupyter Lab</code> 非常灵活，可支持数据科学、科学计算和机器学习领域的广泛工作。 <code>Jupyter Lab</code> 是可扩展和模块化的,其可编写插件来添加新组件并与现有组件相集成。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211125180351537.png" alt="image-20211125180351537"></p><h1 id="Jupyter-Lab安装和配置"><a href="#Jupyter-Lab安装和配置" class="headerlink" title="Jupyter Lab安装和配置"></a>Jupyter Lab安装和配置</h1><h2 id="1-Jupyter-Lab安装"><a href="#1-Jupyter-Lab安装" class="headerlink" title="1.Jupyter Lab安装"></a>1.Jupyter Lab安装</h2><p>首先进入自己的<code>Python</code>环境或者其他<code>Conda</code>虚拟环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate XXXXXXX</span><br></pre></td></tr></table></figure><p>然后在<code>terminal</code>或者<code>cmd</code>输入安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyterlab</span><br><span class="line">//或者</span><br><span class="line">conda install -c conda-forge jupyterlab</span><br></pre></td></tr></table></figure><p>等待安装完成！</p><h2 id="2-Jupyter-Lab配置"><a href="#2-Jupyter-Lab配置" class="headerlink" title="2.Jupyter Lab配置"></a>2.Jupyter Lab配置</h2><p>使用命令创建配置文件，其会生成<code>C:\Users\用户名\.jupyter\jupyter_notebook_config.py</code>或者<code>/home/用户名/.jupyter/jupyter_notebook_config.py</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter lab --generate-config</span><br></pre></td></tr></table></figure><p>使用编辑器打开配置文件，在文件上方添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c.ServerApp.ip = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">c.ServerApp.port = <span class="number">8000</span></span><br><span class="line">c.ServerApp.open_browser = <span class="literal">False</span></span><br><span class="line">c.ServerApp.root_dir = <span class="string">&#x27;/xxxx/xxxx/xxx&#x27;</span> </span><br><span class="line">c.ServerApp.password_required = <span class="literal">True</span></span><br><span class="line">c.ServerApp.password = <span class="string">&#x27;xxxxxxx&#x27;</span></span><br></pre></td></tr></table></figure><p>其中<code>ip</code>代表允许访问的ip，<code>*</code>代表全部，<code>port</code>用于设置端口，<code>open_browser</code>用于设置启动lab时是否打开浏览器，<code>root_dir</code>用于设置lab启动文件夹根路径，<code>password_required</code>用于设置是否需要密码，<code>password</code>用于设置（加密）密码，这个加密密码的获取方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开python或者ipython环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> notebook.auth <span class="keyword">import</span> passwd</span><br><span class="line">passwd()</span><br><span class="line"><span class="comment">#Enter password: </span></span><br><span class="line"><span class="comment">#Verify password: </span></span><br><span class="line"><span class="comment">#Out[2]: &#x27;argon2:f704bjkasjdfkjasdjfkasjdkjfklmasjdfkalflakdkf&#x27;</span></span><br></pre></td></tr></table></figure><p>复制上方输出的加密密码即可。</p><p>当然也可以在<code>Terminal</code>强制设置/修改密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter lab password</span><br></pre></td></tr></table></figure><p>更多配置可以查看默认配置文件下方的注释！</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120214858878.png" alt="image-20211120214858878"></p><h2 id="3-Jupyter-Lab启动"><a href="#3-Jupyter-Lab启动" class="headerlink" title="3. Jupyter Lab启动"></a>3. Jupyter Lab启动</h2><p>在<code>Terminal</code>输入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter lab -p 9090 --no-browser</span><br></pre></td></tr></table></figure><p>更多启动命名可通过<code>jupyter lab --help</code>查看，启动之后即可在浏览器输入：ip+端口 ，进行访问，如：<code>127.0.0.0:9090</code>。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120215159090.png" alt="image-20211120215159090"></p><h2 id="4-Jupyter-Lab插件推荐"><a href="#4-Jupyter-Lab插件推荐" class="headerlink" title="4. Jupyter Lab插件推荐"></a>4. Jupyter Lab插件推荐</h2><p>首先启动Jupyter Lab，在Lab中打开菜单栏的<code>Setting</code>里的<code>Advanced Setting Editor</code>，接着找到<code>Extension Manager</code>，并在右边填入<code>&#123;&#39;enabled&#39;:true&#125;</code></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120215625334.png" alt="image-20211120215625334"></p><p>然后即可在左边菜单栏找到插件安装符号，在里面就可以搜索插件，推荐如下：</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/image-20211120215754890.png" alt="image-20211120215754890"></p><ul><li>theme-darcula：一个好看的主题配色</li><li>jupyterlab_go_to_definition：跳转到定义</li><li>jupyterlab_lsp：代码跳转+代码补全</li><li>还有很多如：latex，git，html，plotly，bokeh，matplotlib，drawio等等</li></ul><h2 id="5-Jupyter-Lab多用户使用"><a href="#5-Jupyter-Lab多用户使用" class="headerlink" title="5. Jupyter Lab多用户使用"></a>5. Jupyter Lab多用户使用</h2><p>复制配置文件到指定位置，例如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /home/admin555/.jupyter/jupyter_notebook_config.py /指定位置/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><p>之后启动时，使用命令：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter lab --config /指定位置/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><p> 我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=1izx0kxkb2lzz">https://cloud.tencent.com/developer/support-plan?invite_code=1izx0kxkb2lzz</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先相信很多使用过python的人都或多或少地了解过&lt;code&gt;Jupyter Notebook&lt;/code&gt;这个应用。&lt;code&gt;Jupyter Notebook&lt;/code&gt;是一个开源Web应用程序，可让用户创建和共享包含实时代码、公式、可视化和叙述文本的文档。 用途包</summary>
      
    
    
    
    <category term="折腾记录" scheme="https://blog.justlovesmile.top/categories/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Jupyter" scheme="https://blog.justlovesmile.top/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>目标检测 | 常用数据集标注格式及生成脚本</title>
    <link href="https://blog.justlovesmile.top/posts/865c56ba.html"/>
    <id>https://blog.justlovesmile.top/posts/865c56ba.html</id>
    <published>2021-09-11T07:11:26.000Z</published>
    <updated>2021-09-11T07:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>目标检测是计算机视觉任务中的一个重要研究方向，其用于解决对数码图像中特定种类的可视目标实例的检测问题。目标检测作为计算机视觉的根本性问题之一，是其他诸多计算机视觉任务，例如图像描述生成，实例分割和目标跟踪的基础以及前提。而在解决此类问题时，我们常常需要使用自己的脚本或者利用标注工具生成数据集，数据集格式往往会多种多样，因此对于目标检测任务而言，为了更好地兼容训练，大多数目标检测模型框架会默认支持几种常用的数据集标注格式，常见的分别是COCO，Pascal VOC，YOLO等等。本文主要介绍上述几种数据集格式以及我写的Python脚本（一般需要根据实际情况再改改）。</p><h1 id="1-COCO"><a href="#1-COCO" class="headerlink" title="1. COCO"></a>1. COCO</h1><h2 id="1-1-COCO数据集格式"><a href="#1-1-COCO数据集格式" class="headerlink" title="1.1 COCO数据集格式"></a>1.1 COCO数据集格式</h2><p>COCO（Common Objects in COtext）数据集，是一个大规模的，适用于目标检测，图像分割，Image Captioning任务的数据集，其标注格式是最常用的几种格式之一。目前使用较多的是COCO2017数据集。其官网为<a href="https://cocodataset.org/">COCO - Common Objects in Context (cocodataset.org)</a>。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/202109111535004.png" alt="image-20210911153516753"></p><p>COCO数据集主要包含图像（jpg或者png等等）和标注文件（json），其数据集格式如下(<code>/</code>代表文件夹)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-coco/</span><br><span class="line">    |-train2017/</span><br><span class="line">    |-1.jpg</span><br><span class="line">    |-2.jpg</span><br><span class="line">    |-val2017/</span><br><span class="line">    |-3.jpg</span><br><span class="line">    |-4.jpg</span><br><span class="line">    |-test2017/</span><br><span class="line">    |-5.jpg</span><br><span class="line">    |-6.jpg</span><br><span class="line">    |-annotations/</span><br><span class="line">    |-instances_train2017.json</span><br><span class="line">    |-instances_val2017.json</span><br><span class="line">    |-*.json</span><br></pre></td></tr></table></figure><p><code>train2017</code>以及<code>val2017</code>这两个文件夹中存储的是训练集和验证集的图像，而<code>test2017</code>文件夹中存储的是测试集的信息，可以只是图像，也可以包含标注，一般是单独使用的。</p><p><code>annotations</code>文件夹中的文件就是标注文件，如果你有<code>xml</code>文件，通常需要转换成<code>json</code>格式，其格式如下（更详细的可以参考<a href="https://cocodataset.org/#format-data">官网</a>）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;info&quot;</span>: info, </span><br><span class="line"><span class="attr">&quot;images&quot;</span>: [image], <span class="comment">//列表</span></span><br><span class="line"><span class="attr">&quot;annotations&quot;</span>: [annotation], <span class="comment">//列表</span></span><br><span class="line"><span class="attr">&quot;categories&quot;</span>: [category], <span class="comment">//列表</span></span><br><span class="line"><span class="attr">&quot;licenses&quot;</span>: [license], <span class="comment">//列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>info</code>为整个数据集的信息，包括年份，版本，描述等等信息，如果只是完成训练任务，其实不太重要，如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于训练，不是那么的重要</span></span><br><span class="line">info&#123;</span><br><span class="line"><span class="attr">&quot;year&quot;</span>: int, </span><br><span class="line"><span class="attr">&quot;version&quot;</span>: str, </span><br><span class="line"><span class="attr">&quot;description&quot;</span>: str, </span><br><span class="line"><span class="attr">&quot;contributor&quot;</span>: str, </span><br><span class="line"><span class="attr">&quot;url&quot;</span>: str, </span><br><span class="line"><span class="attr">&quot;date_created&quot;</span>: datetime,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>image</code>为图像的基本信息，包括序号，宽高，文件名等等信息，其中的序号（<code>id</code>）需要和后面的<code>annotations</code>中的标注所属图片序号对应如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">image&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: int, <span class="comment">//必要</span></span><br><span class="line"><span class="attr">&quot;width&quot;</span>: int, <span class="comment">//必要</span></span><br><span class="line"><span class="attr">&quot;height&quot;</span>: int, <span class="comment">//必要</span></span><br><span class="line"><span class="attr">&quot;file_name&quot;</span>: str, <span class="comment">//必要</span></span><br><span class="line"><span class="attr">&quot;license&quot;</span>: int,</span><br><span class="line"><span class="attr">&quot;flickr_url&quot;</span>: str,</span><br><span class="line"><span class="attr">&quot;coco_url&quot;</span>: str,</span><br><span class="line"><span class="attr">&quot;date_captured&quot;</span>: datetime, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>annotation</code>是最重要的标注信息，包括序号，所属图像序号，类别序号等等信息，如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">annotation&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: int, <span class="comment">//标注id</span></span><br><span class="line"><span class="attr">&quot;image_id&quot;</span>: int, <span class="comment">//所属图像id</span></span><br><span class="line"><span class="attr">&quot;category_id&quot;</span>: int, <span class="comment">//类别id</span></span><br><span class="line"><span class="attr">&quot;segmentation&quot;</span>: RLE or [polygon], <span class="comment">//图像分割标注</span></span><br><span class="line"><span class="attr">&quot;area&quot;</span>: float, <span class="comment">//区域面积</span></span><br><span class="line"><span class="attr">&quot;bbox&quot;</span>: [x,y,width,height], <span class="comment">//目标框左上角坐标以及宽高</span></span><br><span class="line"><span class="attr">&quot;iscrowd&quot;</span>: <span class="number">0</span> or <span class="number">1</span>, <span class="comment">//是否密集</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>category</code>代表类别信息，包括父类别，类别序号以及类别名称，如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">category&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: int, <span class="comment">//类别序号</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span>: str, <span class="comment">//类别名称</span></span><br><span class="line"><span class="attr">&quot;supercategory&quot;</span>: str, <span class="comment">//父类别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>license</code>代表数据集的协议许可信息，包括序号，协议名称以及链接信息，如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于训练，不重要</span></span><br><span class="line">license&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: int, </span><br><span class="line"><span class="attr">&quot;name&quot;</span>: str, </span><br><span class="line"><span class="attr">&quot;url&quot;</span>: str,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们来看一个简单的示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;info&quot;</span>: &#123;略&#125;, <span class="attr">&quot;images&quot;</span>: [&#123;<span class="attr">&quot;id&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;file_name&quot;</span>: <span class="string">&quot;1.jpg&quot;</span>, <span class="attr">&quot;height&quot;</span>: <span class="number">334</span>, <span class="attr">&quot;width&quot;</span>: <span class="number">500</span>&#125;, &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;file_name&quot;</span>: <span class="string">&quot;2.jpg&quot;</span>, <span class="attr">&quot;height&quot;</span>: <span class="number">445</span>, <span class="attr">&quot;width&quot;</span>: <span class="number">556</span>&#125;], <span class="attr">&quot;annotations&quot;</span>: [&#123;<span class="attr">&quot;id&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;area&quot;</span>: <span class="number">40448</span>, <span class="attr">&quot;iscrowd&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;image_id&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;bbox&quot;</span>: [<span class="number">246</span>, <span class="number">61</span>, <span class="number">128</span>, <span class="number">316</span>], <span class="attr">&quot;category_id&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;segmentation&quot;</span>: []&#125;, &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;area&quot;</span>: <span class="number">40448</span>, <span class="attr">&quot;iscrowd&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;image_id&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;bbox&quot;</span>: [<span class="number">246</span>, <span class="number">61</span>, <span class="number">128</span>, <span class="number">316</span>], <span class="attr">&quot;category_id&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;segmentation&quot;</span>: []&#125;, &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;area&quot;</span>: <span class="number">40448</span>, <span class="attr">&quot;iscrowd&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;image_id&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;bbox&quot;</span>: [<span class="number">246</span>, <span class="number">61</span>, <span class="number">128</span>, <span class="number">316</span>], <span class="attr">&quot;category_id&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;segmentation&quot;</span>: []&#125;], <span class="attr">&quot;categories&quot;</span>: [&#123;<span class="attr">&quot;supercategory&quot;</span>: <span class="string">&quot;none&quot;</span>, <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;liner&quot;</span>&#125;,&#123;<span class="attr">&quot;supercategory&quot;</span>: <span class="string">&quot;none&quot;</span>, <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;containership&quot;</span>&#125;,&#123;<span class="attr">&quot;supercategory&quot;</span>: <span class="string">&quot;none&quot;</span>, <span class="attr">&quot;id&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bulkcarrier&quot;</span>&#125;], <span class="attr">&quot;licenses&quot;</span>: [&#123;略&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-COCO转换脚本"><a href="#1-2-COCO转换脚本" class="headerlink" title="1.2 COCO转换脚本"></a>1.2 COCO转换脚本</h2><p><code>Python转换脚本</code>如下所示，需要准备<code>图像</code>和<code>xml</code>标注文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    : justlovesmile</span></span><br><span class="line"><span class="comment"># @Date      : 2021/9/8 15:36</span></span><br><span class="line"><span class="keyword">import</span> os, random, json</span><br><span class="line"><span class="keyword">import</span> shutil <span class="keyword">as</span> sh</span><br><span class="line"><span class="keyword">from</span> tqdm.auto <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> xmlET</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;The path (<span class="subst">&#123;path&#125;</span>) already exists.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readxml</span>(<span class="params">file</span>):</span></span><br><span class="line">    tree = xmlET.parse(file)</span><br><span class="line">    <span class="comment">#图片尺寸字段</span></span><br><span class="line">    size = tree.find(<span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">    width = <span class="built_in">int</span>(size.find(<span class="string">&#x27;width&#x27;</span>).text)</span><br><span class="line">    height = <span class="built_in">int</span>(size.find(<span class="string">&#x27;height&#x27;</span>).text)</span><br><span class="line">    <span class="comment">#目标字段</span></span><br><span class="line">    objs = tree.findall(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    bndbox = []</span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> objs:</span><br><span class="line">        label = obj.find(<span class="string">&quot;name&quot;</span>).text</span><br><span class="line">        bnd = obj.find(<span class="string">&quot;bndbox&quot;</span>)</span><br><span class="line">        xmin = <span class="built_in">int</span>(bnd.find(<span class="string">&quot;xmin&quot;</span>).text)</span><br><span class="line">        ymin = <span class="built_in">int</span>(bnd.find(<span class="string">&quot;ymin&quot;</span>).text)</span><br><span class="line">        xmax = <span class="built_in">int</span>(bnd.find(<span class="string">&quot;xmax&quot;</span>).text)</span><br><span class="line">        ymax = <span class="built_in">int</span>(bnd.find(<span class="string">&quot;ymax&quot;</span>).text)</span><br><span class="line">        bbox = [xmin, ymin, xmax, ymax, label]</span><br><span class="line">        bndbox.append(bbox)</span><br><span class="line">    <span class="keyword">return</span> [[width, height], bndbox]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tococo</span>(<span class="params">xml_root, image_root, output_root,classes=&#123;&#125;,errorId=[],train_percent=<span class="number">0.9</span></span>):</span></span><br><span class="line">    <span class="comment"># assert</span></span><br><span class="line">    <span class="keyword">assert</span> train_percent&lt;=<span class="number">1</span> <span class="keyword">and</span> <span class="built_in">len</span>(classes)&gt;<span class="number">0</span></span><br><span class="line">    <span class="comment"># define the root path</span></span><br><span class="line">    train_root = os.path.join(output_root, <span class="string">&quot;train2017&quot;</span>)</span><br><span class="line">    val_root = os.path.join(output_root, <span class="string">&quot;val2017&quot;</span>)</span><br><span class="line">    ann_root = os.path.join(output_root, <span class="string">&quot;annotations&quot;</span>)</span><br><span class="line">    <span class="comment"># initialize train and val dict</span></span><br><span class="line">    train_content = &#123;</span><br><span class="line">        <span class="string">&quot;images&quot;</span>: [],  <span class="comment"># &#123;&quot;file_name&quot;: &quot;09780.jpg&quot;, &quot;height&quot;: 334, &quot;width&quot;: 500, &quot;id&quot;: 9780&#125;</span></span><br><span class="line">        <span class="string">&quot;annotations&quot;</span>: [],<span class="comment"># &#123;&quot;area&quot;: 40448, &quot;iscrowd&quot;: 0, &quot;image_id&quot;: 1, &quot;bbox&quot;: [246, 61, 128, 316], &quot;category_id&quot;: 5, &quot;id&quot;: 1, &quot;segmentation&quot;: []&#125;</span></span><br><span class="line">        <span class="string">&quot;categories&quot;</span>: []  <span class="comment"># &#123;&quot;supercategory&quot;: &quot;none&quot;, &quot;id&quot;: 1, &quot;name&quot;: &quot;liner&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    val_content = &#123;</span><br><span class="line">        <span class="string">&quot;images&quot;</span>: [],  <span class="comment"># &#123;&quot;file_name&quot;: &quot;09780.jpg&quot;, &quot;height&quot;: 334, &quot;width&quot;: 500, &quot;id&quot;: 9780&#125;</span></span><br><span class="line">        <span class="string">&quot;annotations&quot;</span>: [],<span class="comment"># &#123;&quot;area&quot;: 40448, &quot;iscrowd&quot;: 0, &quot;image_id&quot;: 1, &quot;bbox&quot;: [246, 61, 128, 316], &quot;category_id&quot;: 5, &quot;id&quot;: 1, &quot;segmentation&quot;: []&#125;</span></span><br><span class="line">        <span class="string">&quot;categories&quot;</span>: []  <span class="comment"># &#123;&quot;supercategory&quot;: &quot;none&quot;, &quot;id&quot;: 1, &quot;name&quot;: &quot;liner&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    train_json = <span class="string">&#x27;instances_train2017.json&#x27;</span></span><br><span class="line">    val_json = <span class="string">&#x27;instances_val2017.json&#x27;</span></span><br><span class="line">    <span class="comment"># divide the trainset and valset</span></span><br><span class="line">    images = os.listdir(image_root)</span><br><span class="line">    total_num = <span class="built_in">len</span>(images)</span><br><span class="line">    train_percent = train_percent</span><br><span class="line">    train_num = <span class="built_in">int</span>(total_num * train_percent)</span><br><span class="line">    train_file = <span class="built_in">sorted</span>(random.sample(images, train_num))</span><br><span class="line">    <span class="keyword">if</span> mkdir(output_root):</span><br><span class="line">        <span class="keyword">if</span> mkdir(train_root) <span class="keyword">and</span> mkdir(val_root) <span class="keyword">and</span> mkdir(ann_root):</span><br><span class="line">            idx1, idx2, dx1, dx2 = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> tqdm(images):</span><br><span class="line">                name=os.path.splitext(os.path.basename(file))[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> errorId:</span><br><span class="line">                    res = readxml(os.path.join(xml_root, name + <span class="string">&#x27;.xml&#x27;</span>))</span><br><span class="line">                    <span class="keyword">if</span> file <span class="keyword">in</span> train_file:</span><br><span class="line">                        idx1 += <span class="number">1</span></span><br><span class="line">                        sh.copy(os.path.join(image_root, file), train_root)</span><br><span class="line">                        train_content[<span class="string">&#x27;images&#x27;</span>].append(</span><br><span class="line">                            &#123;<span class="string">&quot;file_name&quot;</span>: file, <span class="string">&quot;width&quot;</span>: res[<span class="number">0</span>][<span class="number">0</span>], <span class="string">&quot;height&quot;</span>: res[<span class="number">0</span>][<span class="number">1</span>], <span class="string">&quot;id&quot;</span>: idx1&#125;)</span><br><span class="line">                        <span class="keyword">for</span> b <span class="keyword">in</span> res[<span class="number">1</span>]:</span><br><span class="line">                            dx1 += <span class="number">1</span></span><br><span class="line">                            x = b[<span class="number">0</span>]</span><br><span class="line">                            y = b[<span class="number">1</span>]</span><br><span class="line">                            w = b[<span class="number">2</span>] - b[<span class="number">0</span>]</span><br><span class="line">                            h = b[<span class="number">3</span>] - b[<span class="number">1</span>]</span><br><span class="line">                            train_content[<span class="string">&#x27;annotations&#x27;</span>].append(</span><br><span class="line">                                &#123;<span class="string">&quot;area&quot;</span>: w * h, <span class="string">&quot;iscrowd&quot;</span>: <span class="number">0</span>, <span class="string">&quot;image_id&quot;</span>: idx1, <span class="string">&quot;bbox&quot;</span>: [x, y, w, h],</span><br><span class="line">                                 <span class="string">&quot;category_id&quot;</span>: classes[b[<span class="number">4</span>]], <span class="string">&quot;id&quot;</span>: dx1, <span class="string">&quot;segmentation&quot;</span>: []&#125;)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        idx2 += <span class="number">1</span></span><br><span class="line">                        sh.copy(os.path.join(image_root, file), val_root)</span><br><span class="line">                        val_content[<span class="string">&#x27;images&#x27;</span>].append(</span><br><span class="line">                            &#123;<span class="string">&quot;file_name&quot;</span>: file, <span class="string">&quot;width&quot;</span>: res[<span class="number">0</span>][<span class="number">0</span>], <span class="string">&quot;height&quot;</span>: res[<span class="number">0</span>][<span class="number">1</span>], <span class="string">&quot;id&quot;</span>: idx2&#125;)</span><br><span class="line">                        <span class="keyword">for</span> b <span class="keyword">in</span> res[<span class="number">1</span>]:</span><br><span class="line">                            dx2 += <span class="number">1</span></span><br><span class="line">                            x = b[<span class="number">0</span>]</span><br><span class="line">                            y = b[<span class="number">1</span>]</span><br><span class="line">                            w = b[<span class="number">2</span>] - b[<span class="number">0</span>]</span><br><span class="line">                            h = b[<span class="number">3</span>] - b[<span class="number">1</span>]</span><br><span class="line">                            val_content[<span class="string">&#x27;annotations&#x27;</span>].append(</span><br><span class="line">                                &#123;<span class="string">&quot;area&quot;</span>: w * h, <span class="string">&quot;iscrowd&quot;</span>: <span class="number">0</span>, <span class="string">&quot;image_id&quot;</span>: idx2, <span class="string">&quot;bbox&quot;</span>: [x, y, w, h],</span><br><span class="line">                                 <span class="string">&quot;category_id&quot;</span>: classes[b[<span class="number">4</span>]], <span class="string">&quot;id&quot;</span>: dx2, <span class="string">&quot;segmentation&quot;</span>: []&#125;)</span><br><span class="line">            <span class="keyword">for</span> i, j <span class="keyword">in</span> classes.items():</span><br><span class="line">                train_content[<span class="string">&#x27;categories&#x27;</span>].append(&#123;<span class="string">&quot;supercategory&quot;</span>: <span class="string">&quot;none&quot;</span>, <span class="string">&quot;id&quot;</span>: j, <span class="string">&quot;name&quot;</span>: i&#125;)</span><br><span class="line">                val_content[<span class="string">&#x27;categories&#x27;</span>].append(&#123;<span class="string">&quot;supercategory&quot;</span>: <span class="string">&quot;none&quot;</span>, <span class="string">&quot;id&quot;</span>: j, <span class="string">&quot;name&quot;</span>: i&#125;)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(ann_root, train_json), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                json.dump(train_content, f)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(ann_root, val_json), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                json.dump(val_content, f)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Number of Train Images:&quot;</span>, <span class="built_in">len</span>(os.listdir(train_root)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Number of Val Images:&quot;</span>, <span class="built_in">len</span>(os.listdir(val_root)))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    box_root = <span class="string">&quot;E:/MyProject/Dataset/hwtest/annotations&quot;</span> <span class="comment">#xml文件夹</span></span><br><span class="line">    image_root = <span class="string">&quot;E:/MyProject/Dataset/hwtest/images&quot;</span> <span class="comment">#image文件夹</span></span><br><span class="line">    output_root = <span class="string">&quot;E:/MyProject/Dataset/coco&quot;</span> <span class="comment">#输出文件夹</span></span><br><span class="line">    classes = &#123;<span class="string">&quot;liner&quot;</span>: <span class="number">0</span>,<span class="string">&quot;bulk carrier&quot;</span>: <span class="number">1</span>,<span class="string">&quot;warship&quot;</span>: <span class="number">2</span>,<span class="string">&quot;sailboat&quot;</span>: <span class="number">3</span>,<span class="string">&quot;canoe&quot;</span>: <span class="number">4</span>,<span class="string">&quot;container ship&quot;</span>: <span class="number">5</span>,<span class="string">&quot;fishing boat&quot;</span>: <span class="number">6</span>&#125; <span class="comment">#类别字典</span></span><br><span class="line">    errorId = [] <span class="comment">#脏数据id</span></span><br><span class="line">    train_percent = <span class="number">0.9</span> <span class="comment">#训练集和验证集比例</span></span><br><span class="line">    tococo(box_root, image_root, output_root,classes=classes,errorId=errorId,train_percent=train_percent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><h1 id="2-VOC"><a href="#2-VOC" class="headerlink" title="2. VOC"></a>2. VOC</h1><h2 id="2-1-VOC数据集格式"><a href="#2-1-VOC数据集格式" class="headerlink" title="2.1 VOC数据集格式"></a>2.1 VOC数据集格式</h2><p>VOC（Visual Object Classes）数据集来源于PASCAL VOC挑战赛，其主要任务有<code>Object Classification</code> 、<code>Object Detection</code>、<code>Object Segmentation</code>、<code>Human Layout</code>、<code>Action Classification</code>。其官网为<a href="http://host.robots.ox.ac.uk/pascal/VOC/">The PASCAL Visual Object Classes Homepage (ox.ac.uk)</a>。其主要数据集有VOC2007以及VOC2012。</p><p><img src="https://npm.elemecdn.com/justlovesmile-img/202109111939729.png" alt="image-20210911193933398"></p><p>VOC数据集主要包含图像（jpg或者png等等）和标注文件（xml），其数据集格式如下(<code>/</code>代表文件夹)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-VOC/</span><br><span class="line">|-JPEGImages/</span><br><span class="line">|-1.jpg</span><br><span class="line">|-2.jpg</span><br><span class="line">|-Annotations/</span><br><span class="line">|-1.xml</span><br><span class="line">|-2.xml</span><br><span class="line">|-ImageSets/</span><br><span class="line">|-Layout/</span><br><span class="line">|-*.txt</span><br><span class="line">|-Main/</span><br><span class="line">|-train.txt</span><br><span class="line">|-val.txt</span><br><span class="line">|-trainval.txt</span><br><span class="line">|-test.txt</span><br><span class="line">|-Segmentation/</span><br><span class="line">|-*.txt</span><br><span class="line">|-Action/</span><br><span class="line">|-*.txt</span><br><span class="line">|-SegmentationClass/</span><br><span class="line">|-SegmentationObject/</span><br></pre></td></tr></table></figure><p>其中对于目标检测任务而言，最常用的以及必须的文件夹包括：<code>JPEGImages</code>，<code>Annotations</code>，<code>ImageSets/Main</code>。</p><p><code>JPEGImages</code>里存放的是图像，而<code>Annotations</code>里存放的是<code>xml</code>标注文件，文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;annotation&gt;</span><br><span class="line">&lt;folder&gt;VOC&lt;/folder&gt;            # 图像所在文件夹</span><br><span class="line">&lt;filename&gt;000032.jpg&lt;/filename&gt; # 图像文件名</span><br><span class="line">&lt;source&gt;                        # 图像源</span><br><span class="line">&lt;database&gt;The VOC Database&lt;/database&gt;</span><br><span class="line">&lt;annotation&gt;PASCAL VOC&lt;/annotation&gt;</span><br><span class="line">&lt;image&gt;flickr&lt;/image&gt;</span><br><span class="line">&lt;/source&gt;</span><br><span class="line">&lt;size&gt;                          # 图像尺寸信息</span><br><span class="line">&lt;width&gt;500&lt;/width&gt;    # 图像宽度</span><br><span class="line">&lt;height&gt;281&lt;/height&gt;  # 图像高度</span><br><span class="line">&lt;depth&gt;3&lt;/depth&gt;      # 图像通道数</span><br><span class="line">&lt;/size&gt;</span><br><span class="line">&lt;segmented&gt;0&lt;/segmented&gt;  # 图像是否用于分割，0代表不适用，对目标检测而言没关系</span><br><span class="line">&lt;object&gt;                  # 一个目标对象的信息</span><br><span class="line">&lt;name&gt;aeroplane&lt;/name&gt;    # 目标的类别名</span><br><span class="line">&lt;pose&gt;Frontal&lt;/pose&gt;      # 拍摄角度，若无一般为Unspecified</span><br><span class="line">&lt;truncated&gt;0&lt;/truncated&gt;  # 是否被截断，0表示完整未截断</span><br><span class="line">&lt;difficult&gt;0&lt;/difficult&gt;  # 是否难以识别，0表示不难识别</span><br><span class="line">&lt;bndbox&gt;            # 边界框信息</span><br><span class="line">&lt;xmin&gt;104&lt;/xmin&gt;  # 左上角x</span><br><span class="line">&lt;ymin&gt;78&lt;/ymin&gt;   # 左上角y</span><br><span class="line">&lt;xmax&gt;375&lt;/xmax&gt;  # 右下角x</span><br><span class="line">&lt;ymax&gt;183&lt;/ymax&gt;  # 右下角y</span><br><span class="line">&lt;/bndbox&gt;</span><br><span class="line">&lt;/object&gt;</span><br><span class="line">    # 下面是其他目标的信息，这里略掉</span><br><span class="line">&lt;object&gt;</span><br><span class="line">        其他object信息，这里省略</span><br><span class="line">&lt;/object&gt;</span><br><span class="line">&lt;/annotation&gt;</span><br></pre></td></tr></table></figure><h2 id="2-2-VOC转换脚本"><a href="#2-2-VOC转换脚本" class="headerlink" title="2.2 VOC转换脚本"></a>2.2 VOC转换脚本</h2><p>下面这个脚本，只适用于有图像和xml文件的情况下，coco转voc格式以后有需要再写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    : justlovesmile</span></span><br><span class="line"><span class="comment"># @Date      : 2021/9/8 21:01</span></span><br><span class="line"><span class="keyword">import</span> os,random</span><br><span class="line"><span class="keyword">from</span> tqdm.auto <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> shutil <span class="keyword">as</span> sh</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        os.mkdir(path)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;The path (<span class="subst">&#123;path&#125;</span>) already exists.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tovoc</span>(<span class="params">xmlroot,imgroot,saveroot,errorId=[],classes=&#123;&#125;,tvp=<span class="number">1.0</span>,trp=<span class="number">0.9</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">        root：数据集存放根目录</span></span><br><span class="line"><span class="string">    功能：</span></span><br><span class="line"><span class="string">        加载数据，并保存为VOC格式</span></span><br><span class="line"><span class="string">    加载后的格式：</span></span><br><span class="line"><span class="string">    VOC/</span></span><br><span class="line"><span class="string">      Annotations/</span></span><br><span class="line"><span class="string">        - **.xml</span></span><br><span class="line"><span class="string">      JPEGImages/</span></span><br><span class="line"><span class="string">        - **.jpg</span></span><br><span class="line"><span class="string">      ImageSets/</span></span><br><span class="line"><span class="string">        Main/</span></span><br><span class="line"><span class="string">          - train.txt</span></span><br><span class="line"><span class="string">          - test.txt</span></span><br><span class="line"><span class="string">          - val.txt</span></span><br><span class="line"><span class="string">          - trainval.txt</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># assert</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(classes)&gt;<span class="number">0</span></span><br><span class="line">    <span class="comment"># init path</span></span><br><span class="line">    VOC = saveroot</span><br><span class="line">    ann_path = os.path.join(VOC, <span class="string">&#x27;Annotations&#x27;</span>)</span><br><span class="line">    img_path = os.path.join(VOC,<span class="string">&#x27;JPEGImages&#x27;</span>)</span><br><span class="line">    set_path = os.path.join(VOC,<span class="string">&#x27;ImageSets&#x27;</span>)</span><br><span class="line">    txt_path = os.path.join(set_path,<span class="string">&#x27;Main&#x27;</span>)</span><br><span class="line">    <span class="comment"># mkdirs </span></span><br><span class="line">    <span class="keyword">if</span> mkdir(VOC):</span><br><span class="line">        <span class="keyword">if</span> mkdir(ann_path) <span class="keyword">and</span> mkdir(img_path) <span class="keyword">and</span> mkdir(set_path):</span><br><span class="line">            mkdir(txt_path)</span><br><span class="line"></span><br><span class="line">    images = os.listdir(imgroot)</span><br><span class="line">    list_index = <span class="built_in">range</span>(<span class="built_in">len</span>(images))</span><br><span class="line">    <span class="comment">#test and trainval set</span></span><br><span class="line">    trainval_percent = tvp</span><br><span class="line">    train_percent = trp</span><br><span class="line">    val_percent = <span class="number">1</span> - train_percent <span class="keyword">if</span> train_percent&lt;<span class="number">1</span> <span class="keyword">else</span> <span class="number">0.1</span></span><br><span class="line">    total_num = <span class="built_in">len</span>(images)</span><br><span class="line">    trainval_num = <span class="built_in">int</span>(total_num*trainval_percent)</span><br><span class="line">    train_num = <span class="built_in">int</span>(trainval_num*train_percent)</span><br><span class="line">    val_num = <span class="built_in">int</span>(trainval_num*val_percent) <span class="keyword">if</span> train_percent&lt;<span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    trainval = random.sample(list_index,trainval_num)</span><br><span class="line">    train = random.sample(list_index,train_num)</span><br><span class="line">    val = random.sample(list_index,val_num)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(list_index):</span><br><span class="line">        imgfile = images[i]</span><br><span class="line">        img_id = os.path.splitext(os.path.basename(imgfile))[<span class="number">0</span>]</span><br><span class="line">        xmlfile = img_id+<span class="string">&quot;.xml&quot;</span></span><br><span class="line">        sh.copy(os.path.join(imgroot,imgfile),os.path.join(img_path,imgfile))</span><br><span class="line">        sh.copy(os.path.join(xmlroot,xmlfile),os.path.join(ann_path,xmlfile))</span><br><span class="line">        <span class="keyword">if</span> img_id <span class="keyword">not</span> <span class="keyword">in</span> errorId:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> trainval:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(txt_path,<span class="string">&#x27;trainval.txt&#x27;</span>),<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(img_id+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> train:</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(txt_path,<span class="string">&#x27;train.txt&#x27;</span>),<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        f.write(img_id+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(txt_path,<span class="string">&#x27;val.txt&#x27;</span>),<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        f.write(img_id+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> train_percent==<span class="number">1</span> <span class="keyword">and</span> i <span class="keyword">in</span> val:</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(txt_path,<span class="string">&#x27;val.txt&#x27;</span>),<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        f.write(img_id+<span class="string">&#x27;\n&#x27;</span>)          </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(txt_path,<span class="string">&#x27;test.txt&#x27;</span>),<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(img_id+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># end</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Dataset to VOC format finished!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    box_root = <span class="string">&quot;E:/MyProject/Dataset/hwtest/annotations&quot;</span></span><br><span class="line">    image_root = <span class="string">&quot;E:/MyProject/Dataset/hwtest/images&quot;</span></span><br><span class="line">    output_root = <span class="string">&quot;E:/MyProject/Dataset/voc&quot;</span></span><br><span class="line">    classes = &#123;<span class="string">&quot;liner&quot;</span>: <span class="number">0</span>,<span class="string">&quot;bulk carrier&quot;</span>: <span class="number">1</span>,<span class="string">&quot;warship&quot;</span>: <span class="number">2</span>,<span class="string">&quot;sailboat&quot;</span>: <span class="number">3</span>,<span class="string">&quot;canoe&quot;</span>: <span class="number">4</span>,<span class="string">&quot;container ship&quot;</span>: <span class="number">5</span>,<span class="string">&quot;fishing boat&quot;</span>: <span class="number">6</span>&#125;</span><br><span class="line">    errorId = []</span><br><span class="line">    train_percent = <span class="number">0.9</span></span><br><span class="line">    tovoc(box_root,image_root,output_root,errorId,classes,trp=train_percent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><h1 id="3-YOLO"><a href="#3-YOLO" class="headerlink" title="3. YOLO"></a>3. YOLO</h1><h2 id="3-1-YOLO数据集格式"><a href="#3-1-YOLO数据集格式" class="headerlink" title="3.1 YOLO数据集格式"></a>3.1 YOLO数据集格式</h2><p><code>YOLO</code>数据集格式的出现主要是为了训练<code>YOLO</code>模型，其文件格式没有固定的要求，因为可以通过修改模型的配置文件进行数据加载，唯一需要注意的是<code>YOLO</code>数据集的标注格式是将目标框的位置信息进行归一化处理（此处归一化指的是除以图片宽和高），如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;目标类别&#125; &#123;归一化后的目标中心点x坐标&#125; &#123;归一化后的目标中心点y坐标&#125; &#123;归一化后的目标框宽度w&#125; &#123;归一化后的目标框高度h&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-YOLO转换脚本"><a href="#3-2-YOLO转换脚本" class="headerlink" title="3.2 YOLO转换脚本"></a>3.2 YOLO转换脚本</h2><p><code>Python</code>转换脚本如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    : justlovesmile</span></span><br><span class="line"><span class="comment"># @Date      : 2021/9/8 20:28</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> tqdm.auto <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> shutil <span class="keyword">as</span> sh</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> xml.etree.cElementTree <span class="keyword">as</span> et</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> et</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;The path (<span class="subst">&#123;path&#125;</span>) already exists.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xml2yolo</span>(<span class="params">xmlpath,savepath,classes=&#123;&#125;</span>):</span></span><br><span class="line">    namemap = classes</span><br><span class="line">    <span class="comment">#try:</span></span><br><span class="line">    <span class="comment">#    with open(&#x27;classes_yolo.json&#x27;,&#x27;r&#x27;) as f:</span></span><br><span class="line">    <span class="comment">#        namemap=json.load(f)</span></span><br><span class="line">    <span class="comment">#except:</span></span><br><span class="line">    <span class="comment">#    pass</span></span><br><span class="line">    rt = et.parse(xmlpath).getroot()</span><br><span class="line">    w = <span class="built_in">int</span>(rt.find(<span class="string">&quot;size&quot;</span>).find(<span class="string">&quot;width&quot;</span>).text)</span><br><span class="line">    h = <span class="built_in">int</span>(rt.find(<span class="string">&quot;size&quot;</span>).find(<span class="string">&quot;height&quot;</span>).text)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(savepath, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> rt.findall(<span class="string">&quot;object&quot;</span>):</span><br><span class="line">            name = obj.find(<span class="string">&quot;name&quot;</span>).text</span><br><span class="line">            xmin = <span class="built_in">int</span>(obj.find(<span class="string">&quot;bndbox&quot;</span>).find(<span class="string">&quot;xmin&quot;</span>).text)</span><br><span class="line">            ymin = <span class="built_in">int</span>(obj.find(<span class="string">&quot;bndbox&quot;</span>).find(<span class="string">&quot;ymin&quot;</span>).text)</span><br><span class="line">            xmax = <span class="built_in">int</span>(obj.find(<span class="string">&quot;bndbox&quot;</span>).find(<span class="string">&quot;xmax&quot;</span>).text)</span><br><span class="line">            ymax = <span class="built_in">int</span>(obj.find(<span class="string">&quot;bndbox&quot;</span>).find(<span class="string">&quot;ymax&quot;</span>).text)</span><br><span class="line">            f.write(</span><br><span class="line">                <span class="string">f&quot;<span class="subst">&#123;namemap[name]&#125;</span> <span class="subst">&#123;(xmin+xmax)/w/<span class="number">2.</span>&#125;</span> <span class="subst">&#123;(ymin+ymax)/h/<span class="number">2.</span>&#125;</span> <span class="subst">&#123;(xmax-xmin)/w&#125;</span> <span class="subst">&#123;(ymax-ymin)/h&#125;</span>&quot;</span></span><br><span class="line">                + <span class="string">&quot;\n&quot;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trainval</span>(<span class="params">xmlroot,imgroot,saveroot,errorId=[],classes=&#123;&#125;,tvp=<span class="number">1.0</span>,trp=<span class="number">0.9</span></span>):</span></span><br><span class="line">    <span class="comment"># assert</span></span><br><span class="line">    <span class="keyword">assert</span> tvp&lt;=<span class="number">1.0</span> <span class="keyword">and</span> trp &lt;=<span class="number">1.0</span> <span class="keyword">and</span> <span class="built_in">len</span>(classes)&gt;<span class="number">0</span></span><br><span class="line">    <span class="comment"># create dirs</span></span><br><span class="line">    imglabel = [<span class="string">&#x27;images&#x27;</span>,<span class="string">&#x27;labels&#x27;</span>]</span><br><span class="line">    trainvaltest = [<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;val&#x27;</span>,<span class="string">&#x27;test&#x27;</span>]</span><br><span class="line">    mkdir(saveroot)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> imglabel:</span><br><span class="line">        mkdir(os.path.join(saveroot,r))</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> trainvaltest:</span><br><span class="line">            mkdir(os.path.join(saveroot,r,s))</span><br><span class="line">    <span class="comment">#train / val</span></span><br><span class="line">    trainval_percent = tvp</span><br><span class="line">    train_percent = trp</span><br><span class="line">    val_percent = <span class="number">1</span> - train_percent <span class="keyword">if</span> train_percent&lt;<span class="number">1.0</span> <span class="keyword">else</span> <span class="number">0.15</span></span><br><span class="line">    </span><br><span class="line">    total_img = os.listdir(imgroot)</span><br><span class="line">    num = <span class="built_in">len</span>(total_img)</span><br><span class="line">    list_index = <span class="built_in">range</span>(num)</span><br><span class="line">    tv = <span class="built_in">int</span>(num * trainval_percent)</span><br><span class="line">    tr = <span class="built_in">int</span>(tv * train_percent)</span><br><span class="line">    va = <span class="built_in">int</span>(tv * val_percent)</span><br><span class="line">    trainval = random.sample(list_index, tv) <span class="comment"># trainset and valset</span></span><br><span class="line">    train = random.sample(trainval, tr) <span class="comment"># trainset</span></span><br><span class="line">    val = random.sample(trainval, va) <span class="comment">#valset, use it only when train_percent = 1 </span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;trainval_percent:<span class="subst">&#123;trainval_percent&#125;</span>,train_percent:<span class="subst">&#123;train_percent&#125;</span>,val_percent:<span class="subst">&#123;val_percent&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(list_index):</span><br><span class="line">        name = total_img[i]</span><br><span class="line">        op = os.path.join(imgroot,name)</span><br><span class="line">        file_id = os.path.splitext(os.path.basename(name))[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> file_id <span class="keyword">not</span> <span class="keyword">in</span> errorId:</span><br><span class="line">            xmlp = os.path.join(xmlroot,file_id+<span class="string">&#x27;.xml&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> trainval:</span><br><span class="line">                <span class="comment"># trainset and valset</span></span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> train:</span><br><span class="line">                    sp = os.path.join(saveroot,<span class="string">&quot;images&quot;</span>,<span class="string">&quot;train&quot;</span>,name)</span><br><span class="line">                    xml2yolo(xmlp,os.path.join(saveroot,<span class="string">&quot;labels&quot;</span>,<span class="string">&quot;train&quot;</span>,file_id+<span class="string">&#x27;.txt&#x27;</span>),classes)</span><br><span class="line">                    sh.copy(op,sp)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    sp = os.path.join(saveroot,<span class="string">&quot;images&quot;</span>,<span class="string">&quot;val&quot;</span>,name)</span><br><span class="line">                    xml2yolo(xmlp,os.path.join(saveroot,<span class="string">&quot;labels&quot;</span>,<span class="string">&quot;val&quot;</span>,file_id+<span class="string">&#x27;.txt&#x27;</span>),classes)</span><br><span class="line">                    sh.copy(op,sp)</span><br><span class="line">                <span class="keyword">if</span> (train_percent==<span class="number">1.0</span> <span class="keyword">and</span> i <span class="keyword">in</span> val):</span><br><span class="line">                    sp = os.path.join(saveroot,<span class="string">&quot;images&quot;</span>,<span class="string">&quot;val&quot;</span>,name)</span><br><span class="line">                    xml2yolo(xmlp,os.path.join(saveroot,<span class="string">&quot;labels&quot;</span>,<span class="string">&quot;val&quot;</span>,file_id+<span class="string">&#x27;.txt&#x27;</span>),classes)</span><br><span class="line">                    sh.copy(op,sp)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># testset</span></span><br><span class="line">                sp = os.path.join(saveroot,<span class="string">&quot;images&quot;</span>,<span class="string">&quot;test&quot;</span>,name)</span><br><span class="line">                xml2yolo(xmlp,os.path.join(saveroot,<span class="string">&quot;labels&quot;</span>,<span class="string">&quot;test&quot;</span>,file_id+<span class="string">&#x27;.txt&#x27;</span>),classes)</span><br><span class="line">                sh.copy(op,sp)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maketxt</span>(<span class="params"><span class="built_in">dir</span>,saveroot,filename</span>):</span></span><br><span class="line">    savetxt = os.path.join(saveroot,filename)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(savetxt,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(os.listdir(<span class="built_in">dir</span>)):</span><br><span class="line">            f.write(os.path.join(<span class="built_in">dir</span>,i)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                           </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toyolo</span>(<span class="params">xmlroot,imgroot,saveroot,errorId=[],classes=&#123;&#125;,tvp=<span class="number">1</span>,train_percent=<span class="number">0.9</span></span>):</span></span><br><span class="line">    <span class="comment"># toyolo main function</span></span><br><span class="line">    trainval(xmlroot,imgroot,saveroot,errorId,classes,tvp,train_percent)</span><br><span class="line">    maketxt(os.path.join(saveroot,<span class="string">&quot;images&quot;</span>,<span class="string">&quot;train&quot;</span>),saveroot,<span class="string">&quot;train.txt&quot;</span>)</span><br><span class="line">    maketxt(os.path.join(saveroot,<span class="string">&quot;images&quot;</span>,<span class="string">&quot;val&quot;</span>),saveroot,<span class="string">&quot;val.txt&quot;</span>)</span><br><span class="line">    maketxt(os.path.join(saveroot,<span class="string">&quot;images&quot;</span>,<span class="string">&quot;test&quot;</span>),saveroot,<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Dataset to yolo format success.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    box_root = <span class="string">&quot;E:/MyProject/Dataset/hwtest/annotations&quot;</span></span><br><span class="line">    image_root = <span class="string">&quot;E:/MyProject/Dataset/hwtest/images&quot;</span></span><br><span class="line">    output_root = <span class="string">&quot;E:/MyProject/Dataset/yolo&quot;</span></span><br><span class="line">    classes = &#123;<span class="string">&quot;liner&quot;</span>: <span class="number">0</span>,<span class="string">&quot;bulk carrier&quot;</span>: <span class="number">1</span>,<span class="string">&quot;warship&quot;</span>: <span class="number">2</span>,<span class="string">&quot;sailboat&quot;</span>: <span class="number">3</span>,<span class="string">&quot;canoe&quot;</span>: <span class="number">4</span>,<span class="string">&quot;container ship&quot;</span>: <span class="number">5</span>,<span class="string">&quot;fishing boat&quot;</span>: <span class="number">6</span>&#125;</span><br><span class="line">    errorId = []</span><br><span class="line">    train_percent = <span class="number">0.9</span></span><br><span class="line">    toyolo(box_root,image_root,output_root,errorId,classes,train_percent=train_percent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>按照此脚本，将会在输出文件夹中生成以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-yolo/</span><br><span class="line">|-images/</span><br><span class="line">|-train/</span><br><span class="line">|-1.jpg</span><br><span class="line">|-2.jpg</span><br><span class="line">|-test/</span><br><span class="line">|-3.jpg</span><br><span class="line">|-4.jpg</span><br><span class="line">|-val/</span><br><span class="line">|-5.jpg</span><br><span class="line">|-6.jpg</span><br><span class="line">|-labels/</span><br><span class="line">|-train/</span><br><span class="line">|-1.txt</span><br><span class="line">|-2.txt</span><br><span class="line">|-test/</span><br><span class="line">|-3.txt</span><br><span class="line">|-4.txt</span><br><span class="line">|-val/</span><br><span class="line">|-5.txt</span><br><span class="line">|-6.txt</span><br><span class="line">|-train.txt</span><br><span class="line">|-test.txt</span><br><span class="line">|-val.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">目标检测是计算机视觉任务中的一个重要研究方向，是计算机视觉的根本性问题之一，是其他诸多计算机视觉任务的基础以及前提。本文主要介绍了目标检测数据集的几种标注格式和转换代码。</summary>
    
    
    
    <category term="代码编程" scheme="https://blog.justlovesmile.top/categories/%E4%BB%A3%E7%A0%81%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="深度学习" scheme="https://blog.justlovesmile.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="目标检测" scheme="https://blog.justlovesmile.top/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
    <category term="Python" scheme="https://blog.justlovesmile.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客 | 动态分类标签条，自动获取全站分类与标签进行展示</title>
    <link href="https://blog.justlovesmile.top/posts/2bfb1caa.html"/>
    <id>https://blog.justlovesmile.top/posts/2bfb1caa.html</id>
    <published>2021-08-14T13:10:23.000Z</published>
    <updated>2021-08-14T13:10:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>本文是对Heo博主写的<a href="https://blog.zhheo.com/p/bc61964d.html">Butterfly魔改：动态分类条，可以根据页面变化而改变的分类列表展示方式</a>文章的补充，增加了动态标签条，并且可以自动获取全站分类和标签名称。</p><h1 id="2-预览"><a href="#2-预览" class="headerlink" title="2. 预览"></a>2. 预览</h1><p><img src="https://npm.elemecdn.com/justlovesmile-img/202108142116064.png" alt="image-20210814211626863"></p><p><img src="https://npm.elemecdn.com/justlovesmile-img/202108142121159.png" alt="image-20210814212127747"></p><h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h1><h2 id="3-1-新建PUG文件"><a href="#3-1-新建PUG文件" class="headerlink" title="3.1 新建PUG文件"></a>3.1 新建PUG文件</h2><p>首先是分类条，在<code>themes/butterfly/layout/includes/</code>处新建文件<code>categoryBar.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#category-bar</span><br><span class="line">  .category-bar-items#category-bar-items</span><br><span class="line">    !=getarray_bar(&quot;category&quot;)</span><br><span class="line">  a.category-bar-more(href=&quot;/categories/&quot;) 更多</span><br></pre></td></tr></table></figure><p>其次是标签条，在<code>themes/butterfly/layout/includes/</code>处新建文件<code>tagBar.pug</code>，因为样式一样，所以没有更改id和class名称。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#category-bar</span><br><span class="line">  .category-bar-items#category-bar-items</span><br><span class="line">    !=getarray_bar(&quot;tag&quot;)</span><br><span class="line">  a.category-bar-more(href=&quot;/tags/&quot;) 更多</span><br></pre></td></tr></table></figure><h2 id="3-2-新建Hexo辅助函数"><a href="#3-2-新建Hexo辅助函数" class="headerlink" title="3.2 新建Hexo辅助函数"></a>3.2 新建Hexo辅助函数</h2><p>在<code>theme/butterfly/scripts/helpers/</code>中创建<code>get_arrays.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.helper.register(<span class="string">&#x27;getarray_bar&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">types</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!types) &#123;</span><br><span class="line">    types = <span class="string">&quot;category&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> categoriesBar = <span class="function"><span class="keyword">function</span> (<span class="params">categories</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!categories || !categories.length) <span class="keyword">return</span> <span class="string">``</span></span><br><span class="line">    <span class="keyword">const</span> categoryArr = []</span><br><span class="line">    hexo.locals.get(<span class="string">&#x27;categories&#x27;</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params">category</span>) </span>&#123;</span><br><span class="line">      categoryArr.push(&#123; <span class="attr">name</span>: category.name, <span class="attr">value</span>: category.length &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    categoryArr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">return</span> b.value - a.value &#125;)</span><br><span class="line">    <span class="keyword">let</span> strCategoriesBar = <span class="string">``</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; categories.length; i++) &#123;</span><br><span class="line">      strTemp=<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;category-bar-item&quot; id=&quot;<span class="subst">$&#123;categoryArr[i].name&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;a href=&quot;/categories/<span class="subst">$&#123;categoryArr[i].name&#125;</span>/&quot;&gt;<span class="subst">$&#123;categoryArr[i].name&#125;</span>&lt;/a&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;`</span></span><br><span class="line">      strCategoriesBar+=strTemp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strCategoriesBar</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tagsBar = <span class="function"><span class="keyword">function</span>(<span class="params">tags</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tags || !tags.length) <span class="keyword">return</span> <span class="string">``</span></span><br><span class="line">    <span class="keyword">const</span> tagArr = []</span><br><span class="line">    hexo.locals.get(<span class="string">&#x27;tags&#x27;</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params">tag</span>) </span>&#123;</span><br><span class="line">      tagArr.push(&#123; <span class="attr">name</span>: tag.name, <span class="attr">value</span>: tag.length &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    tagArr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">return</span> b.value - a.value &#125;)</span><br><span class="line">    <span class="keyword">let</span> strTagsBar = <span class="string">``</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tags.length; i++) &#123;</span><br><span class="line">      strTemp=<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;category-bar-item&quot; id=&quot;<span class="subst">$&#123;tagArr[i].name&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;a href=&quot;/tags/<span class="subst">$&#123;tagArr[i].name&#125;</span>/&quot;&gt;<span class="subst">$&#123;tagArr[i].name&#125;</span>&lt;/a&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;`</span></span><br><span class="line">      strTagsBar+=strTemp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strTagsBar</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (types == <span class="string">&quot;category&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> categoriesBar(<span class="built_in">this</span>.site.categories)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (types == <span class="string">&quot;tag&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> tagsBar(<span class="built_in">this</span>.site.tags)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-3-引用模块"><a href="#3-3-引用模块" class="headerlink" title="3.3 引用模块"></a>3.3 引用模块</h2><p>在需要的位置引用该模块，例如：</p><p>在分类页面引用：找到<code>theme/butterfly/layout/category.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  if theme.category_ui == &#x27;index&#x27;</span><br><span class="line">    include ./includes/mixins/post-ui.pug</span><br><span class="line">    #recent-posts.recent-posts.category_ui   </span><br><span class="line">      +postUI</span><br><span class="line">      include includes/pagination.pug    </span><br><span class="line">  else</span><br><span class="line">    include ./includes/mixins/article-sort.pug</span><br><span class="line">    #category</span><br><span class="line">+      .category-in-bar</span><br><span class="line">+        .category-in-bar-tips</span><br><span class="line">+          i.fa-fw.fas.fa-folder-open</span><br><span class="line">+        include includes/categoryBar.pug</span><br><span class="line">      .article-sort-title= _p(&#x27;page.category&#x27;) + &#x27; - &#x27; + page.category</span><br><span class="line">      +articleSort(page.posts)</span><br><span class="line">      include includes/pagination.pug</span><br></pre></td></tr></table></figure><p>在标签页引用：找到<code>theme/butterfly/layout/tag.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  if theme.tag_ui == &#x27;index&#x27;</span><br><span class="line">    include ./includes/mixins/post-ui.pug</span><br><span class="line">    #recent-posts.recent-posts</span><br><span class="line">      +postUI</span><br><span class="line">      include includes/pagination.pug</span><br><span class="line">  else</span><br><span class="line">    include ./includes/mixins/article-sort.pug</span><br><span class="line">    #tag</span><br><span class="line">+      .category-in-bar</span><br><span class="line">+        .category-in-bar-tips</span><br><span class="line">+          i.fa-fw.fas.fa-tags</span><br><span class="line">+        include includes/tagBar.pug</span><br><span class="line">      .article-sort-title= _p(&#x27;page.tag&#x27;) + &#x27; - &#x27; + page.tag</span><br><span class="line">      +articleSort(page.posts)</span><br><span class="line">      include includes/pagination.pug</span><br></pre></td></tr></table></figure><h1 id="4-引入js和css文件"><a href="#4-引入js和css文件" class="headerlink" title="4. 引入js和css文件"></a>4. 引入js和css文件</h1><p>这一部分和Heo博主的教程<a href="https://blog.zhheo.com/p/bc61964d.html">Butterfly魔改：动态分类条，可以根据页面变化而改变的分类列表展示方式 | 张洪Heo (zhheo.com)</a>一致。</p><p>不过如果添加了标签条，js文件需要增加一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标签条</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tagsBarActive</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> urlinfo = <span class="built_in">window</span>.location.pathname;</span><br><span class="line">  urlinfo = <span class="built_in">decodeURIComponent</span>(urlinfo)</span><br><span class="line">  <span class="comment">//console.log(urlinfo);</span></span><br><span class="line">  <span class="comment">//判断是否是首页</span></span><br><span class="line">  <span class="keyword">if</span> (urlinfo == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#tags-bar&#x27;</span>))&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;首页&#x27;</span>).classList.add(<span class="string">&quot;select&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 验证是否是分类链接</span></span><br><span class="line">    <span class="keyword">var</span> pattern = <span class="regexp">/\/tags\/.*?\//</span>;</span><br><span class="line">    <span class="keyword">var</span> patbool = pattern.test(urlinfo);</span><br><span class="line">    <span class="comment">//console.log(patbool);</span></span><br><span class="line">    <span class="comment">// 获取当前的标签</span></span><br><span class="line">    <span class="keyword">if</span> (patbool) &#123;</span><br><span class="line">      <span class="keyword">var</span> valuegroup = urlinfo.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">      <span class="comment">//console.log(valuegroup[2]);</span></span><br><span class="line">      <span class="comment">// 获取当前分类</span></span><br><span class="line">      <span class="keyword">var</span> nowTag = valuegroup[<span class="number">2</span>];</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#category-bar&#x27;</span>))&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(nowTag).classList.add(<span class="string">&quot;select&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line">tagsBarActive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h1&gt;&lt;p&gt;本文是对Heo博主写的&lt;a href=&quot;https://blog.zhheo.com/p/bc61964d.html&quot;&gt;</summary>
      
    
    
    
    <category term="博客相关" scheme="https://blog.justlovesmile.top/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="前端" scheme="https://blog.justlovesmile.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Hexo" scheme="https://blog.justlovesmile.top/tags/Hexo/"/>
    
    <category term="JS" scheme="https://blog.justlovesmile.top/tags/JS/"/>
    
  </entry>
  
</feed>
