{"title":"目标检测 | 常用数据集标注格式及生成脚本","slug":"人工智能-目标检测常用数据集标注格式","date":"2021-09-11T07:11:26.000Z","updated":"2021-09-11T07:11:26.000Z","comments":true,"path":"api/articles/人工智能-目标检测常用数据集标注格式.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/202109111535004.png","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/202109111939729.png"],"content":"<p>目标检测是计算机视觉任务中的一个重要研究方向，其用于解决对数码图像中特定种类的可视目标实例的检测问题。目标检测作为计算机视觉的根本性问题之一，是其他诸多计算机视觉任务，例如图像描述生成，实例分割和目标跟踪的基础以及前提。而在解决此类问题时，我们常常需要使用自己的脚本或者利用标注工具生成数据集，数据集格式往往会多种多样，因此对于目标检测任务而言，为了更好地兼容训练，大多数目标检测模型框架会默认支持几种常用的数据集标注格式，常见的分别是COCO，Pascal VOC，YOLO等等。本文主要介绍上述几种数据集格式以及我写的Python脚本（一般需要根据实际情况再改改）。</p>\n<h1 id=\"1-COCO\"><a href=\"#1-COCO\" class=\"headerlink\" title=\"1. COCO\"></a>1. COCO</h1><h2 id=\"1-1-COCO数据集格式\"><a href=\"#1-1-COCO数据集格式\" class=\"headerlink\" title=\"1.1 COCO数据集格式\"></a>1.1 COCO数据集格式</h2><p>COCO（Common Objects in COtext）数据集，是一个大规模的，适用于目标检测，图像分割，Image Captioning任务的数据集，其标注格式是最常用的几种格式之一。目前使用较多的是COCO2017数据集。其官网为<a href=\"https://cocodataset.org/\">COCO - Common Objects in Context (cocodataset.org)</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/202109111535004.png\" alt=\"image-20210911153516753\"></p>\n<p>COCO数据集主要包含图像（jpg或者png等等）和标注文件（json），其数据集格式如下(<code>/</code>代表文件夹)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-coco/</span><br><span class=\"line\">    |-train2017/</span><br><span class=\"line\">    \t|-1.jpg</span><br><span class=\"line\">    \t|-2.jpg</span><br><span class=\"line\">    |-val2017/</span><br><span class=\"line\">    \t|-3.jpg</span><br><span class=\"line\">    \t|-4.jpg</span><br><span class=\"line\">    |-test2017/</span><br><span class=\"line\">    \t|-5.jpg</span><br><span class=\"line\">    \t|-6.jpg</span><br><span class=\"line\">    |-annotations/</span><br><span class=\"line\">    \t|-instances_train2017.json</span><br><span class=\"line\">    \t|-instances_val2017.json</span><br><span class=\"line\">    \t|-*.json</span><br></pre></td></tr></table></figure>\n\n<p><code>train2017</code>以及<code>val2017</code>这两个文件夹中存储的是训练集和验证集的图像，而<code>test2017</code>文件夹中存储的是测试集的信息，可以只是图像，也可以包含标注，一般是单独使用的。</p>\n<p><code>annotations</code>文件夹中的文件就是标注文件，如果你有<code>xml</code>文件，通常需要转换成<code>json</code>格式，其格式如下（更详细的可以参考<a href=\"https://cocodataset.org/#format-data\">官网</a>）：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;info&quot;</span>: info, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;images&quot;</span>: [image], <span class=\"comment\">//列表</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;annotations&quot;</span>: [annotation], <span class=\"comment\">//列表</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;categories&quot;</span>: [category], <span class=\"comment\">//列表</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;licenses&quot;</span>: [license], <span class=\"comment\">//列表</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>info</code>为整个数据集的信息，包括年份，版本，描述等等信息，如果只是完成训练任务，其实不太重要，如下所示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于训练，不是那么的重要</span></span><br><span class=\"line\">info&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;year&quot;</span>: int, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;version&quot;</span>: str, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;description&quot;</span>: str, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;contributor&quot;</span>: str, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;url&quot;</span>: str, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;date_created&quot;</span>: datetime,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>image</code>为图像的基本信息，包括序号，宽高，文件名等等信息，其中的序号（<code>id</code>）需要和后面的<code>annotations</code>中的标注所属图片序号对应如下所示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>: int, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;width&quot;</span>: int, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;height&quot;</span>: int, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;file_name&quot;</span>: str, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;license&quot;</span>: int,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;flickr_url&quot;</span>: str,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;coco_url&quot;</span>: str,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;date_captured&quot;</span>: datetime, </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>annotation</code>是最重要的标注信息，包括序号，所属图像序号，类别序号等等信息，如下所示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">annotation&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>: int, <span class=\"comment\">//标注id</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;image_id&quot;</span>: int, <span class=\"comment\">//所属图像id</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;category_id&quot;</span>: int, <span class=\"comment\">//类别id</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;segmentation&quot;</span>: RLE or [polygon], <span class=\"comment\">//图像分割标注</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;area&quot;</span>: float, <span class=\"comment\">//区域面积</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;bbox&quot;</span>: [x,y,width,height], <span class=\"comment\">//目标框左上角坐标以及宽高</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;iscrowd&quot;</span>: <span class=\"number\">0</span> or <span class=\"number\">1</span>, <span class=\"comment\">//是否密集</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>category</code>代表类别信息，包括父类别，类别序号以及类别名称，如下所示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">category&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>: int, <span class=\"comment\">//类别序号</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span>: str, <span class=\"comment\">//类别名称</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;supercategory&quot;</span>: str, <span class=\"comment\">//父类别</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>license</code>代表数据集的协议许可信息，包括序号，协议名称以及链接信息，如下所示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于训练，不重要</span></span><br><span class=\"line\">license&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>: int, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span>: str, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;url&quot;</span>: str,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们来看一个简单的示例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">&quot;info&quot;</span>: &#123;略&#125;, <span class=\"attr\">&quot;images&quot;</span>: [&#123;<span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">1</span>, <span class=\"attr\">&quot;file_name&quot;</span>: <span class=\"string\">&quot;1.jpg&quot;</span>, <span class=\"attr\">&quot;height&quot;</span>: <span class=\"number\">334</span>, <span class=\"attr\">&quot;width&quot;</span>: <span class=\"number\">500</span>&#125;, &#123;<span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">2</span>, <span class=\"attr\">&quot;file_name&quot;</span>: <span class=\"string\">&quot;2.jpg&quot;</span>, <span class=\"attr\">&quot;height&quot;</span>: <span class=\"number\">445</span>, <span class=\"attr\">&quot;width&quot;</span>: <span class=\"number\">556</span>&#125;], <span class=\"attr\">&quot;annotations&quot;</span>: [&#123;<span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">1</span>, <span class=\"attr\">&quot;area&quot;</span>: <span class=\"number\">40448</span>, <span class=\"attr\">&quot;iscrowd&quot;</span>: <span class=\"number\">0</span>, <span class=\"attr\">&quot;image_id&quot;</span>: <span class=\"number\">1</span>, <span class=\"attr\">&quot;bbox&quot;</span>: [<span class=\"number\">246</span>, <span class=\"number\">61</span>, <span class=\"number\">128</span>, <span class=\"number\">316</span>], <span class=\"attr\">&quot;category_id&quot;</span>: <span class=\"number\">3</span>, <span class=\"attr\">&quot;segmentation&quot;</span>: []&#125;, &#123;<span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">2</span>, <span class=\"attr\">&quot;area&quot;</span>: <span class=\"number\">40448</span>, <span class=\"attr\">&quot;iscrowd&quot;</span>: <span class=\"number\">0</span>, <span class=\"attr\">&quot;image_id&quot;</span>: <span class=\"number\">1</span>, <span class=\"attr\">&quot;bbox&quot;</span>: [<span class=\"number\">246</span>, <span class=\"number\">61</span>, <span class=\"number\">128</span>, <span class=\"number\">316</span>], <span class=\"attr\">&quot;category_id&quot;</span>: <span class=\"number\">2</span>, <span class=\"attr\">&quot;segmentation&quot;</span>: []&#125;, &#123;<span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">3</span>, <span class=\"attr\">&quot;area&quot;</span>: <span class=\"number\">40448</span>, <span class=\"attr\">&quot;iscrowd&quot;</span>: <span class=\"number\">0</span>, <span class=\"attr\">&quot;image_id&quot;</span>: <span class=\"number\">2</span>, <span class=\"attr\">&quot;bbox&quot;</span>: [<span class=\"number\">246</span>, <span class=\"number\">61</span>, <span class=\"number\">128</span>, <span class=\"number\">316</span>], <span class=\"attr\">&quot;category_id&quot;</span>: <span class=\"number\">1</span>, <span class=\"attr\">&quot;segmentation&quot;</span>: []&#125;], <span class=\"attr\">&quot;categories&quot;</span>: [&#123;<span class=\"attr\">&quot;supercategory&quot;</span>: <span class=\"string\">&quot;none&quot;</span>, <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">1</span>, <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;liner&quot;</span>&#125;,&#123;<span class=\"attr\">&quot;supercategory&quot;</span>: <span class=\"string\">&quot;none&quot;</span>, <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">2</span>, <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;containership&quot;</span>&#125;,&#123;<span class=\"attr\">&quot;supercategory&quot;</span>: <span class=\"string\">&quot;none&quot;</span>, <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">3</span>, <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;bulkcarrier&quot;</span>&#125;], <span class=\"attr\">&quot;licenses&quot;</span>: [&#123;略&#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-COCO转换脚本\"><a href=\"#1-2-COCO转换脚本\" class=\"headerlink\" title=\"1.2 COCO转换脚本\"></a>1.2 COCO转换脚本</h2><p><code>Python转换脚本</code>如下所示，需要准备<code>图像</code>和<code>xml</code>标注文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># @Author    : justlovesmile</span></span><br><span class=\"line\"><span class=\"comment\"># @Date      : 2021/9/8 15:36</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os, random, json</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil <span class=\"keyword\">as</span> sh</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm.auto <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> xml.etree.ElementTree <span class=\"keyword\">as</span> xmlET</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mkdir</span>(<span class=\"params\">path</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(path):</span><br><span class=\"line\">        os.makedirs(path)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;The path (<span class=\"subst\">&#123;path&#125;</span>) already exists.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readxml</span>(<span class=\"params\">file</span>):</span></span><br><span class=\"line\">    tree = xmlET.parse(file)</span><br><span class=\"line\">    <span class=\"comment\">#图片尺寸字段</span></span><br><span class=\"line\">    size = tree.find(<span class=\"string\">&#x27;size&#x27;</span>)</span><br><span class=\"line\">    width = <span class=\"built_in\">int</span>(size.find(<span class=\"string\">&#x27;width&#x27;</span>).text)</span><br><span class=\"line\">    height = <span class=\"built_in\">int</span>(size.find(<span class=\"string\">&#x27;height&#x27;</span>).text)</span><br><span class=\"line\">    <span class=\"comment\">#目标字段</span></span><br><span class=\"line\">    objs = tree.findall(<span class=\"string\">&#x27;object&#x27;</span>)</span><br><span class=\"line\">    bndbox = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> objs:</span><br><span class=\"line\">        label = obj.find(<span class=\"string\">&quot;name&quot;</span>).text</span><br><span class=\"line\">        bnd = obj.find(<span class=\"string\">&quot;bndbox&quot;</span>)</span><br><span class=\"line\">        xmin = <span class=\"built_in\">int</span>(bnd.find(<span class=\"string\">&quot;xmin&quot;</span>).text)</span><br><span class=\"line\">        ymin = <span class=\"built_in\">int</span>(bnd.find(<span class=\"string\">&quot;ymin&quot;</span>).text)</span><br><span class=\"line\">        xmax = <span class=\"built_in\">int</span>(bnd.find(<span class=\"string\">&quot;xmax&quot;</span>).text)</span><br><span class=\"line\">        ymax = <span class=\"built_in\">int</span>(bnd.find(<span class=\"string\">&quot;ymax&quot;</span>).text)</span><br><span class=\"line\">        bbox = [xmin, ymin, xmax, ymax, label]</span><br><span class=\"line\">        bndbox.append(bbox)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[width, height], bndbox]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tococo</span>(<span class=\"params\">xml_root, image_root, output_root,classes=&#123;&#125;,errorId=[],train_percent=<span class=\"number\">0.9</span></span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># assert</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> train_percent&lt;=<span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(classes)&gt;<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># define the root path</span></span><br><span class=\"line\">    train_root = os.path.join(output_root, <span class=\"string\">&quot;train2017&quot;</span>)</span><br><span class=\"line\">    val_root = os.path.join(output_root, <span class=\"string\">&quot;val2017&quot;</span>)</span><br><span class=\"line\">    ann_root = os.path.join(output_root, <span class=\"string\">&quot;annotations&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># initialize train and val dict</span></span><br><span class=\"line\">    train_content = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;images&quot;</span>: [],  <span class=\"comment\"># &#123;&quot;file_name&quot;: &quot;09780.jpg&quot;, &quot;height&quot;: 334, &quot;width&quot;: 500, &quot;id&quot;: 9780&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;annotations&quot;</span>: [],<span class=\"comment\"># &#123;&quot;area&quot;: 40448, &quot;iscrowd&quot;: 0, &quot;image_id&quot;: 1, &quot;bbox&quot;: [246, 61, 128, 316], &quot;category_id&quot;: 5, &quot;id&quot;: 1, &quot;segmentation&quot;: []&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;categories&quot;</span>: []  <span class=\"comment\"># &#123;&quot;supercategory&quot;: &quot;none&quot;, &quot;id&quot;: 1, &quot;name&quot;: &quot;liner&quot;&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    val_content = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;images&quot;</span>: [],  <span class=\"comment\"># &#123;&quot;file_name&quot;: &quot;09780.jpg&quot;, &quot;height&quot;: 334, &quot;width&quot;: 500, &quot;id&quot;: 9780&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;annotations&quot;</span>: [],<span class=\"comment\"># &#123;&quot;area&quot;: 40448, &quot;iscrowd&quot;: 0, &quot;image_id&quot;: 1, &quot;bbox&quot;: [246, 61, 128, 316], &quot;category_id&quot;: 5, &quot;id&quot;: 1, &quot;segmentation&quot;: []&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;categories&quot;</span>: []  <span class=\"comment\"># &#123;&quot;supercategory&quot;: &quot;none&quot;, &quot;id&quot;: 1, &quot;name&quot;: &quot;liner&quot;&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    train_json = <span class=\"string\">&#x27;instances_train2017.json&#x27;</span></span><br><span class=\"line\">    val_json = <span class=\"string\">&#x27;instances_val2017.json&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># divide the trainset and valset</span></span><br><span class=\"line\">    images = os.listdir(image_root)</span><br><span class=\"line\">    total_num = <span class=\"built_in\">len</span>(images)</span><br><span class=\"line\">    train_percent = train_percent</span><br><span class=\"line\">    train_num = <span class=\"built_in\">int</span>(total_num * train_percent)</span><br><span class=\"line\">    train_file = <span class=\"built_in\">sorted</span>(random.sample(images, train_num))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mkdir(output_root):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> mkdir(train_root) <span class=\"keyword\">and</span> mkdir(val_root) <span class=\"keyword\">and</span> mkdir(ann_root):</span><br><span class=\"line\">            idx1, idx2, dx1, dx2 = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> tqdm(images):</span><br><span class=\"line\">                name=os.path.splitext(os.path.basename(file))[<span class=\"number\">0</span>]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> name <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> errorId:</span><br><span class=\"line\">                    res = readxml(os.path.join(xml_root, name + <span class=\"string\">&#x27;.xml&#x27;</span>))</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> file <span class=\"keyword\">in</span> train_file:</span><br><span class=\"line\">                        idx1 += <span class=\"number\">1</span></span><br><span class=\"line\">                        sh.copy(os.path.join(image_root, file), train_root)</span><br><span class=\"line\">                        train_content[<span class=\"string\">&#x27;images&#x27;</span>].append(</span><br><span class=\"line\">                            &#123;<span class=\"string\">&quot;file_name&quot;</span>: file, <span class=\"string\">&quot;width&quot;</span>: res[<span class=\"number\">0</span>][<span class=\"number\">0</span>], <span class=\"string\">&quot;height&quot;</span>: res[<span class=\"number\">0</span>][<span class=\"number\">1</span>], <span class=\"string\">&quot;id&quot;</span>: idx1&#125;)</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> res[<span class=\"number\">1</span>]:</span><br><span class=\"line\">                            dx1 += <span class=\"number\">1</span></span><br><span class=\"line\">                            x = b[<span class=\"number\">0</span>]</span><br><span class=\"line\">                            y = b[<span class=\"number\">1</span>]</span><br><span class=\"line\">                            w = b[<span class=\"number\">2</span>] - b[<span class=\"number\">0</span>]</span><br><span class=\"line\">                            h = b[<span class=\"number\">3</span>] - b[<span class=\"number\">1</span>]</span><br><span class=\"line\">                            train_content[<span class=\"string\">&#x27;annotations&#x27;</span>].append(</span><br><span class=\"line\">                                &#123;<span class=\"string\">&quot;area&quot;</span>: w * h, <span class=\"string\">&quot;iscrowd&quot;</span>: <span class=\"number\">0</span>, <span class=\"string\">&quot;image_id&quot;</span>: idx1, <span class=\"string\">&quot;bbox&quot;</span>: [x, y, w, h],</span><br><span class=\"line\">                                 <span class=\"string\">&quot;category_id&quot;</span>: classes[b[<span class=\"number\">4</span>]], <span class=\"string\">&quot;id&quot;</span>: dx1, <span class=\"string\">&quot;segmentation&quot;</span>: []&#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        idx2 += <span class=\"number\">1</span></span><br><span class=\"line\">                        sh.copy(os.path.join(image_root, file), val_root)</span><br><span class=\"line\">                        val_content[<span class=\"string\">&#x27;images&#x27;</span>].append(</span><br><span class=\"line\">                            &#123;<span class=\"string\">&quot;file_name&quot;</span>: file, <span class=\"string\">&quot;width&quot;</span>: res[<span class=\"number\">0</span>][<span class=\"number\">0</span>], <span class=\"string\">&quot;height&quot;</span>: res[<span class=\"number\">0</span>][<span class=\"number\">1</span>], <span class=\"string\">&quot;id&quot;</span>: idx2&#125;)</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> res[<span class=\"number\">1</span>]:</span><br><span class=\"line\">                            dx2 += <span class=\"number\">1</span></span><br><span class=\"line\">                            x = b[<span class=\"number\">0</span>]</span><br><span class=\"line\">                            y = b[<span class=\"number\">1</span>]</span><br><span class=\"line\">                            w = b[<span class=\"number\">2</span>] - b[<span class=\"number\">0</span>]</span><br><span class=\"line\">                            h = b[<span class=\"number\">3</span>] - b[<span class=\"number\">1</span>]</span><br><span class=\"line\">                            val_content[<span class=\"string\">&#x27;annotations&#x27;</span>].append(</span><br><span class=\"line\">                                &#123;<span class=\"string\">&quot;area&quot;</span>: w * h, <span class=\"string\">&quot;iscrowd&quot;</span>: <span class=\"number\">0</span>, <span class=\"string\">&quot;image_id&quot;</span>: idx2, <span class=\"string\">&quot;bbox&quot;</span>: [x, y, w, h],</span><br><span class=\"line\">                                 <span class=\"string\">&quot;category_id&quot;</span>: classes[b[<span class=\"number\">4</span>]], <span class=\"string\">&quot;id&quot;</span>: dx2, <span class=\"string\">&quot;segmentation&quot;</span>: []&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> classes.items():</span><br><span class=\"line\">                train_content[<span class=\"string\">&#x27;categories&#x27;</span>].append(&#123;<span class=\"string\">&quot;supercategory&quot;</span>: <span class=\"string\">&quot;none&quot;</span>, <span class=\"string\">&quot;id&quot;</span>: j, <span class=\"string\">&quot;name&quot;</span>: i&#125;)</span><br><span class=\"line\">                val_content[<span class=\"string\">&#x27;categories&#x27;</span>].append(&#123;<span class=\"string\">&quot;supercategory&quot;</span>: <span class=\"string\">&quot;none&quot;</span>, <span class=\"string\">&quot;id&quot;</span>: j, <span class=\"string\">&quot;name&quot;</span>: i&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(ann_root, train_json), <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                json.dump(train_content, f)</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(ann_root, val_json), <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                json.dump(val_content, f)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Number of Train Images:&quot;</span>, <span class=\"built_in\">len</span>(os.listdir(train_root)))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Number of Val Images:&quot;</span>, <span class=\"built_in\">len</span>(os.listdir(val_root)))</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>():</span></span><br><span class=\"line\">    box_root = <span class=\"string\">&quot;E:/MyProject/Dataset/hwtest/annotations&quot;</span> <span class=\"comment\">#xml文件夹</span></span><br><span class=\"line\">    image_root = <span class=\"string\">&quot;E:/MyProject/Dataset/hwtest/images&quot;</span> <span class=\"comment\">#image文件夹</span></span><br><span class=\"line\">    output_root = <span class=\"string\">&quot;E:/MyProject/Dataset/coco&quot;</span> <span class=\"comment\">#输出文件夹</span></span><br><span class=\"line\">    classes = &#123;<span class=\"string\">&quot;liner&quot;</span>: <span class=\"number\">0</span>,<span class=\"string\">&quot;bulk carrier&quot;</span>: <span class=\"number\">1</span>,<span class=\"string\">&quot;warship&quot;</span>: <span class=\"number\">2</span>,<span class=\"string\">&quot;sailboat&quot;</span>: <span class=\"number\">3</span>,<span class=\"string\">&quot;canoe&quot;</span>: <span class=\"number\">4</span>,<span class=\"string\">&quot;container ship&quot;</span>: <span class=\"number\">5</span>,<span class=\"string\">&quot;fishing boat&quot;</span>: <span class=\"number\">6</span>&#125; <span class=\"comment\">#类别字典</span></span><br><span class=\"line\">    errorId = [] <span class=\"comment\">#脏数据id</span></span><br><span class=\"line\">    train_percent = <span class=\"number\">0.9</span> <span class=\"comment\">#训练集和验证集比例</span></span><br><span class=\"line\">    tococo(box_root, image_root, output_root,classes=classes,errorId=errorId,train_percent=train_percent)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    test()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-VOC\"><a href=\"#2-VOC\" class=\"headerlink\" title=\"2. VOC\"></a>2. VOC</h1><h2 id=\"2-1-VOC数据集格式\"><a href=\"#2-1-VOC数据集格式\" class=\"headerlink\" title=\"2.1 VOC数据集格式\"></a>2.1 VOC数据集格式</h2><p>VOC（Visual Object Classes）数据集来源于PASCAL VOC挑战赛，其主要任务有<code>Object Classification</code> 、<code>Object Detection</code>、<code>Object Segmentation</code>、<code>Human Layout</code>、<code>Action Classification</code>。其官网为<a href=\"http://host.robots.ox.ac.uk/pascal/VOC/\">The PASCAL Visual Object Classes Homepage (ox.ac.uk)</a>。其主要数据集有VOC2007以及VOC2012。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/202109111939729.png\" alt=\"image-20210911193933398\"></p>\n<p>VOC数据集主要包含图像（jpg或者png等等）和标注文件（xml），其数据集格式如下(<code>/</code>代表文件夹)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-VOC/</span><br><span class=\"line\">\t|-JPEGImages/</span><br><span class=\"line\">\t\t|-1.jpg</span><br><span class=\"line\">\t\t|-2.jpg</span><br><span class=\"line\">\t|-Annotations/</span><br><span class=\"line\">\t\t|-1.xml</span><br><span class=\"line\">\t\t|-2.xml</span><br><span class=\"line\">\t|-ImageSets/</span><br><span class=\"line\">\t\t|-Layout/</span><br><span class=\"line\">\t\t\t|-*.txt</span><br><span class=\"line\">\t\t|-Main/</span><br><span class=\"line\">\t\t\t|-train.txt</span><br><span class=\"line\">\t\t\t|-val.txt</span><br><span class=\"line\">\t\t\t|-trainval.txt</span><br><span class=\"line\">\t\t\t|-test.txt</span><br><span class=\"line\">\t\t|-Segmentation/</span><br><span class=\"line\">\t\t\t|-*.txt</span><br><span class=\"line\">\t\t|-Action/</span><br><span class=\"line\">\t\t\t|-*.txt</span><br><span class=\"line\">\t|-SegmentationClass/</span><br><span class=\"line\">\t|-SegmentationObject/</span><br></pre></td></tr></table></figure>\n\n<p>其中对于目标检测任务而言，最常用的以及必须的文件夹包括：<code>JPEGImages</code>，<code>Annotations</code>，<code>ImageSets/Main</code>。</p>\n<p><code>JPEGImages</code>里存放的是图像，而<code>Annotations</code>里存放的是<code>xml</code>标注文件，文件内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;annotation&gt;</span><br><span class=\"line\">\t&lt;folder&gt;VOC&lt;/folder&gt;            # 图像所在文件夹</span><br><span class=\"line\">\t&lt;filename&gt;000032.jpg&lt;/filename&gt; # 图像文件名</span><br><span class=\"line\">\t&lt;source&gt;                        # 图像源</span><br><span class=\"line\">\t\t&lt;database&gt;The VOC Database&lt;/database&gt;</span><br><span class=\"line\">\t\t&lt;annotation&gt;PASCAL VOC&lt;/annotation&gt;</span><br><span class=\"line\">\t\t&lt;image&gt;flickr&lt;/image&gt;</span><br><span class=\"line\">\t&lt;/source&gt;</span><br><span class=\"line\">\t&lt;size&gt;                          # 图像尺寸信息</span><br><span class=\"line\">\t\t&lt;width&gt;500&lt;/width&gt;    # 图像宽度</span><br><span class=\"line\">\t\t&lt;height&gt;281&lt;/height&gt;  # 图像高度</span><br><span class=\"line\">\t\t&lt;depth&gt;3&lt;/depth&gt;      # 图像通道数</span><br><span class=\"line\">\t&lt;/size&gt;</span><br><span class=\"line\">\t&lt;segmented&gt;0&lt;/segmented&gt;  # 图像是否用于分割，0代表不适用，对目标检测而言没关系</span><br><span class=\"line\">\t&lt;object&gt;                  # 一个目标对象的信息</span><br><span class=\"line\">\t\t&lt;name&gt;aeroplane&lt;/name&gt;    # 目标的类别名</span><br><span class=\"line\">\t\t&lt;pose&gt;Frontal&lt;/pose&gt;      # 拍摄角度，若无一般为Unspecified</span><br><span class=\"line\">\t\t&lt;truncated&gt;0&lt;/truncated&gt;  # 是否被截断，0表示完整未截断</span><br><span class=\"line\">\t\t&lt;difficult&gt;0&lt;/difficult&gt;  # 是否难以识别，0表示不难识别</span><br><span class=\"line\">\t\t&lt;bndbox&gt;            # 边界框信息</span><br><span class=\"line\">\t\t\t&lt;xmin&gt;104&lt;/xmin&gt;  # 左上角x</span><br><span class=\"line\">\t\t\t&lt;ymin&gt;78&lt;/ymin&gt;   # 左上角y</span><br><span class=\"line\">\t\t\t&lt;xmax&gt;375&lt;/xmax&gt;  # 右下角x</span><br><span class=\"line\">\t\t\t&lt;ymax&gt;183&lt;/ymax&gt;  # 右下角y</span><br><span class=\"line\">\t\t&lt;/bndbox&gt;</span><br><span class=\"line\">\t&lt;/object&gt;</span><br><span class=\"line\">    # 下面是其他目标的信息，这里略掉</span><br><span class=\"line\">\t&lt;object&gt;</span><br><span class=\"line\">        其他object信息，这里省略</span><br><span class=\"line\">\t&lt;/object&gt;</span><br><span class=\"line\">&lt;/annotation&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-VOC转换脚本\"><a href=\"#2-2-VOC转换脚本\" class=\"headerlink\" title=\"2.2 VOC转换脚本\"></a>2.2 VOC转换脚本</h2><p>下面这个脚本，只适用于有图像和xml文件的情况下，coco转voc格式以后有需要再写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># @Author    : justlovesmile</span></span><br><span class=\"line\"><span class=\"comment\"># @Date      : 2021/9/8 21:01</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os,random</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm.auto <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil <span class=\"keyword\">as</span> sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mkdir</span>(<span class=\"params\">path</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(path):</span><br><span class=\"line\">        os.mkdir(path)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;The path (<span class=\"subst\">&#123;path&#125;</span>) already exists.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tovoc</span>(<span class=\"params\">xmlroot,imgroot,saveroot,errorId=[],classes=&#123;&#125;,tvp=<span class=\"number\">1.0</span>,trp=<span class=\"number\">0.9</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    参数：</span></span><br><span class=\"line\"><span class=\"string\">        root：数据集存放根目录</span></span><br><span class=\"line\"><span class=\"string\">    功能：</span></span><br><span class=\"line\"><span class=\"string\">        加载数据，并保存为VOC格式</span></span><br><span class=\"line\"><span class=\"string\">    加载后的格式：</span></span><br><span class=\"line\"><span class=\"string\">    VOC/</span></span><br><span class=\"line\"><span class=\"string\">      Annotations/</span></span><br><span class=\"line\"><span class=\"string\">        - **.xml</span></span><br><span class=\"line\"><span class=\"string\">      JPEGImages/</span></span><br><span class=\"line\"><span class=\"string\">        - **.jpg</span></span><br><span class=\"line\"><span class=\"string\">      ImageSets/</span></span><br><span class=\"line\"><span class=\"string\">        Main/</span></span><br><span class=\"line\"><span class=\"string\">          - train.txt</span></span><br><span class=\"line\"><span class=\"string\">          - test.txt</span></span><br><span class=\"line\"><span class=\"string\">          - val.txt</span></span><br><span class=\"line\"><span class=\"string\">          - trainval.txt</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># assert</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(classes)&gt;<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># init path</span></span><br><span class=\"line\">    VOC = saveroot</span><br><span class=\"line\">    ann_path = os.path.join(VOC, <span class=\"string\">&#x27;Annotations&#x27;</span>)</span><br><span class=\"line\">    img_path = os.path.join(VOC,<span class=\"string\">&#x27;JPEGImages&#x27;</span>)</span><br><span class=\"line\">    set_path = os.path.join(VOC,<span class=\"string\">&#x27;ImageSets&#x27;</span>)</span><br><span class=\"line\">    txt_path = os.path.join(set_path,<span class=\"string\">&#x27;Main&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># mkdirs </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> mkdir(VOC):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> mkdir(ann_path) <span class=\"keyword\">and</span> mkdir(img_path) <span class=\"keyword\">and</span> mkdir(set_path):</span><br><span class=\"line\">            mkdir(txt_path)</span><br><span class=\"line\"></span><br><span class=\"line\">    images = os.listdir(imgroot)</span><br><span class=\"line\">    list_index = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(images))</span><br><span class=\"line\">    <span class=\"comment\">#test and trainval set</span></span><br><span class=\"line\">    trainval_percent = tvp</span><br><span class=\"line\">    train_percent = trp</span><br><span class=\"line\">    val_percent = <span class=\"number\">1</span> - train_percent <span class=\"keyword\">if</span> train_percent&lt;<span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"number\">0.1</span></span><br><span class=\"line\">    total_num = <span class=\"built_in\">len</span>(images)</span><br><span class=\"line\">    trainval_num = <span class=\"built_in\">int</span>(total_num*trainval_percent)</span><br><span class=\"line\">    train_num = <span class=\"built_in\">int</span>(trainval_num*train_percent)</span><br><span class=\"line\">    val_num = <span class=\"built_in\">int</span>(trainval_num*val_percent) <span class=\"keyword\">if</span> train_percent&lt;<span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    trainval = random.sample(list_index,trainval_num)</span><br><span class=\"line\">    train = random.sample(list_index,train_num)</span><br><span class=\"line\">    val = random.sample(list_index,val_num)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(list_index):</span><br><span class=\"line\">        imgfile = images[i]</span><br><span class=\"line\">        img_id = os.path.splitext(os.path.basename(imgfile))[<span class=\"number\">0</span>]</span><br><span class=\"line\">        xmlfile = img_id+<span class=\"string\">&quot;.xml&quot;</span></span><br><span class=\"line\">        sh.copy(os.path.join(imgroot,imgfile),os.path.join(img_path,imgfile))</span><br><span class=\"line\">        sh.copy(os.path.join(xmlroot,xmlfile),os.path.join(ann_path,xmlfile))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_id <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> errorId:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> trainval:</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(txt_path,<span class=\"string\">&#x27;trainval.txt&#x27;</span>),<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                    f.write(img_id+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> train:</span><br><span class=\"line\">                    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(txt_path,<span class=\"string\">&#x27;train.txt&#x27;</span>),<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                        f.write(img_id+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(txt_path,<span class=\"string\">&#x27;val.txt&#x27;</span>),<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                        f.write(img_id+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> train_percent==<span class=\"number\">1</span> <span class=\"keyword\">and</span> i <span class=\"keyword\">in</span> val:</span><br><span class=\"line\">                    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(txt_path,<span class=\"string\">&#x27;val.txt&#x27;</span>),<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                        f.write(img_id+<span class=\"string\">&#x27;\\n&#x27;</span>)          </span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(txt_path,<span class=\"string\">&#x27;test.txt&#x27;</span>),<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                    f.write(img_id+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># end</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dataset to VOC format finished!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>():</span></span><br><span class=\"line\">    box_root = <span class=\"string\">&quot;E:/MyProject/Dataset/hwtest/annotations&quot;</span></span><br><span class=\"line\">    image_root = <span class=\"string\">&quot;E:/MyProject/Dataset/hwtest/images&quot;</span></span><br><span class=\"line\">    output_root = <span class=\"string\">&quot;E:/MyProject/Dataset/voc&quot;</span></span><br><span class=\"line\">    classes = &#123;<span class=\"string\">&quot;liner&quot;</span>: <span class=\"number\">0</span>,<span class=\"string\">&quot;bulk carrier&quot;</span>: <span class=\"number\">1</span>,<span class=\"string\">&quot;warship&quot;</span>: <span class=\"number\">2</span>,<span class=\"string\">&quot;sailboat&quot;</span>: <span class=\"number\">3</span>,<span class=\"string\">&quot;canoe&quot;</span>: <span class=\"number\">4</span>,<span class=\"string\">&quot;container ship&quot;</span>: <span class=\"number\">5</span>,<span class=\"string\">&quot;fishing boat&quot;</span>: <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">    errorId = []</span><br><span class=\"line\">    train_percent = <span class=\"number\">0.9</span></span><br><span class=\"line\">    tovoc(box_root,image_root,output_root,errorId,classes,trp=train_percent)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    test()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-YOLO\"><a href=\"#3-YOLO\" class=\"headerlink\" title=\"3. YOLO\"></a>3. YOLO</h1><h2 id=\"3-1-YOLO数据集格式\"><a href=\"#3-1-YOLO数据集格式\" class=\"headerlink\" title=\"3.1 YOLO数据集格式\"></a>3.1 YOLO数据集格式</h2><p><code>YOLO</code>数据集格式的出现主要是为了训练<code>YOLO</code>模型，其文件格式没有固定的要求，因为可以通过修改模型的配置文件进行数据加载，唯一需要注意的是<code>YOLO</code>数据集的标注格式是将目标框的位置信息进行归一化处理（此处归一化指的是除以图片宽和高），如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;目标类别&#125; &#123;归一化后的目标中心点x坐标&#125; &#123;归一化后的目标中心点y坐标&#125; &#123;归一化后的目标框宽度w&#125; &#123;归一化后的目标框高度h&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-YOLO转换脚本\"><a href=\"#3-2-YOLO转换脚本\" class=\"headerlink\" title=\"3.2 YOLO转换脚本\"></a>3.2 YOLO转换脚本</h2><p><code>Python</code>转换脚本如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># @Author    : justlovesmile</span></span><br><span class=\"line\"><span class=\"comment\"># @Date      : 2021/9/8 20:28</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm.auto <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil <span class=\"keyword\">as</span> sh</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> xml.etree.cElementTree <span class=\"keyword\">as</span> et</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> xml.etree.ElementTree <span class=\"keyword\">as</span> et</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mkdir</span>(<span class=\"params\">path</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(path):</span><br><span class=\"line\">        os.makedirs(path)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;The path (<span class=\"subst\">&#123;path&#125;</span>) already exists.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xml2yolo</span>(<span class=\"params\">xmlpath,savepath,classes=&#123;&#125;</span>):</span></span><br><span class=\"line\">    namemap = classes</span><br><span class=\"line\">    <span class=\"comment\">#try:</span></span><br><span class=\"line\">    <span class=\"comment\">#    with open(&#x27;classes_yolo.json&#x27;,&#x27;r&#x27;) as f:</span></span><br><span class=\"line\">    <span class=\"comment\">#        namemap=json.load(f)</span></span><br><span class=\"line\">    <span class=\"comment\">#except:</span></span><br><span class=\"line\">    <span class=\"comment\">#    pass</span></span><br><span class=\"line\">    rt = et.parse(xmlpath).getroot()</span><br><span class=\"line\">    w = <span class=\"built_in\">int</span>(rt.find(<span class=\"string\">&quot;size&quot;</span>).find(<span class=\"string\">&quot;width&quot;</span>).text)</span><br><span class=\"line\">    h = <span class=\"built_in\">int</span>(rt.find(<span class=\"string\">&quot;size&quot;</span>).find(<span class=\"string\">&quot;height&quot;</span>).text)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(savepath, <span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> rt.findall(<span class=\"string\">&quot;object&quot;</span>):</span><br><span class=\"line\">            name = obj.find(<span class=\"string\">&quot;name&quot;</span>).text</span><br><span class=\"line\">            xmin = <span class=\"built_in\">int</span>(obj.find(<span class=\"string\">&quot;bndbox&quot;</span>).find(<span class=\"string\">&quot;xmin&quot;</span>).text)</span><br><span class=\"line\">            ymin = <span class=\"built_in\">int</span>(obj.find(<span class=\"string\">&quot;bndbox&quot;</span>).find(<span class=\"string\">&quot;ymin&quot;</span>).text)</span><br><span class=\"line\">            xmax = <span class=\"built_in\">int</span>(obj.find(<span class=\"string\">&quot;bndbox&quot;</span>).find(<span class=\"string\">&quot;xmax&quot;</span>).text)</span><br><span class=\"line\">            ymax = <span class=\"built_in\">int</span>(obj.find(<span class=\"string\">&quot;bndbox&quot;</span>).find(<span class=\"string\">&quot;ymax&quot;</span>).text)</span><br><span class=\"line\">            f.write(</span><br><span class=\"line\">                <span class=\"string\">f&quot;<span class=\"subst\">&#123;namemap[name]&#125;</span> <span class=\"subst\">&#123;(xmin+xmax)/w/<span class=\"number\">2.</span>&#125;</span> <span class=\"subst\">&#123;(ymin+ymax)/h/<span class=\"number\">2.</span>&#125;</span> <span class=\"subst\">&#123;(xmax-xmin)/w&#125;</span> <span class=\"subst\">&#123;(ymax-ymin)/h&#125;</span>&quot;</span></span><br><span class=\"line\">                + <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">trainval</span>(<span class=\"params\">xmlroot,imgroot,saveroot,errorId=[],classes=&#123;&#125;,tvp=<span class=\"number\">1.0</span>,trp=<span class=\"number\">0.9</span></span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># assert</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> tvp&lt;=<span class=\"number\">1.0</span> <span class=\"keyword\">and</span> trp &lt;=<span class=\"number\">1.0</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(classes)&gt;<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># create dirs</span></span><br><span class=\"line\">    imglabel = [<span class=\"string\">&#x27;images&#x27;</span>,<span class=\"string\">&#x27;labels&#x27;</span>]</span><br><span class=\"line\">    trainvaltest = [<span class=\"string\">&#x27;train&#x27;</span>,<span class=\"string\">&#x27;val&#x27;</span>,<span class=\"string\">&#x27;test&#x27;</span>]</span><br><span class=\"line\">    mkdir(saveroot)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> imglabel:</span><br><span class=\"line\">        mkdir(os.path.join(saveroot,r))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> trainvaltest:</span><br><span class=\"line\">            mkdir(os.path.join(saveroot,r,s))</span><br><span class=\"line\">    <span class=\"comment\">#train / val</span></span><br><span class=\"line\">    trainval_percent = tvp</span><br><span class=\"line\">    train_percent = trp</span><br><span class=\"line\">    val_percent = <span class=\"number\">1</span> - train_percent <span class=\"keyword\">if</span> train_percent&lt;<span class=\"number\">1.0</span> <span class=\"keyword\">else</span> <span class=\"number\">0.15</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    total_img = os.listdir(imgroot)</span><br><span class=\"line\">    num = <span class=\"built_in\">len</span>(total_img)</span><br><span class=\"line\">    list_index = <span class=\"built_in\">range</span>(num)</span><br><span class=\"line\">    tv = <span class=\"built_in\">int</span>(num * trainval_percent)</span><br><span class=\"line\">    tr = <span class=\"built_in\">int</span>(tv * train_percent)</span><br><span class=\"line\">    va = <span class=\"built_in\">int</span>(tv * val_percent)</span><br><span class=\"line\">    trainval = random.sample(list_index, tv) <span class=\"comment\"># trainset and valset</span></span><br><span class=\"line\">    train = random.sample(trainval, tr) <span class=\"comment\"># trainset</span></span><br><span class=\"line\">    val = random.sample(trainval, va) <span class=\"comment\">#valset, use it only when train_percent = 1 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;trainval_percent:<span class=\"subst\">&#123;trainval_percent&#125;</span>,train_percent:<span class=\"subst\">&#123;train_percent&#125;</span>,val_percent:<span class=\"subst\">&#123;val_percent&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(list_index):</span><br><span class=\"line\">        name = total_img[i]</span><br><span class=\"line\">        op = os.path.join(imgroot,name)</span><br><span class=\"line\">        file_id = os.path.splitext(os.path.basename(name))[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> file_id <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> errorId:</span><br><span class=\"line\">            xmlp = os.path.join(xmlroot,file_id+<span class=\"string\">&#x27;.xml&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> trainval:</span><br><span class=\"line\">                <span class=\"comment\"># trainset and valset</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> train:</span><br><span class=\"line\">                    sp = os.path.join(saveroot,<span class=\"string\">&quot;images&quot;</span>,<span class=\"string\">&quot;train&quot;</span>,name)</span><br><span class=\"line\">                    xml2yolo(xmlp,os.path.join(saveroot,<span class=\"string\">&quot;labels&quot;</span>,<span class=\"string\">&quot;train&quot;</span>,file_id+<span class=\"string\">&#x27;.txt&#x27;</span>),classes)</span><br><span class=\"line\">                    sh.copy(op,sp)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    sp = os.path.join(saveroot,<span class=\"string\">&quot;images&quot;</span>,<span class=\"string\">&quot;val&quot;</span>,name)</span><br><span class=\"line\">                    xml2yolo(xmlp,os.path.join(saveroot,<span class=\"string\">&quot;labels&quot;</span>,<span class=\"string\">&quot;val&quot;</span>,file_id+<span class=\"string\">&#x27;.txt&#x27;</span>),classes)</span><br><span class=\"line\">                    sh.copy(op,sp)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (train_percent==<span class=\"number\">1.0</span> <span class=\"keyword\">and</span> i <span class=\"keyword\">in</span> val):</span><br><span class=\"line\">                    sp = os.path.join(saveroot,<span class=\"string\">&quot;images&quot;</span>,<span class=\"string\">&quot;val&quot;</span>,name)</span><br><span class=\"line\">                    xml2yolo(xmlp,os.path.join(saveroot,<span class=\"string\">&quot;labels&quot;</span>,<span class=\"string\">&quot;val&quot;</span>,file_id+<span class=\"string\">&#x27;.txt&#x27;</span>),classes)</span><br><span class=\"line\">                    sh.copy(op,sp)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># testset</span></span><br><span class=\"line\">                sp = os.path.join(saveroot,<span class=\"string\">&quot;images&quot;</span>,<span class=\"string\">&quot;test&quot;</span>,name)</span><br><span class=\"line\">                xml2yolo(xmlp,os.path.join(saveroot,<span class=\"string\">&quot;labels&quot;</span>,<span class=\"string\">&quot;test&quot;</span>,file_id+<span class=\"string\">&#x27;.txt&#x27;</span>),classes)</span><br><span class=\"line\">                sh.copy(op,sp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maketxt</span>(<span class=\"params\"><span class=\"built_in\">dir</span>,saveroot,filename</span>):</span></span><br><span class=\"line\">    savetxt = os.path.join(saveroot,filename)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(savetxt,<span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(os.listdir(<span class=\"built_in\">dir</span>)):</span><br><span class=\"line\">            f.write(os.path.join(<span class=\"built_in\">dir</span>,i)+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">                           </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toyolo</span>(<span class=\"params\">xmlroot,imgroot,saveroot,errorId=[],classes=&#123;&#125;,tvp=<span class=\"number\">1</span>,train_percent=<span class=\"number\">0.9</span></span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># toyolo main function</span></span><br><span class=\"line\">    trainval(xmlroot,imgroot,saveroot,errorId,classes,tvp,train_percent)</span><br><span class=\"line\">    maketxt(os.path.join(saveroot,<span class=\"string\">&quot;images&quot;</span>,<span class=\"string\">&quot;train&quot;</span>),saveroot,<span class=\"string\">&quot;train.txt&quot;</span>)</span><br><span class=\"line\">    maketxt(os.path.join(saveroot,<span class=\"string\">&quot;images&quot;</span>,<span class=\"string\">&quot;val&quot;</span>),saveroot,<span class=\"string\">&quot;val.txt&quot;</span>)</span><br><span class=\"line\">    maketxt(os.path.join(saveroot,<span class=\"string\">&quot;images&quot;</span>,<span class=\"string\">&quot;test&quot;</span>),saveroot,<span class=\"string\">&quot;test.txt&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dataset to yolo format success.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>():</span></span><br><span class=\"line\">    box_root = <span class=\"string\">&quot;E:/MyProject/Dataset/hwtest/annotations&quot;</span></span><br><span class=\"line\">    image_root = <span class=\"string\">&quot;E:/MyProject/Dataset/hwtest/images&quot;</span></span><br><span class=\"line\">    output_root = <span class=\"string\">&quot;E:/MyProject/Dataset/yolo&quot;</span></span><br><span class=\"line\">    classes = &#123;<span class=\"string\">&quot;liner&quot;</span>: <span class=\"number\">0</span>,<span class=\"string\">&quot;bulk carrier&quot;</span>: <span class=\"number\">1</span>,<span class=\"string\">&quot;warship&quot;</span>: <span class=\"number\">2</span>,<span class=\"string\">&quot;sailboat&quot;</span>: <span class=\"number\">3</span>,<span class=\"string\">&quot;canoe&quot;</span>: <span class=\"number\">4</span>,<span class=\"string\">&quot;container ship&quot;</span>: <span class=\"number\">5</span>,<span class=\"string\">&quot;fishing boat&quot;</span>: <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">    errorId = []</span><br><span class=\"line\">    train_percent = <span class=\"number\">0.9</span></span><br><span class=\"line\">    toyolo(box_root,image_root,output_root,errorId,classes,train_percent=train_percent)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    test()</span><br></pre></td></tr></table></figure>\n\n<p>按照此脚本，将会在输出文件夹中生成以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-yolo/</span><br><span class=\"line\">\t|-images/</span><br><span class=\"line\">\t\t|-train/</span><br><span class=\"line\">\t\t\t|-1.jpg</span><br><span class=\"line\">\t\t\t|-2.jpg</span><br><span class=\"line\">\t\t|-test/</span><br><span class=\"line\">\t\t\t|-3.jpg</span><br><span class=\"line\">\t\t\t|-4.jpg</span><br><span class=\"line\">\t\t|-val/</span><br><span class=\"line\">\t\t\t|-5.jpg</span><br><span class=\"line\">\t\t\t|-6.jpg</span><br><span class=\"line\">\t|-labels/</span><br><span class=\"line\">\t\t|-train/</span><br><span class=\"line\">\t\t\t|-1.txt</span><br><span class=\"line\">\t\t\t|-2.txt</span><br><span class=\"line\">\t\t|-test/</span><br><span class=\"line\">\t\t\t|-3.txt</span><br><span class=\"line\">\t\t\t|-4.txt</span><br><span class=\"line\">\t\t|-val/</span><br><span class=\"line\">\t\t\t|-5.txt</span><br><span class=\"line\">\t\t\t|-6.txt</span><br><span class=\"line\">\t|-train.txt</span><br><span class=\"line\">\t|-test.txt</span><br><span class=\"line\">\t|-val.txt</span><br></pre></td></tr></table></figure>\n\n","more":"<p>目标检测是计算机视觉任务中的一个重要研究方向，其用于解决对数码图像中特定种类的可视目标实例的检测问题。目标检测作为计算机视觉的根本性问题之一，是其他诸多计算机视觉任务，例如图像描述生成，实例分割和目标跟踪的基础以及前提。而在解决此类问题时，我们常常需要使用自己的脚本或者利用标注工具生成数据集，数据集格式往往会多种多样，因此对于目标检测任务而言，为了更好地兼容训练，大多数目标检测模型框架会默认支持几种常用的数据集标注格式，常见的分别是COCO，Pascal VOC，YOLO等等。本文主要介绍上述几种数据集格式以及我写的Python脚本（一般需要根据实际情况再改改）。</p>\n<h1 id=\"1-COCO\"><a href=\"#1-COCO\" class=\"headerlink\" title=\"1. COCO\"></a>1. COCO</h1><h2 id=\"1-1-COCO数据集格式\"><a href=\"#1-1-COCO数据集格式\" class=\"headerlink\" title=\"1.1 COCO数据集格式\"></a>1.1 COCO数据集格式</h2><p>COCO（Common Objects in COtext）数据集，是一个大规模的，适用于目标检测，图像分割，Image Captioning任务的数据集，其标注格式是最常用的几种格式之一。目前使用较多的是COCO2017数据集。其官网为<a href=\"https://cocodataset.org/\">COCO - Common Objects in Context (cocodataset.org)</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/202109111535004.png\" alt=\"image-20210911153516753\"></p>\n<p>COCO数据集主要包含图像（jpg或者png等等）和标注文件（json），其数据集格式如下(<code>/</code>代表文件夹)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-coco/</span><br><span class=\"line\">    |-train2017/</span><br><span class=\"line\">    \t|-1.jpg</span><br><span class=\"line\">    \t|-2.jpg</span><br><span class=\"line\">    |-val2017/</span><br><span class=\"line\">    \t|-3.jpg</span><br><span class=\"line\">    \t|-4.jpg</span><br><span class=\"line\">    |-test2017/</span><br><span class=\"line\">    \t|-5.jpg</span><br><span class=\"line\">    \t|-6.jpg</span><br><span class=\"line\">    |-annotations/</span><br><span class=\"line\">    \t|-instances_train2017.json</span><br><span class=\"line\">    \t|-instances_val2017.json</span><br><span class=\"line\">    \t|-*.json</span><br></pre></td></tr></table></figure>\n\n<p><code>train2017</code>以及<code>val2017</code>这两个文件夹中存储的是训练集和验证集的图像，而<code>test2017</code>文件夹中存储的是测试集的信息，可以只是图像，也可以包含标注，一般是单独使用的。</p>\n<p><code>annotations</code>文件夹中的文件就是标注文件，如果你有<code>xml</code>文件，通常需要转换成<code>json</code>格式，其格式如下（更详细的可以参考<a href=\"https://cocodataset.org/#format-data\">官网</a>）：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;info&quot;</span>: info, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;images&quot;</span>: [image], <span class=\"comment\">//列表</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;annotations&quot;</span>: [annotation], <span class=\"comment\">//列表</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;categories&quot;</span>: [category], <span class=\"comment\">//列表</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;licenses&quot;</span>: [license], <span class=\"comment\">//列表</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>info</code>为整个数据集的信息，包括年份，版本，描述等等信息，如果只是完成训练任务，其实不太重要，如下所示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于训练，不是那么的重要</span></span><br><span class=\"line\">info&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;year&quot;</span>: int, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;version&quot;</span>: str, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;description&quot;</span>: str, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;contributor&quot;</span>: str, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;url&quot;</span>: str, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;date_created&quot;</span>: datetime,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>image</code>为图像的基本信息，包括序号，宽高，文件名等等信息，其中的序号（<code>id</code>）需要和后面的<code>annotations</code>中的标注所属图片序号对应如下所示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>: int, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;width&quot;</span>: int, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;height&quot;</span>: int, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;file_name&quot;</span>: str, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;license&quot;</span>: int,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;flickr_url&quot;</span>: str,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;coco_url&quot;</span>: str,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;date_captured&quot;</span>: datetime, </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>annotation</code>是最重要的标注信息，包括序号，所属图像序号，类别序号等等信息，如下所示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">annotation&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>: int, <span class=\"comment\">//标注id</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;image_id&quot;</span>: int, <span class=\"comment\">//所属图像id</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;category_id&quot;</span>: int, <span class=\"comment\">//类别id</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;segmentation&quot;</span>: RLE or [polygon], <span class=\"comment\">//图像分割标注</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;area&quot;</span>: float, <span class=\"comment\">//区域面积</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;bbox&quot;</span>: [x,y,width,height], <span class=\"comment\">//目标框左上角坐标以及宽高</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;iscrowd&quot;</span>: <span class=\"number\">0</span> or <span class=\"number\">1</span>, <span class=\"comment\">//是否密集</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>category</code>代表类别信息，包括父类别，类别序号以及类别名称，如下所示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">category&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>: int, <span class=\"comment\">//类别序号</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span>: str, <span class=\"comment\">//类别名称</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;supercategory&quot;</span>: str, <span class=\"comment\">//父类别</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>license</code>代表数据集的协议许可信息，包括序号，协议名称以及链接信息，如下所示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于训练，不重要</span></span><br><span class=\"line\">license&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span>: int, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span>: str, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;url&quot;</span>: str,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们来看一个简单的示例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">&quot;info&quot;</span>: &#123;略&#125;, <span class=\"attr\">&quot;images&quot;</span>: [&#123;<span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">1</span>, <span class=\"attr\">&quot;file_name&quot;</span>: <span class=\"string\">&quot;1.jpg&quot;</span>, <span class=\"attr\">&quot;height&quot;</span>: <span class=\"number\">334</span>, <span class=\"attr\">&quot;width&quot;</span>: <span class=\"number\">500</span>&#125;, &#123;<span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">2</span>, <span class=\"attr\">&quot;file_name&quot;</span>: <span class=\"string\">&quot;2.jpg&quot;</span>, <span class=\"attr\">&quot;height&quot;</span>: <span class=\"number\">445</span>, <span class=\"attr\">&quot;width&quot;</span>: <span class=\"number\">556</span>&#125;], <span class=\"attr\">&quot;annotations&quot;</span>: [&#123;<span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">1</span>, <span class=\"attr\">&quot;area&quot;</span>: <span class=\"number\">40448</span>, <span class=\"attr\">&quot;iscrowd&quot;</span>: <span class=\"number\">0</span>, <span class=\"attr\">&quot;image_id&quot;</span>: <span class=\"number\">1</span>, <span class=\"attr\">&quot;bbox&quot;</span>: [<span class=\"number\">246</span>, <span class=\"number\">61</span>, <span class=\"number\">128</span>, <span class=\"number\">316</span>], <span class=\"attr\">&quot;category_id&quot;</span>: <span class=\"number\">3</span>, <span class=\"attr\">&quot;segmentation&quot;</span>: []&#125;, &#123;<span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">2</span>, <span class=\"attr\">&quot;area&quot;</span>: <span class=\"number\">40448</span>, <span class=\"attr\">&quot;iscrowd&quot;</span>: <span class=\"number\">0</span>, <span class=\"attr\">&quot;image_id&quot;</span>: <span class=\"number\">1</span>, <span class=\"attr\">&quot;bbox&quot;</span>: [<span class=\"number\">246</span>, <span class=\"number\">61</span>, <span class=\"number\">128</span>, <span class=\"number\">316</span>], <span class=\"attr\">&quot;category_id&quot;</span>: <span class=\"number\">2</span>, <span class=\"attr\">&quot;segmentation&quot;</span>: []&#125;, &#123;<span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">3</span>, <span class=\"attr\">&quot;area&quot;</span>: <span class=\"number\">40448</span>, <span class=\"attr\">&quot;iscrowd&quot;</span>: <span class=\"number\">0</span>, <span class=\"attr\">&quot;image_id&quot;</span>: <span class=\"number\">2</span>, <span class=\"attr\">&quot;bbox&quot;</span>: [<span class=\"number\">246</span>, <span class=\"number\">61</span>, <span class=\"number\">128</span>, <span class=\"number\">316</span>], <span class=\"attr\">&quot;category_id&quot;</span>: <span class=\"number\">1</span>, <span class=\"attr\">&quot;segmentation&quot;</span>: []&#125;], <span class=\"attr\">&quot;categories&quot;</span>: [&#123;<span class=\"attr\">&quot;supercategory&quot;</span>: <span class=\"string\">&quot;none&quot;</span>, <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">1</span>, <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;liner&quot;</span>&#125;,&#123;<span class=\"attr\">&quot;supercategory&quot;</span>: <span class=\"string\">&quot;none&quot;</span>, <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">2</span>, <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;containership&quot;</span>&#125;,&#123;<span class=\"attr\">&quot;supercategory&quot;</span>: <span class=\"string\">&quot;none&quot;</span>, <span class=\"attr\">&quot;id&quot;</span>: <span class=\"number\">3</span>, <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;bulkcarrier&quot;</span>&#125;], <span class=\"attr\">&quot;licenses&quot;</span>: [&#123;略&#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-COCO转换脚本\"><a href=\"#1-2-COCO转换脚本\" class=\"headerlink\" title=\"1.2 COCO转换脚本\"></a>1.2 COCO转换脚本</h2><p><code>Python转换脚本</code>如下所示，需要准备<code>图像</code>和<code>xml</code>标注文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># @Author    : justlovesmile</span></span><br><span class=\"line\"><span class=\"comment\"># @Date      : 2021/9/8 15:36</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os, random, json</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil <span class=\"keyword\">as</span> sh</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm.auto <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> xml.etree.ElementTree <span class=\"keyword\">as</span> xmlET</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mkdir</span>(<span class=\"params\">path</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(path):</span><br><span class=\"line\">        os.makedirs(path)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;The path (<span class=\"subst\">&#123;path&#125;</span>) already exists.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readxml</span>(<span class=\"params\">file</span>):</span></span><br><span class=\"line\">    tree = xmlET.parse(file)</span><br><span class=\"line\">    <span class=\"comment\">#图片尺寸字段</span></span><br><span class=\"line\">    size = tree.find(<span class=\"string\">&#x27;size&#x27;</span>)</span><br><span class=\"line\">    width = <span class=\"built_in\">int</span>(size.find(<span class=\"string\">&#x27;width&#x27;</span>).text)</span><br><span class=\"line\">    height = <span class=\"built_in\">int</span>(size.find(<span class=\"string\">&#x27;height&#x27;</span>).text)</span><br><span class=\"line\">    <span class=\"comment\">#目标字段</span></span><br><span class=\"line\">    objs = tree.findall(<span class=\"string\">&#x27;object&#x27;</span>)</span><br><span class=\"line\">    bndbox = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> objs:</span><br><span class=\"line\">        label = obj.find(<span class=\"string\">&quot;name&quot;</span>).text</span><br><span class=\"line\">        bnd = obj.find(<span class=\"string\">&quot;bndbox&quot;</span>)</span><br><span class=\"line\">        xmin = <span class=\"built_in\">int</span>(bnd.find(<span class=\"string\">&quot;xmin&quot;</span>).text)</span><br><span class=\"line\">        ymin = <span class=\"built_in\">int</span>(bnd.find(<span class=\"string\">&quot;ymin&quot;</span>).text)</span><br><span class=\"line\">        xmax = <span class=\"built_in\">int</span>(bnd.find(<span class=\"string\">&quot;xmax&quot;</span>).text)</span><br><span class=\"line\">        ymax = <span class=\"built_in\">int</span>(bnd.find(<span class=\"string\">&quot;ymax&quot;</span>).text)</span><br><span class=\"line\">        bbox = [xmin, ymin, xmax, ymax, label]</span><br><span class=\"line\">        bndbox.append(bbox)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[width, height], bndbox]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tococo</span>(<span class=\"params\">xml_root, image_root, output_root,classes=&#123;&#125;,errorId=[],train_percent=<span class=\"number\">0.9</span></span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># assert</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> train_percent&lt;=<span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(classes)&gt;<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># define the root path</span></span><br><span class=\"line\">    train_root = os.path.join(output_root, <span class=\"string\">&quot;train2017&quot;</span>)</span><br><span class=\"line\">    val_root = os.path.join(output_root, <span class=\"string\">&quot;val2017&quot;</span>)</span><br><span class=\"line\">    ann_root = os.path.join(output_root, <span class=\"string\">&quot;annotations&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># initialize train and val dict</span></span><br><span class=\"line\">    train_content = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;images&quot;</span>: [],  <span class=\"comment\"># &#123;&quot;file_name&quot;: &quot;09780.jpg&quot;, &quot;height&quot;: 334, &quot;width&quot;: 500, &quot;id&quot;: 9780&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;annotations&quot;</span>: [],<span class=\"comment\"># &#123;&quot;area&quot;: 40448, &quot;iscrowd&quot;: 0, &quot;image_id&quot;: 1, &quot;bbox&quot;: [246, 61, 128, 316], &quot;category_id&quot;: 5, &quot;id&quot;: 1, &quot;segmentation&quot;: []&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;categories&quot;</span>: []  <span class=\"comment\"># &#123;&quot;supercategory&quot;: &quot;none&quot;, &quot;id&quot;: 1, &quot;name&quot;: &quot;liner&quot;&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    val_content = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;images&quot;</span>: [],  <span class=\"comment\"># &#123;&quot;file_name&quot;: &quot;09780.jpg&quot;, &quot;height&quot;: 334, &quot;width&quot;: 500, &quot;id&quot;: 9780&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;annotations&quot;</span>: [],<span class=\"comment\"># &#123;&quot;area&quot;: 40448, &quot;iscrowd&quot;: 0, &quot;image_id&quot;: 1, &quot;bbox&quot;: [246, 61, 128, 316], &quot;category_id&quot;: 5, &quot;id&quot;: 1, &quot;segmentation&quot;: []&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;categories&quot;</span>: []  <span class=\"comment\"># &#123;&quot;supercategory&quot;: &quot;none&quot;, &quot;id&quot;: 1, &quot;name&quot;: &quot;liner&quot;&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    train_json = <span class=\"string\">&#x27;instances_train2017.json&#x27;</span></span><br><span class=\"line\">    val_json = <span class=\"string\">&#x27;instances_val2017.json&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># divide the trainset and valset</span></span><br><span class=\"line\">    images = os.listdir(image_root)</span><br><span class=\"line\">    total_num = <span class=\"built_in\">len</span>(images)</span><br><span class=\"line\">    train_percent = train_percent</span><br><span class=\"line\">    train_num = <span class=\"built_in\">int</span>(total_num * train_percent)</span><br><span class=\"line\">    train_file = <span class=\"built_in\">sorted</span>(random.sample(images, train_num))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mkdir(output_root):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> mkdir(train_root) <span class=\"keyword\">and</span> mkdir(val_root) <span class=\"keyword\">and</span> mkdir(ann_root):</span><br><span class=\"line\">            idx1, idx2, dx1, dx2 = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> tqdm(images):</span><br><span class=\"line\">                name=os.path.splitext(os.path.basename(file))[<span class=\"number\">0</span>]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> name <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> errorId:</span><br><span class=\"line\">                    res = readxml(os.path.join(xml_root, name + <span class=\"string\">&#x27;.xml&#x27;</span>))</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> file <span class=\"keyword\">in</span> train_file:</span><br><span class=\"line\">                        idx1 += <span class=\"number\">1</span></span><br><span class=\"line\">                        sh.copy(os.path.join(image_root, file), train_root)</span><br><span class=\"line\">                        train_content[<span class=\"string\">&#x27;images&#x27;</span>].append(</span><br><span class=\"line\">                            &#123;<span class=\"string\">&quot;file_name&quot;</span>: file, <span class=\"string\">&quot;width&quot;</span>: res[<span class=\"number\">0</span>][<span class=\"number\">0</span>], <span class=\"string\">&quot;height&quot;</span>: res[<span class=\"number\">0</span>][<span class=\"number\">1</span>], <span class=\"string\">&quot;id&quot;</span>: idx1&#125;)</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> res[<span class=\"number\">1</span>]:</span><br><span class=\"line\">                            dx1 += <span class=\"number\">1</span></span><br><span class=\"line\">                            x = b[<span class=\"number\">0</span>]</span><br><span class=\"line\">                            y = b[<span class=\"number\">1</span>]</span><br><span class=\"line\">                            w = b[<span class=\"number\">2</span>] - b[<span class=\"number\">0</span>]</span><br><span class=\"line\">                            h = b[<span class=\"number\">3</span>] - b[<span class=\"number\">1</span>]</span><br><span class=\"line\">                            train_content[<span class=\"string\">&#x27;annotations&#x27;</span>].append(</span><br><span class=\"line\">                                &#123;<span class=\"string\">&quot;area&quot;</span>: w * h, <span class=\"string\">&quot;iscrowd&quot;</span>: <span class=\"number\">0</span>, <span class=\"string\">&quot;image_id&quot;</span>: idx1, <span class=\"string\">&quot;bbox&quot;</span>: [x, y, w, h],</span><br><span class=\"line\">                                 <span class=\"string\">&quot;category_id&quot;</span>: classes[b[<span class=\"number\">4</span>]], <span class=\"string\">&quot;id&quot;</span>: dx1, <span class=\"string\">&quot;segmentation&quot;</span>: []&#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        idx2 += <span class=\"number\">1</span></span><br><span class=\"line\">                        sh.copy(os.path.join(image_root, file), val_root)</span><br><span class=\"line\">                        val_content[<span class=\"string\">&#x27;images&#x27;</span>].append(</span><br><span class=\"line\">                            &#123;<span class=\"string\">&quot;file_name&quot;</span>: file, <span class=\"string\">&quot;width&quot;</span>: res[<span class=\"number\">0</span>][<span class=\"number\">0</span>], <span class=\"string\">&quot;height&quot;</span>: res[<span class=\"number\">0</span>][<span class=\"number\">1</span>], <span class=\"string\">&quot;id&quot;</span>: idx2&#125;)</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> res[<span class=\"number\">1</span>]:</span><br><span class=\"line\">                            dx2 += <span class=\"number\">1</span></span><br><span class=\"line\">                            x = b[<span class=\"number\">0</span>]</span><br><span class=\"line\">                            y = b[<span class=\"number\">1</span>]</span><br><span class=\"line\">                            w = b[<span class=\"number\">2</span>] - b[<span class=\"number\">0</span>]</span><br><span class=\"line\">                            h = b[<span class=\"number\">3</span>] - b[<span class=\"number\">1</span>]</span><br><span class=\"line\">                            val_content[<span class=\"string\">&#x27;annotations&#x27;</span>].append(</span><br><span class=\"line\">                                &#123;<span class=\"string\">&quot;area&quot;</span>: w * h, <span class=\"string\">&quot;iscrowd&quot;</span>: <span class=\"number\">0</span>, <span class=\"string\">&quot;image_id&quot;</span>: idx2, <span class=\"string\">&quot;bbox&quot;</span>: [x, y, w, h],</span><br><span class=\"line\">                                 <span class=\"string\">&quot;category_id&quot;</span>: classes[b[<span class=\"number\">4</span>]], <span class=\"string\">&quot;id&quot;</span>: dx2, <span class=\"string\">&quot;segmentation&quot;</span>: []&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> classes.items():</span><br><span class=\"line\">                train_content[<span class=\"string\">&#x27;categories&#x27;</span>].append(&#123;<span class=\"string\">&quot;supercategory&quot;</span>: <span class=\"string\">&quot;none&quot;</span>, <span class=\"string\">&quot;id&quot;</span>: j, <span class=\"string\">&quot;name&quot;</span>: i&#125;)</span><br><span class=\"line\">                val_content[<span class=\"string\">&#x27;categories&#x27;</span>].append(&#123;<span class=\"string\">&quot;supercategory&quot;</span>: <span class=\"string\">&quot;none&quot;</span>, <span class=\"string\">&quot;id&quot;</span>: j, <span class=\"string\">&quot;name&quot;</span>: i&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(ann_root, train_json), <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                json.dump(train_content, f)</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(ann_root, val_json), <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                json.dump(val_content, f)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Number of Train Images:&quot;</span>, <span class=\"built_in\">len</span>(os.listdir(train_root)))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Number of Val Images:&quot;</span>, <span class=\"built_in\">len</span>(os.listdir(val_root)))</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>():</span></span><br><span class=\"line\">    box_root = <span class=\"string\">&quot;E:/MyProject/Dataset/hwtest/annotations&quot;</span> <span class=\"comment\">#xml文件夹</span></span><br><span class=\"line\">    image_root = <span class=\"string\">&quot;E:/MyProject/Dataset/hwtest/images&quot;</span> <span class=\"comment\">#image文件夹</span></span><br><span class=\"line\">    output_root = <span class=\"string\">&quot;E:/MyProject/Dataset/coco&quot;</span> <span class=\"comment\">#输出文件夹</span></span><br><span class=\"line\">    classes = &#123;<span class=\"string\">&quot;liner&quot;</span>: <span class=\"number\">0</span>,<span class=\"string\">&quot;bulk carrier&quot;</span>: <span class=\"number\">1</span>,<span class=\"string\">&quot;warship&quot;</span>: <span class=\"number\">2</span>,<span class=\"string\">&quot;sailboat&quot;</span>: <span class=\"number\">3</span>,<span class=\"string\">&quot;canoe&quot;</span>: <span class=\"number\">4</span>,<span class=\"string\">&quot;container ship&quot;</span>: <span class=\"number\">5</span>,<span class=\"string\">&quot;fishing boat&quot;</span>: <span class=\"number\">6</span>&#125; <span class=\"comment\">#类别字典</span></span><br><span class=\"line\">    errorId = [] <span class=\"comment\">#脏数据id</span></span><br><span class=\"line\">    train_percent = <span class=\"number\">0.9</span> <span class=\"comment\">#训练集和验证集比例</span></span><br><span class=\"line\">    tococo(box_root, image_root, output_root,classes=classes,errorId=errorId,train_percent=train_percent)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    test()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-VOC\"><a href=\"#2-VOC\" class=\"headerlink\" title=\"2. VOC\"></a>2. VOC</h1><h2 id=\"2-1-VOC数据集格式\"><a href=\"#2-1-VOC数据集格式\" class=\"headerlink\" title=\"2.1 VOC数据集格式\"></a>2.1 VOC数据集格式</h2><p>VOC（Visual Object Classes）数据集来源于PASCAL VOC挑战赛，其主要任务有<code>Object Classification</code> 、<code>Object Detection</code>、<code>Object Segmentation</code>、<code>Human Layout</code>、<code>Action Classification</code>。其官网为<a href=\"http://host.robots.ox.ac.uk/pascal/VOC/\">The PASCAL Visual Object Classes Homepage (ox.ac.uk)</a>。其主要数据集有VOC2007以及VOC2012。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/202109111939729.png\" alt=\"image-20210911193933398\"></p>\n<p>VOC数据集主要包含图像（jpg或者png等等）和标注文件（xml），其数据集格式如下(<code>/</code>代表文件夹)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-VOC/</span><br><span class=\"line\">\t|-JPEGImages/</span><br><span class=\"line\">\t\t|-1.jpg</span><br><span class=\"line\">\t\t|-2.jpg</span><br><span class=\"line\">\t|-Annotations/</span><br><span class=\"line\">\t\t|-1.xml</span><br><span class=\"line\">\t\t|-2.xml</span><br><span class=\"line\">\t|-ImageSets/</span><br><span class=\"line\">\t\t|-Layout/</span><br><span class=\"line\">\t\t\t|-*.txt</span><br><span class=\"line\">\t\t|-Main/</span><br><span class=\"line\">\t\t\t|-train.txt</span><br><span class=\"line\">\t\t\t|-val.txt</span><br><span class=\"line\">\t\t\t|-trainval.txt</span><br><span class=\"line\">\t\t\t|-test.txt</span><br><span class=\"line\">\t\t|-Segmentation/</span><br><span class=\"line\">\t\t\t|-*.txt</span><br><span class=\"line\">\t\t|-Action/</span><br><span class=\"line\">\t\t\t|-*.txt</span><br><span class=\"line\">\t|-SegmentationClass/</span><br><span class=\"line\">\t|-SegmentationObject/</span><br></pre></td></tr></table></figure>\n\n<p>其中对于目标检测任务而言，最常用的以及必须的文件夹包括：<code>JPEGImages</code>，<code>Annotations</code>，<code>ImageSets/Main</code>。</p>\n<p><code>JPEGImages</code>里存放的是图像，而<code>Annotations</code>里存放的是<code>xml</code>标注文件，文件内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;annotation&gt;</span><br><span class=\"line\">\t&lt;folder&gt;VOC&lt;/folder&gt;            # 图像所在文件夹</span><br><span class=\"line\">\t&lt;filename&gt;000032.jpg&lt;/filename&gt; # 图像文件名</span><br><span class=\"line\">\t&lt;source&gt;                        # 图像源</span><br><span class=\"line\">\t\t&lt;database&gt;The VOC Database&lt;/database&gt;</span><br><span class=\"line\">\t\t&lt;annotation&gt;PASCAL VOC&lt;/annotation&gt;</span><br><span class=\"line\">\t\t&lt;image&gt;flickr&lt;/image&gt;</span><br><span class=\"line\">\t&lt;/source&gt;</span><br><span class=\"line\">\t&lt;size&gt;                          # 图像尺寸信息</span><br><span class=\"line\">\t\t&lt;width&gt;500&lt;/width&gt;    # 图像宽度</span><br><span class=\"line\">\t\t&lt;height&gt;281&lt;/height&gt;  # 图像高度</span><br><span class=\"line\">\t\t&lt;depth&gt;3&lt;/depth&gt;      # 图像通道数</span><br><span class=\"line\">\t&lt;/size&gt;</span><br><span class=\"line\">\t&lt;segmented&gt;0&lt;/segmented&gt;  # 图像是否用于分割，0代表不适用，对目标检测而言没关系</span><br><span class=\"line\">\t&lt;object&gt;                  # 一个目标对象的信息</span><br><span class=\"line\">\t\t&lt;name&gt;aeroplane&lt;/name&gt;    # 目标的类别名</span><br><span class=\"line\">\t\t&lt;pose&gt;Frontal&lt;/pose&gt;      # 拍摄角度，若无一般为Unspecified</span><br><span class=\"line\">\t\t&lt;truncated&gt;0&lt;/truncated&gt;  # 是否被截断，0表示完整未截断</span><br><span class=\"line\">\t\t&lt;difficult&gt;0&lt;/difficult&gt;  # 是否难以识别，0表示不难识别</span><br><span class=\"line\">\t\t&lt;bndbox&gt;            # 边界框信息</span><br><span class=\"line\">\t\t\t&lt;xmin&gt;104&lt;/xmin&gt;  # 左上角x</span><br><span class=\"line\">\t\t\t&lt;ymin&gt;78&lt;/ymin&gt;   # 左上角y</span><br><span class=\"line\">\t\t\t&lt;xmax&gt;375&lt;/xmax&gt;  # 右下角x</span><br><span class=\"line\">\t\t\t&lt;ymax&gt;183&lt;/ymax&gt;  # 右下角y</span><br><span class=\"line\">\t\t&lt;/bndbox&gt;</span><br><span class=\"line\">\t&lt;/object&gt;</span><br><span class=\"line\">    # 下面是其他目标的信息，这里略掉</span><br><span class=\"line\">\t&lt;object&gt;</span><br><span class=\"line\">        其他object信息，这里省略</span><br><span class=\"line\">\t&lt;/object&gt;</span><br><span class=\"line\">&lt;/annotation&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-VOC转换脚本\"><a href=\"#2-2-VOC转换脚本\" class=\"headerlink\" title=\"2.2 VOC转换脚本\"></a>2.2 VOC转换脚本</h2><p>下面这个脚本，只适用于有图像和xml文件的情况下，coco转voc格式以后有需要再写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># @Author    : justlovesmile</span></span><br><span class=\"line\"><span class=\"comment\"># @Date      : 2021/9/8 21:01</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os,random</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm.auto <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil <span class=\"keyword\">as</span> sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mkdir</span>(<span class=\"params\">path</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(path):</span><br><span class=\"line\">        os.mkdir(path)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;The path (<span class=\"subst\">&#123;path&#125;</span>) already exists.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tovoc</span>(<span class=\"params\">xmlroot,imgroot,saveroot,errorId=[],classes=&#123;&#125;,tvp=<span class=\"number\">1.0</span>,trp=<span class=\"number\">0.9</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    参数：</span></span><br><span class=\"line\"><span class=\"string\">        root：数据集存放根目录</span></span><br><span class=\"line\"><span class=\"string\">    功能：</span></span><br><span class=\"line\"><span class=\"string\">        加载数据，并保存为VOC格式</span></span><br><span class=\"line\"><span class=\"string\">    加载后的格式：</span></span><br><span class=\"line\"><span class=\"string\">    VOC/</span></span><br><span class=\"line\"><span class=\"string\">      Annotations/</span></span><br><span class=\"line\"><span class=\"string\">        - **.xml</span></span><br><span class=\"line\"><span class=\"string\">      JPEGImages/</span></span><br><span class=\"line\"><span class=\"string\">        - **.jpg</span></span><br><span class=\"line\"><span class=\"string\">      ImageSets/</span></span><br><span class=\"line\"><span class=\"string\">        Main/</span></span><br><span class=\"line\"><span class=\"string\">          - train.txt</span></span><br><span class=\"line\"><span class=\"string\">          - test.txt</span></span><br><span class=\"line\"><span class=\"string\">          - val.txt</span></span><br><span class=\"line\"><span class=\"string\">          - trainval.txt</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># assert</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(classes)&gt;<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># init path</span></span><br><span class=\"line\">    VOC = saveroot</span><br><span class=\"line\">    ann_path = os.path.join(VOC, <span class=\"string\">&#x27;Annotations&#x27;</span>)</span><br><span class=\"line\">    img_path = os.path.join(VOC,<span class=\"string\">&#x27;JPEGImages&#x27;</span>)</span><br><span class=\"line\">    set_path = os.path.join(VOC,<span class=\"string\">&#x27;ImageSets&#x27;</span>)</span><br><span class=\"line\">    txt_path = os.path.join(set_path,<span class=\"string\">&#x27;Main&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># mkdirs </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> mkdir(VOC):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> mkdir(ann_path) <span class=\"keyword\">and</span> mkdir(img_path) <span class=\"keyword\">and</span> mkdir(set_path):</span><br><span class=\"line\">            mkdir(txt_path)</span><br><span class=\"line\"></span><br><span class=\"line\">    images = os.listdir(imgroot)</span><br><span class=\"line\">    list_index = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(images))</span><br><span class=\"line\">    <span class=\"comment\">#test and trainval set</span></span><br><span class=\"line\">    trainval_percent = tvp</span><br><span class=\"line\">    train_percent = trp</span><br><span class=\"line\">    val_percent = <span class=\"number\">1</span> - train_percent <span class=\"keyword\">if</span> train_percent&lt;<span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"number\">0.1</span></span><br><span class=\"line\">    total_num = <span class=\"built_in\">len</span>(images)</span><br><span class=\"line\">    trainval_num = <span class=\"built_in\">int</span>(total_num*trainval_percent)</span><br><span class=\"line\">    train_num = <span class=\"built_in\">int</span>(trainval_num*train_percent)</span><br><span class=\"line\">    val_num = <span class=\"built_in\">int</span>(trainval_num*val_percent) <span class=\"keyword\">if</span> train_percent&lt;<span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    trainval = random.sample(list_index,trainval_num)</span><br><span class=\"line\">    train = random.sample(list_index,train_num)</span><br><span class=\"line\">    val = random.sample(list_index,val_num)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(list_index):</span><br><span class=\"line\">        imgfile = images[i]</span><br><span class=\"line\">        img_id = os.path.splitext(os.path.basename(imgfile))[<span class=\"number\">0</span>]</span><br><span class=\"line\">        xmlfile = img_id+<span class=\"string\">&quot;.xml&quot;</span></span><br><span class=\"line\">        sh.copy(os.path.join(imgroot,imgfile),os.path.join(img_path,imgfile))</span><br><span class=\"line\">        sh.copy(os.path.join(xmlroot,xmlfile),os.path.join(ann_path,xmlfile))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_id <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> errorId:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> trainval:</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(txt_path,<span class=\"string\">&#x27;trainval.txt&#x27;</span>),<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                    f.write(img_id+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> train:</span><br><span class=\"line\">                    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(txt_path,<span class=\"string\">&#x27;train.txt&#x27;</span>),<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                        f.write(img_id+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(txt_path,<span class=\"string\">&#x27;val.txt&#x27;</span>),<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                        f.write(img_id+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> train_percent==<span class=\"number\">1</span> <span class=\"keyword\">and</span> i <span class=\"keyword\">in</span> val:</span><br><span class=\"line\">                    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(txt_path,<span class=\"string\">&#x27;val.txt&#x27;</span>),<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                        f.write(img_id+<span class=\"string\">&#x27;\\n&#x27;</span>)          </span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(txt_path,<span class=\"string\">&#x27;test.txt&#x27;</span>),<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                    f.write(img_id+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># end</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dataset to VOC format finished!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>():</span></span><br><span class=\"line\">    box_root = <span class=\"string\">&quot;E:/MyProject/Dataset/hwtest/annotations&quot;</span></span><br><span class=\"line\">    image_root = <span class=\"string\">&quot;E:/MyProject/Dataset/hwtest/images&quot;</span></span><br><span class=\"line\">    output_root = <span class=\"string\">&quot;E:/MyProject/Dataset/voc&quot;</span></span><br><span class=\"line\">    classes = &#123;<span class=\"string\">&quot;liner&quot;</span>: <span class=\"number\">0</span>,<span class=\"string\">&quot;bulk carrier&quot;</span>: <span class=\"number\">1</span>,<span class=\"string\">&quot;warship&quot;</span>: <span class=\"number\">2</span>,<span class=\"string\">&quot;sailboat&quot;</span>: <span class=\"number\">3</span>,<span class=\"string\">&quot;canoe&quot;</span>: <span class=\"number\">4</span>,<span class=\"string\">&quot;container ship&quot;</span>: <span class=\"number\">5</span>,<span class=\"string\">&quot;fishing boat&quot;</span>: <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">    errorId = []</span><br><span class=\"line\">    train_percent = <span class=\"number\">0.9</span></span><br><span class=\"line\">    tovoc(box_root,image_root,output_root,errorId,classes,trp=train_percent)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    test()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-YOLO\"><a href=\"#3-YOLO\" class=\"headerlink\" title=\"3. YOLO\"></a>3. YOLO</h1><h2 id=\"3-1-YOLO数据集格式\"><a href=\"#3-1-YOLO数据集格式\" class=\"headerlink\" title=\"3.1 YOLO数据集格式\"></a>3.1 YOLO数据集格式</h2><p><code>YOLO</code>数据集格式的出现主要是为了训练<code>YOLO</code>模型，其文件格式没有固定的要求，因为可以通过修改模型的配置文件进行数据加载，唯一需要注意的是<code>YOLO</code>数据集的标注格式是将目标框的位置信息进行归一化处理（此处归一化指的是除以图片宽和高），如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;目标类别&#125; &#123;归一化后的目标中心点x坐标&#125; &#123;归一化后的目标中心点y坐标&#125; &#123;归一化后的目标框宽度w&#125; &#123;归一化后的目标框高度h&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-YOLO转换脚本\"><a href=\"#3-2-YOLO转换脚本\" class=\"headerlink\" title=\"3.2 YOLO转换脚本\"></a>3.2 YOLO转换脚本</h2><p><code>Python</code>转换脚本如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># @Author    : justlovesmile</span></span><br><span class=\"line\"><span class=\"comment\"># @Date      : 2021/9/8 20:28</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm.auto <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil <span class=\"keyword\">as</span> sh</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> xml.etree.cElementTree <span class=\"keyword\">as</span> et</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> xml.etree.ElementTree <span class=\"keyword\">as</span> et</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mkdir</span>(<span class=\"params\">path</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(path):</span><br><span class=\"line\">        os.makedirs(path)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;The path (<span class=\"subst\">&#123;path&#125;</span>) already exists.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xml2yolo</span>(<span class=\"params\">xmlpath,savepath,classes=&#123;&#125;</span>):</span></span><br><span class=\"line\">    namemap = classes</span><br><span class=\"line\">    <span class=\"comment\">#try:</span></span><br><span class=\"line\">    <span class=\"comment\">#    with open(&#x27;classes_yolo.json&#x27;,&#x27;r&#x27;) as f:</span></span><br><span class=\"line\">    <span class=\"comment\">#        namemap=json.load(f)</span></span><br><span class=\"line\">    <span class=\"comment\">#except:</span></span><br><span class=\"line\">    <span class=\"comment\">#    pass</span></span><br><span class=\"line\">    rt = et.parse(xmlpath).getroot()</span><br><span class=\"line\">    w = <span class=\"built_in\">int</span>(rt.find(<span class=\"string\">&quot;size&quot;</span>).find(<span class=\"string\">&quot;width&quot;</span>).text)</span><br><span class=\"line\">    h = <span class=\"built_in\">int</span>(rt.find(<span class=\"string\">&quot;size&quot;</span>).find(<span class=\"string\">&quot;height&quot;</span>).text)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(savepath, <span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> rt.findall(<span class=\"string\">&quot;object&quot;</span>):</span><br><span class=\"line\">            name = obj.find(<span class=\"string\">&quot;name&quot;</span>).text</span><br><span class=\"line\">            xmin = <span class=\"built_in\">int</span>(obj.find(<span class=\"string\">&quot;bndbox&quot;</span>).find(<span class=\"string\">&quot;xmin&quot;</span>).text)</span><br><span class=\"line\">            ymin = <span class=\"built_in\">int</span>(obj.find(<span class=\"string\">&quot;bndbox&quot;</span>).find(<span class=\"string\">&quot;ymin&quot;</span>).text)</span><br><span class=\"line\">            xmax = <span class=\"built_in\">int</span>(obj.find(<span class=\"string\">&quot;bndbox&quot;</span>).find(<span class=\"string\">&quot;xmax&quot;</span>).text)</span><br><span class=\"line\">            ymax = <span class=\"built_in\">int</span>(obj.find(<span class=\"string\">&quot;bndbox&quot;</span>).find(<span class=\"string\">&quot;ymax&quot;</span>).text)</span><br><span class=\"line\">            f.write(</span><br><span class=\"line\">                <span class=\"string\">f&quot;<span class=\"subst\">&#123;namemap[name]&#125;</span> <span class=\"subst\">&#123;(xmin+xmax)/w/<span class=\"number\">2.</span>&#125;</span> <span class=\"subst\">&#123;(ymin+ymax)/h/<span class=\"number\">2.</span>&#125;</span> <span class=\"subst\">&#123;(xmax-xmin)/w&#125;</span> <span class=\"subst\">&#123;(ymax-ymin)/h&#125;</span>&quot;</span></span><br><span class=\"line\">                + <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">trainval</span>(<span class=\"params\">xmlroot,imgroot,saveroot,errorId=[],classes=&#123;&#125;,tvp=<span class=\"number\">1.0</span>,trp=<span class=\"number\">0.9</span></span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># assert</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> tvp&lt;=<span class=\"number\">1.0</span> <span class=\"keyword\">and</span> trp &lt;=<span class=\"number\">1.0</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(classes)&gt;<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># create dirs</span></span><br><span class=\"line\">    imglabel = [<span class=\"string\">&#x27;images&#x27;</span>,<span class=\"string\">&#x27;labels&#x27;</span>]</span><br><span class=\"line\">    trainvaltest = [<span class=\"string\">&#x27;train&#x27;</span>,<span class=\"string\">&#x27;val&#x27;</span>,<span class=\"string\">&#x27;test&#x27;</span>]</span><br><span class=\"line\">    mkdir(saveroot)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> imglabel:</span><br><span class=\"line\">        mkdir(os.path.join(saveroot,r))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> trainvaltest:</span><br><span class=\"line\">            mkdir(os.path.join(saveroot,r,s))</span><br><span class=\"line\">    <span class=\"comment\">#train / val</span></span><br><span class=\"line\">    trainval_percent = tvp</span><br><span class=\"line\">    train_percent = trp</span><br><span class=\"line\">    val_percent = <span class=\"number\">1</span> - train_percent <span class=\"keyword\">if</span> train_percent&lt;<span class=\"number\">1.0</span> <span class=\"keyword\">else</span> <span class=\"number\">0.15</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    total_img = os.listdir(imgroot)</span><br><span class=\"line\">    num = <span class=\"built_in\">len</span>(total_img)</span><br><span class=\"line\">    list_index = <span class=\"built_in\">range</span>(num)</span><br><span class=\"line\">    tv = <span class=\"built_in\">int</span>(num * trainval_percent)</span><br><span class=\"line\">    tr = <span class=\"built_in\">int</span>(tv * train_percent)</span><br><span class=\"line\">    va = <span class=\"built_in\">int</span>(tv * val_percent)</span><br><span class=\"line\">    trainval = random.sample(list_index, tv) <span class=\"comment\"># trainset and valset</span></span><br><span class=\"line\">    train = random.sample(trainval, tr) <span class=\"comment\"># trainset</span></span><br><span class=\"line\">    val = random.sample(trainval, va) <span class=\"comment\">#valset, use it only when train_percent = 1 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;trainval_percent:<span class=\"subst\">&#123;trainval_percent&#125;</span>,train_percent:<span class=\"subst\">&#123;train_percent&#125;</span>,val_percent:<span class=\"subst\">&#123;val_percent&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(list_index):</span><br><span class=\"line\">        name = total_img[i]</span><br><span class=\"line\">        op = os.path.join(imgroot,name)</span><br><span class=\"line\">        file_id = os.path.splitext(os.path.basename(name))[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> file_id <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> errorId:</span><br><span class=\"line\">            xmlp = os.path.join(xmlroot,file_id+<span class=\"string\">&#x27;.xml&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> trainval:</span><br><span class=\"line\">                <span class=\"comment\"># trainset and valset</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> train:</span><br><span class=\"line\">                    sp = os.path.join(saveroot,<span class=\"string\">&quot;images&quot;</span>,<span class=\"string\">&quot;train&quot;</span>,name)</span><br><span class=\"line\">                    xml2yolo(xmlp,os.path.join(saveroot,<span class=\"string\">&quot;labels&quot;</span>,<span class=\"string\">&quot;train&quot;</span>,file_id+<span class=\"string\">&#x27;.txt&#x27;</span>),classes)</span><br><span class=\"line\">                    sh.copy(op,sp)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    sp = os.path.join(saveroot,<span class=\"string\">&quot;images&quot;</span>,<span class=\"string\">&quot;val&quot;</span>,name)</span><br><span class=\"line\">                    xml2yolo(xmlp,os.path.join(saveroot,<span class=\"string\">&quot;labels&quot;</span>,<span class=\"string\">&quot;val&quot;</span>,file_id+<span class=\"string\">&#x27;.txt&#x27;</span>),classes)</span><br><span class=\"line\">                    sh.copy(op,sp)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (train_percent==<span class=\"number\">1.0</span> <span class=\"keyword\">and</span> i <span class=\"keyword\">in</span> val):</span><br><span class=\"line\">                    sp = os.path.join(saveroot,<span class=\"string\">&quot;images&quot;</span>,<span class=\"string\">&quot;val&quot;</span>,name)</span><br><span class=\"line\">                    xml2yolo(xmlp,os.path.join(saveroot,<span class=\"string\">&quot;labels&quot;</span>,<span class=\"string\">&quot;val&quot;</span>,file_id+<span class=\"string\">&#x27;.txt&#x27;</span>),classes)</span><br><span class=\"line\">                    sh.copy(op,sp)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># testset</span></span><br><span class=\"line\">                sp = os.path.join(saveroot,<span class=\"string\">&quot;images&quot;</span>,<span class=\"string\">&quot;test&quot;</span>,name)</span><br><span class=\"line\">                xml2yolo(xmlp,os.path.join(saveroot,<span class=\"string\">&quot;labels&quot;</span>,<span class=\"string\">&quot;test&quot;</span>,file_id+<span class=\"string\">&#x27;.txt&#x27;</span>),classes)</span><br><span class=\"line\">                sh.copy(op,sp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maketxt</span>(<span class=\"params\"><span class=\"built_in\">dir</span>,saveroot,filename</span>):</span></span><br><span class=\"line\">    savetxt = os.path.join(saveroot,filename)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(savetxt,<span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(os.listdir(<span class=\"built_in\">dir</span>)):</span><br><span class=\"line\">            f.write(os.path.join(<span class=\"built_in\">dir</span>,i)+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">                           </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toyolo</span>(<span class=\"params\">xmlroot,imgroot,saveroot,errorId=[],classes=&#123;&#125;,tvp=<span class=\"number\">1</span>,train_percent=<span class=\"number\">0.9</span></span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># toyolo main function</span></span><br><span class=\"line\">    trainval(xmlroot,imgroot,saveroot,errorId,classes,tvp,train_percent)</span><br><span class=\"line\">    maketxt(os.path.join(saveroot,<span class=\"string\">&quot;images&quot;</span>,<span class=\"string\">&quot;train&quot;</span>),saveroot,<span class=\"string\">&quot;train.txt&quot;</span>)</span><br><span class=\"line\">    maketxt(os.path.join(saveroot,<span class=\"string\">&quot;images&quot;</span>,<span class=\"string\">&quot;val&quot;</span>),saveroot,<span class=\"string\">&quot;val.txt&quot;</span>)</span><br><span class=\"line\">    maketxt(os.path.join(saveroot,<span class=\"string\">&quot;images&quot;</span>,<span class=\"string\">&quot;test&quot;</span>),saveroot,<span class=\"string\">&quot;test.txt&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dataset to yolo format success.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>():</span></span><br><span class=\"line\">    box_root = <span class=\"string\">&quot;E:/MyProject/Dataset/hwtest/annotations&quot;</span></span><br><span class=\"line\">    image_root = <span class=\"string\">&quot;E:/MyProject/Dataset/hwtest/images&quot;</span></span><br><span class=\"line\">    output_root = <span class=\"string\">&quot;E:/MyProject/Dataset/yolo&quot;</span></span><br><span class=\"line\">    classes = &#123;<span class=\"string\">&quot;liner&quot;</span>: <span class=\"number\">0</span>,<span class=\"string\">&quot;bulk carrier&quot;</span>: <span class=\"number\">1</span>,<span class=\"string\">&quot;warship&quot;</span>: <span class=\"number\">2</span>,<span class=\"string\">&quot;sailboat&quot;</span>: <span class=\"number\">3</span>,<span class=\"string\">&quot;canoe&quot;</span>: <span class=\"number\">4</span>,<span class=\"string\">&quot;container ship&quot;</span>: <span class=\"number\">5</span>,<span class=\"string\">&quot;fishing boat&quot;</span>: <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">    errorId = []</span><br><span class=\"line\">    train_percent = <span class=\"number\">0.9</span></span><br><span class=\"line\">    toyolo(box_root,image_root,output_root,errorId,classes,train_percent=train_percent)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    test()</span><br></pre></td></tr></table></figure>\n\n<p>按照此脚本，将会在输出文件夹中生成以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-yolo/</span><br><span class=\"line\">\t|-images/</span><br><span class=\"line\">\t\t|-train/</span><br><span class=\"line\">\t\t\t|-1.jpg</span><br><span class=\"line\">\t\t\t|-2.jpg</span><br><span class=\"line\">\t\t|-test/</span><br><span class=\"line\">\t\t\t|-3.jpg</span><br><span class=\"line\">\t\t\t|-4.jpg</span><br><span class=\"line\">\t\t|-val/</span><br><span class=\"line\">\t\t\t|-5.jpg</span><br><span class=\"line\">\t\t\t|-6.jpg</span><br><span class=\"line\">\t|-labels/</span><br><span class=\"line\">\t\t|-train/</span><br><span class=\"line\">\t\t\t|-1.txt</span><br><span class=\"line\">\t\t\t|-2.txt</span><br><span class=\"line\">\t\t|-test/</span><br><span class=\"line\">\t\t\t|-3.txt</span><br><span class=\"line\">\t\t\t|-4.txt</span><br><span class=\"line\">\t\t|-val/</span><br><span class=\"line\">\t\t\t|-5.txt</span><br><span class=\"line\">\t\t\t|-6.txt</span><br><span class=\"line\">\t|-train.txt</span><br><span class=\"line\">\t|-test.txt</span><br><span class=\"line\">\t|-val.txt</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"代码编程","path":"api/categories/代码编程.json"}],"tags":[{"name":"深度学习","path":"api/tags/深度学习.json"},{"name":"目标检测","path":"api/tags/目标检测.json"},{"name":"Python","path":"api/tags/Python.json"}]}