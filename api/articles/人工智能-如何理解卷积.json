{"title":"深度学习 | 如何理解卷积","slug":"人工智能-如何理解卷积","date":"2020-11-03T11:09:20.000Z","updated":"2020-11-03T11:09:20.000Z","comments":true,"path":"api/articles/人工智能-如何理解卷积.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/v2-8be52f6bada3f7a21cebfc210d2e7ea0_hd.gif","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/v2-1d0c819fc7ca6f8da25435da070a2715_hd.webp","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/v2-05f7af4e1d59e82412832c01b1144f52_720w.jpg","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/v2-c9b00043ba326451979abda5417bfcdf_720w.jpg","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20201103204533.png","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20201103211407111.png"],"content":"<h2 id=\"1-什么是卷积\"><a href=\"#1-什么是卷积\" class=\"headerlink\" title=\"1.什么是卷积\"></a>1.什么是卷积</h2><p>对于卷积的定义，如下：</p>\n<p><strong>连续形式</strong></p>\n<p>$$(f×g)(n)=\\int_{-\\infty}^{\\infty}f(\\tau )g(n-\\tau)d\\tau$$</p>\n<p><strong>离散形式</strong></p>\n<p>$$(f×g)(n)=\\sum_{\\tau=-\\infty}^{\\infty}f(\\tau)g(n-\\tau)$$</p>\n<blockquote>\n<p>先对g函数进行翻转，相当于在数轴上把g函数从右边褶到左边去，也就是卷积的“卷”的由来。<br>然后再把g函数平移到n，在这个位置对两个函数的对应点相乘，然后相加，这个过程是卷积的“积”的过程。</p>\n</blockquote>\n<p>上述公式中有一个共同的特征：<br>$$n=\\tau + (n - \\tau)$$</p>\n<p>对于这个特征，我们可以令$x=\\tau$,$y=n-\\tau$，那么x+y=n就是一些直线</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/v2-8be52f6bada3f7a21cebfc210d2e7ea0_hd.gif\"></p>\n<p>如果遍历这些直线，就好比，把毛巾沿着角卷起来：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/v2-1d0c819fc7ca6f8da25435da070a2715_hd.webp\"></p>\n<h2 id=\"2-通俗易懂的理解卷积\"><a href=\"#2-通俗易懂的理解卷积\" class=\"headerlink\" title=\"2.通俗易懂的理解卷积\"></a>2.通俗易懂的理解卷积</h2><h3 id=\"2-1离散卷积的例子：丢骰子\"><a href=\"#2-1离散卷积的例子：丢骰子\" class=\"headerlink\" title=\"2.1离散卷积的例子：丢骰子\"></a>2.1离散卷积的例子：丢骰子</h3><p><strong>问题：</strong></p>\n<p>把两枚骰子抛出去，两枚骰子点数之和为4的概率是多少</p>\n<p><strong>表示：</strong></p>\n<p>如果用f(x)表示第一枚骰子投出x（x∈{1,2,3,4,5,6}）的概率，g(y)表示第二枚骰子投出y（y∈{1,2,3,4,5,6}）的概率</p>\n<p><strong>结果：</strong></p>\n<p>两枚骰子点数加起来等于4的情况有：<br>f(1)g(3)和f(2)g(2)和f(3)g(1)</p>\n<p>那么概率为P=f(1)g(3)+f(2)g(2)+f(3)g(1)，符合卷积的定义，把他写成标准形式就是<br>$$(f×g)(4)=\\sum_{m=1}^{3}f(m)g(4-m)$$</p>\n<h3 id=\"2-2连续卷积的例子：做馒头\"><a href=\"#2-2连续卷积的例子：做馒头\" class=\"headerlink\" title=\"2.2连续卷积的例子：做馒头\"></a>2.2连续卷积的例子：做馒头</h3><p><strong>问题：</strong></p>\n<p>如果有一家包子铺，会生产包子，但是包子会坏掉，那么一天后包子总共坏掉了多少？</p>\n<p><strong>表示：</strong></p>\n<p>假设包子生产速度是f(t)，对于包子铺一天生产的包子数量是<br>$$\\int_{0}^{24}f(t)dt$$<br>假设腐败速度是g(t)，那么n个包子生产出来后，24小时会腐败个数<br>$$n * g(t)$$</p>\n<p><strong>结果：</strong></p>\n<p>一天后，包子总共腐败了：<br>$$\\int_{0}^{24}f(t)g(24-t)dt$$</p>\n<h3 id=\"2-3卷积提取图像特征\"><a href=\"#2-3卷积提取图像特征\" class=\"headerlink\" title=\"2.3卷积提取图像特征\"></a>2.3卷积提取图像特征</h3><p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/v2-05f7af4e1d59e82412832c01b1144f52_720w.jpg\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/v2-c9b00043ba326451979abda5417bfcdf_720w.jpg\"></p>\n<p>卷积核和图像进行点乘（dot product), 就代表卷积核里的权重单独对相应位置的Pixel进行作用</p>\n<p><strong>这里我想强调一下点乘，虽说我们称为卷积，实际上是位置一一对应的点乘，不是真正意义的卷积</strong></p>\n<p>比如图像位置（1,1）乘以卷积核位置（1,1），仔细观察右上角你就会发现了</p>\n<p>例如：对于一张图片</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20201103204533.png\"></p>\n<p>我们进行手动卷积</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch,torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\">path=<span class=\"string\">&quot;./1.jpg&quot;</span></span><br><span class=\"line\">img = Image.<span class=\"built_in\">open</span>(path)</span><br><span class=\"line\">transform = transforms.Compose([transforms.ToTensor()])<span class=\"comment\">#totensor 得到（C*H*W)</span></span><br><span class=\"line\">im = transform(img)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">imshow</span>(<span class=\"params\">img</span>):</span></span><br><span class=\"line\">    npimg = img</span><br><span class=\"line\">    plt.imshow(np.transpose(npimg,(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>))) <span class=\"comment\">#chw-&gt;hwc</span></span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\">k = torch.ShortTensor([[<span class=\"number\">0</span>,-<span class=\"number\">4</span>,<span class=\"number\">0</span>],[-<span class=\"number\">4</span>,<span class=\"number\">16</span>,-<span class=\"number\">4</span>],[<span class=\"number\">0</span>,-<span class=\"number\">4</span>,<span class=\"number\">0</span>]])</span><br><span class=\"line\">stride=<span class=\"number\">2</span> <span class=\"comment\">#步长</span></span><br><span class=\"line\">padding=<span class=\"number\">0</span> <span class=\"comment\"># 补0</span></span><br><span class=\"line\">f = k.size(<span class=\"number\">0</span>) <span class=\"comment\"># 卷积核的形状</span></span><br><span class=\"line\">channels = im.size(<span class=\"number\">0</span>) <span class=\"comment\">#输入的图片的通道数</span></span><br><span class=\"line\">hin = im.size(<span class=\"number\">1</span>) <span class=\"comment\">#输入的图片的高</span></span><br><span class=\"line\">win = im.size(<span class=\"number\">2</span>) <span class=\"comment\">#输入的图片的宽</span></span><br><span class=\"line\">hout = math.floor((hin-f+<span class=\"number\">2</span>*padding)/stride+<span class=\"number\">1</span>) <span class=\"comment\">#输出的图片的高</span></span><br><span class=\"line\">wout = math.floor((win-f+<span class=\"number\">2</span>*padding)/stride+<span class=\"number\">1</span>) <span class=\"comment\">#输出的图片的宽</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;input[&#123;&#125;,&#123;&#125;],output[&#123;&#125;,&#123;&#125;]&quot;</span>.<span class=\"built_in\">format</span>(hin,win,hout,wout))</span><br><span class=\"line\">output=[]</span><br><span class=\"line\">im = im.numpy()</span><br><span class=\"line\">k = k.numpy()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Waite for calculating...&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 自定义卷积，一一对应相乘</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(channels):</span><br><span class=\"line\">    lines=[]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(hout):</span><br><span class=\"line\">        line=[]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(wout):</span><br><span class=\"line\">            a=[[im[i][j*stride][n*stride],im[i][j*stride][n*stride+<span class=\"number\">1</span>],im[i][j*stride][n*stride+<span class=\"number\">2</span>]],[im[i][j*stride+<span class=\"number\">1</span>][n*stride],im[i][j*stride+<span class=\"number\">1</span>][n*stride+<span class=\"number\">1</span>],im[i][j*stride+<span class=\"number\">1</span>][n*stride+<span class=\"number\">2</span>]],[im[i][j*stride+<span class=\"number\">2</span>][n*stride],im[i][j*stride+<span class=\"number\">2</span>][n*stride+<span class=\"number\">1</span>],im[i][j*stride+<span class=\"number\">2</span>][n*stride+<span class=\"number\">2</span>]]]</span><br><span class=\"line\">            line.append(<span class=\"built_in\">sum</span>(<span class=\"built_in\">sum</span>(a*k)))</span><br><span class=\"line\">        lines.append(line)</span><br><span class=\"line\">    output.append(lines)</span><br><span class=\"line\"></span><br><span class=\"line\">oo=np.array(output)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(oo.shape)</span><br><span class=\"line\">imshow(oo)</span><br></pre></td></tr></table></figure>\n\n<p><strong>提取特征效果如下：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20201103211407111.png\"></p>\n<p>部分内容参考<a href=\"https://www.zhihu.com/question/22298352/answer/637156871\">知乎:如何通俗易懂的理解卷积</a></p>\n","more":"<h2 id=\"1-什么是卷积\"><a href=\"#1-什么是卷积\" class=\"headerlink\" title=\"1.什么是卷积\"></a>1.什么是卷积</h2><p>对于卷积的定义，如下：</p>\n<p><strong>连续形式</strong></p>\n<p>$$(f×g)(n)=\\int_{-\\infty}^{\\infty}f(\\tau )g(n-\\tau)d\\tau$$</p>\n<p><strong>离散形式</strong></p>\n<p>$$(f×g)(n)=\\sum_{\\tau=-\\infty}^{\\infty}f(\\tau)g(n-\\tau)$$</p>\n<blockquote>\n<p>先对g函数进行翻转，相当于在数轴上把g函数从右边褶到左边去，也就是卷积的“卷”的由来。<br>然后再把g函数平移到n，在这个位置对两个函数的对应点相乘，然后相加，这个过程是卷积的“积”的过程。</p>\n</blockquote>\n<p>上述公式中有一个共同的特征：<br>$$n=\\tau + (n - \\tau)$$</p>\n<p>对于这个特征，我们可以令$x=\\tau$,$y=n-\\tau$，那么x+y=n就是一些直线</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/v2-8be52f6bada3f7a21cebfc210d2e7ea0_hd.gif\"></p>\n<p>如果遍历这些直线，就好比，把毛巾沿着角卷起来：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/v2-1d0c819fc7ca6f8da25435da070a2715_hd.webp\"></p>\n<h2 id=\"2-通俗易懂的理解卷积\"><a href=\"#2-通俗易懂的理解卷积\" class=\"headerlink\" title=\"2.通俗易懂的理解卷积\"></a>2.通俗易懂的理解卷积</h2><h3 id=\"2-1离散卷积的例子：丢骰子\"><a href=\"#2-1离散卷积的例子：丢骰子\" class=\"headerlink\" title=\"2.1离散卷积的例子：丢骰子\"></a>2.1离散卷积的例子：丢骰子</h3><p><strong>问题：</strong></p>\n<p>把两枚骰子抛出去，两枚骰子点数之和为4的概率是多少</p>\n<p><strong>表示：</strong></p>\n<p>如果用f(x)表示第一枚骰子投出x（x∈{1,2,3,4,5,6}）的概率，g(y)表示第二枚骰子投出y（y∈{1,2,3,4,5,6}）的概率</p>\n<p><strong>结果：</strong></p>\n<p>两枚骰子点数加起来等于4的情况有：<br>f(1)g(3)和f(2)g(2)和f(3)g(1)</p>\n<p>那么概率为P=f(1)g(3)+f(2)g(2)+f(3)g(1)，符合卷积的定义，把他写成标准形式就是<br>$$(f×g)(4)=\\sum_{m=1}^{3}f(m)g(4-m)$$</p>\n<h3 id=\"2-2连续卷积的例子：做馒头\"><a href=\"#2-2连续卷积的例子：做馒头\" class=\"headerlink\" title=\"2.2连续卷积的例子：做馒头\"></a>2.2连续卷积的例子：做馒头</h3><p><strong>问题：</strong></p>\n<p>如果有一家包子铺，会生产包子，但是包子会坏掉，那么一天后包子总共坏掉了多少？</p>\n<p><strong>表示：</strong></p>\n<p>假设包子生产速度是f(t)，对于包子铺一天生产的包子数量是<br>$$\\int_{0}^{24}f(t)dt$$<br>假设腐败速度是g(t)，那么n个包子生产出来后，24小时会腐败个数<br>$$n * g(t)$$</p>\n<p><strong>结果：</strong></p>\n<p>一天后，包子总共腐败了：<br>$$\\int_{0}^{24}f(t)g(24-t)dt$$</p>\n<h3 id=\"2-3卷积提取图像特征\"><a href=\"#2-3卷积提取图像特征\" class=\"headerlink\" title=\"2.3卷积提取图像特征\"></a>2.3卷积提取图像特征</h3><p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/v2-05f7af4e1d59e82412832c01b1144f52_720w.jpg\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/v2-c9b00043ba326451979abda5417bfcdf_720w.jpg\"></p>\n<p>卷积核和图像进行点乘（dot product), 就代表卷积核里的权重单独对相应位置的Pixel进行作用</p>\n<p><strong>这里我想强调一下点乘，虽说我们称为卷积，实际上是位置一一对应的点乘，不是真正意义的卷积</strong></p>\n<p>比如图像位置（1,1）乘以卷积核位置（1,1），仔细观察右上角你就会发现了</p>\n<p>例如：对于一张图片</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20201103204533.png\"></p>\n<p>我们进行手动卷积</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch,torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\">path=<span class=\"string\">&quot;./1.jpg&quot;</span></span><br><span class=\"line\">img = Image.<span class=\"built_in\">open</span>(path)</span><br><span class=\"line\">transform = transforms.Compose([transforms.ToTensor()])<span class=\"comment\">#totensor 得到（C*H*W)</span></span><br><span class=\"line\">im = transform(img)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">imshow</span>(<span class=\"params\">img</span>):</span></span><br><span class=\"line\">    npimg = img</span><br><span class=\"line\">    plt.imshow(np.transpose(npimg,(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>))) <span class=\"comment\">#chw-&gt;hwc</span></span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\">k = torch.ShortTensor([[<span class=\"number\">0</span>,-<span class=\"number\">4</span>,<span class=\"number\">0</span>],[-<span class=\"number\">4</span>,<span class=\"number\">16</span>,-<span class=\"number\">4</span>],[<span class=\"number\">0</span>,-<span class=\"number\">4</span>,<span class=\"number\">0</span>]])</span><br><span class=\"line\">stride=<span class=\"number\">2</span> <span class=\"comment\">#步长</span></span><br><span class=\"line\">padding=<span class=\"number\">0</span> <span class=\"comment\"># 补0</span></span><br><span class=\"line\">f = k.size(<span class=\"number\">0</span>) <span class=\"comment\"># 卷积核的形状</span></span><br><span class=\"line\">channels = im.size(<span class=\"number\">0</span>) <span class=\"comment\">#输入的图片的通道数</span></span><br><span class=\"line\">hin = im.size(<span class=\"number\">1</span>) <span class=\"comment\">#输入的图片的高</span></span><br><span class=\"line\">win = im.size(<span class=\"number\">2</span>) <span class=\"comment\">#输入的图片的宽</span></span><br><span class=\"line\">hout = math.floor((hin-f+<span class=\"number\">2</span>*padding)/stride+<span class=\"number\">1</span>) <span class=\"comment\">#输出的图片的高</span></span><br><span class=\"line\">wout = math.floor((win-f+<span class=\"number\">2</span>*padding)/stride+<span class=\"number\">1</span>) <span class=\"comment\">#输出的图片的宽</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;input[&#123;&#125;,&#123;&#125;],output[&#123;&#125;,&#123;&#125;]&quot;</span>.<span class=\"built_in\">format</span>(hin,win,hout,wout))</span><br><span class=\"line\">output=[]</span><br><span class=\"line\">im = im.numpy()</span><br><span class=\"line\">k = k.numpy()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Waite for calculating...&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 自定义卷积，一一对应相乘</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(channels):</span><br><span class=\"line\">    lines=[]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(hout):</span><br><span class=\"line\">        line=[]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(wout):</span><br><span class=\"line\">            a=[[im[i][j*stride][n*stride],im[i][j*stride][n*stride+<span class=\"number\">1</span>],im[i][j*stride][n*stride+<span class=\"number\">2</span>]],[im[i][j*stride+<span class=\"number\">1</span>][n*stride],im[i][j*stride+<span class=\"number\">1</span>][n*stride+<span class=\"number\">1</span>],im[i][j*stride+<span class=\"number\">1</span>][n*stride+<span class=\"number\">2</span>]],[im[i][j*stride+<span class=\"number\">2</span>][n*stride],im[i][j*stride+<span class=\"number\">2</span>][n*stride+<span class=\"number\">1</span>],im[i][j*stride+<span class=\"number\">2</span>][n*stride+<span class=\"number\">2</span>]]]</span><br><span class=\"line\">            line.append(<span class=\"built_in\">sum</span>(<span class=\"built_in\">sum</span>(a*k)))</span><br><span class=\"line\">        lines.append(line)</span><br><span class=\"line\">    output.append(lines)</span><br><span class=\"line\"></span><br><span class=\"line\">oo=np.array(output)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(oo.shape)</span><br><span class=\"line\">imshow(oo)</span><br></pre></td></tr></table></figure>\n\n<p><strong>提取特征效果如下：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20201103211407111.png\"></p>\n<p>部分内容参考<a href=\"https://www.zhihu.com/question/22298352/answer/637156871\">知乎:如何通俗易懂的理解卷积</a></p>\n","categories":[{"name":"人工智能","path":"api/categories/人工智能.json"}],"tags":[{"name":"深度学习","path":"api/tags/深度学习.json"},{"name":"卷积","path":"api/tags/卷积.json"}]}