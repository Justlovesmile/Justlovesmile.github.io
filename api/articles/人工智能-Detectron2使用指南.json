{"title":"深度学习 | Detectron2使用指南","slug":"人工智能-Detectron2使用指南","date":"2022-03-18T10:16:03.000Z","updated":"2022-03-18T10:16:03.000Z","comments":true,"path":"api/articles/人工智能-Detectron2使用指南.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20220316165420.png","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20220316171845.png","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20220316211311.png"],"content":"<p><code>Detectron2</code>是<code>Facebook AI Research</code>的检测和分割框架，其主要基于<code>PyTorch</code>实现，但具有更模块化设计，因此它是灵活且便于扩展的，具体简介可见<a href=\"https://github.com/facebookresearch/detectron2\">Github库</a>和<a href=\"https://ai.facebook.com/blog/-detectron2-a-pytorch-based-modular-object-detection-library-/\">Meta AI Blog Post</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@misc&#123;wu2019detectron2,</span><br><span class=\"line\">  author =       &#123;Yuxin Wu and Alexander Kirillov and Francisco Massa and</span><br><span class=\"line\"> Wan-Yen Lo and Ross Girshick&#125;,</span><br><span class=\"line\">  title =        &#123;Detectron2&#125;,</span><br><span class=\"line\">  howpublished = &#123;\\url&#123;https://github.com/facebookresearch/detectron2&#125;&#125;,</span><br><span class=\"line\">  year =         &#123;2019&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"1-Detectron2安装\"><a href=\"#1-Detectron2安装\" class=\"headerlink\" title=\"1. Detectron2安装\"></a>1. Detectron2安装</h1><blockquote>\n<p>首先官方要求的环境条件如下：</p>\n<ul>\n<li>Linux or macOS with Python ≥ 3.6</li>\n<li>PyTorch ≥ 1.8 and <a href=\"https://github.com/pytorch/vision/\">torchvision</a> that matches the PyTorch installation. Install them together at <a href=\"https://pytorch.org/\">pytorch.org</a> to make sure of this</li>\n<li>OpenCV is optional but needed by demo and visualization</li>\n<li> gcc &amp; g++ ≥ 5.4 are required</li>\n<li><a href=\"https://ninja-build.org/\">ninja</a> is optional but recommended for faster build</li>\n<li>Cuda &amp; Cudnn</li>\n</ul>\n</blockquote>\n<p>因此想要安装并使用Detectron2，需要有：</p>\n<ul>\n<li>环境：Python，Cuda，Cudnn，gcc&amp;g++</li>\n<li>Python包：pytorch，torchvision，python-opencv</li>\n<li>推荐：Anaconda</li>\n</ul>\n<h2 id=\"1-1-Linux\"><a href=\"#1-1-Linux\" class=\"headerlink\" title=\"1.1 Linux\"></a>1.1 Linux</h2><p>Linux安装直接按照<a href=\"https://detectron2.readthedocs.io/en/latest/tutorials/install.html\">官方文档</a>的安装步骤即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install &#x27;git+https://github.com/facebookresearch/detectron2.git&#x27;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> (add --user <span class=\"keyword\">if</span> you don<span class=\"string\">&#x27;t have permission)</span></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\"> Or, to install it from a local clone:</span></span></span><br><span class=\"line\">git clone https://github.com/facebookresearch/detectron2.git</span><br><span class=\"line\">python -m pip install -e detectron2</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\"> On macOS, you may need to prepend the above commands with a few environment variables:</span></span></span><br><span class=\"line\">CC=clang CXX=clang++ ARCHFLAGS=&quot;-arch x86_64&quot; python -m pip install ...</span><br></pre></td></tr></table></figure>\n\n<p>如果以上安装失败，可以尝试直接安装预编译文件，同样在<a href=\"https://detectron2.readthedocs.io/en/latest/tutorials/install.html\">官方文档有提供</a></p>\n<h2 id=\"1-2-Windows\"><a href=\"#1-2-Windows\" class=\"headerlink\" title=\"1.2 Windows\"></a>1.2 Windows</h2><h3 id=\"1-2-1-VS2019-C-编译环境\"><a href=\"#1-2-1-VS2019-C-编译环境\" class=\"headerlink\" title=\"1.2.1 VS2019 C++编译环境\"></a>1.2.1 VS2019 C++编译环境</h3><p>Windows想要安装Detectron2，需要提前安装<strong>Microsoft Visual Studio 2019</strong>，然后选择安装“<strong>使用C++的桌面开发</strong>”，其他均默认即可。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20220316165420.png\"></p>\n<h3 id=\"1-2-2-pycocotools\"><a href=\"#1-2-2-pycocotools\" class=\"headerlink\" title=\"1.2.2 pycocotools\"></a>1.2.2 pycocotools</h3><p>安装方法一：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install git+https://github.com/philferriere/cocoapi.git#subdirectory=PythonAPI</span><br></pre></td></tr></table></figure>\n\n<p>安装方法二：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/pdollar/coco.git</span><br><span class=\"line\"></span><br><span class=\"line\">cd coco/PythonAPI</span><br><span class=\"line\"></span><br><span class=\"line\">python setup.py build_ext --inplace</span><br><span class=\"line\">python setup.py build_ext install</span><br></pre></td></tr></table></figure>\n\n<p>如果安装失败（一般都会失败），尝试下载“Microsoft Visual C++ Build Tools.exe” ，官网链接：<a href=\"https://go.microsoft.com/fwlink/?LinkId=691126\">https://go.microsoft.com/fwlink/?LinkId=691126</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20220316171845.png\"></p>\n<p>如果在安装的过程中因网络问题失败，可以使用离线包，网盘链接：<a href=\"https://pan.baidu.com/s/1GeJ2c8MxnZP8lAYAwQACzg\">https://pan.baidu.com/s/1GeJ2c8MxnZP8lAYAwQACzg</a>，提取码<code>1114</code>。</p>\n<h3 id=\"1-2-3-Detectron2\"><a href=\"#1-2-3-Detectron2\" class=\"headerlink\" title=\"1.2.3 Detectron2\"></a>1.2.3 Detectron2</h3><p>使用Conda（推荐！之前有过同一个包使用conda安装的好用而pip安装的不好用的经历）或者pip下载包：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install cython</span><br><span class=\"line\">conda install ninja</span><br><span class=\"line\">conda install pywin32</span><br></pre></td></tr></table></figure>\n\n<p>下载Detectron2到本地:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/facebookresearch/detectron2.git</span><br><span class=\"line\">python -m pip install -e detectron2</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/facebookresearch/detectron2.git</span><br><span class=\"line\">cd detectron2 </span><br><span class=\"line\">python setup.py build develop</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-自定义数据集\"><a href=\"#2-自定义数据集\" class=\"headerlink\" title=\"2.  自定义数据集\"></a>2.  自定义数据集</h1><h2 id=\"2-1-关于COCO格式\"><a href=\"#2-1-关于COCO格式\" class=\"headerlink\" title=\"2.1 关于COCO格式\"></a>2.1 关于COCO格式</h2><p>Detectron2已经写好了COCO格式的数据集图像和标注的读取，因此通常减少工作量，可以自己写一个脚本将<strong>数据集转为COCO格式</strong>的标注。</p>\n<p>COCO的文件目录如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-coco/</span><br><span class=\"line\">    |-train2017/</span><br><span class=\"line\">    \t|-1.jpg</span><br><span class=\"line\">    \t|-2.jpg</span><br><span class=\"line\">    |-val2017/</span><br><span class=\"line\">    \t|-3.jpg</span><br><span class=\"line\">    \t|-4.jpg</span><br><span class=\"line\">    |-test2017/</span><br><span class=\"line\">    \t|-5.jpg</span><br><span class=\"line\">    \t|-6.jpg</span><br><span class=\"line\">    |-annotations/</span><br><span class=\"line\">    \t|-instances_train2017.json</span><br><span class=\"line\">    \t|-instances_val2017.json</span><br><span class=\"line\">    \t|-*.json</span><br></pre></td></tr></table></figure>\n\n<p>其中标注文件（json）最为重要，其格式如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;info&quot;</span>: &#123;<span class=\"comment\">//数据集信息，对于训练而言不重要</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;year&quot;</span>: int, </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;version&quot;</span>: str, </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;description&quot;</span>: str, </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;contributor&quot;</span>: str, </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;url&quot;</span>: str, </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;date_created&quot;</span>: datetime,</span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;images&quot;</span>: [&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;id&quot;</span>: int, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;width&quot;</span>: int, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;height&quot;</span>: int, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;file_name&quot;</span>: str, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;license&quot;</span>: int,</span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;flickr_url&quot;</span>: str,</span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;coco_url&quot;</span>: str,</span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;date_captured&quot;</span>: datetime, </span><br><span class=\"line\">\t&#125;,&#123;...&#125;], <span class=\"comment\">//列表</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;annotations&quot;</span>: [&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;id&quot;</span>: int, <span class=\"comment\">//标注id</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;image_id&quot;</span>: int, <span class=\"comment\">//所属图像id</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;category_id&quot;</span>: int, <span class=\"comment\">//类别id</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;segmentation&quot;</span>: RLE or [polygon], <span class=\"comment\">//图像分割标注</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;area&quot;</span>: float, <span class=\"comment\">//区域面积</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;bbox&quot;</span>: [x,y,width,height], <span class=\"comment\">//目标框左上角坐标以及宽高</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;iscrowd&quot;</span>: <span class=\"number\">0</span> or <span class=\"number\">1</span>, <span class=\"comment\">//是否密集</span></span><br><span class=\"line\">\t&#125;,&#123;...&#125;], <span class=\"comment\">//列表</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;categories&quot;</span>: [&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;id&quot;</span>: int, <span class=\"comment\">//类别序号</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;name&quot;</span>: str, <span class=\"comment\">//类别名称</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;supercategory&quot;</span>: str, <span class=\"comment\">//父类别</span></span><br><span class=\"line\">\t&#125;], <span class=\"comment\">//列表</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;licenses&quot;</span>: [&#123;<span class=\"comment\">//对于训练，不重要</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;id&quot;</span>: int, </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;name&quot;</span>: str, </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;url&quot;</span>: str,</span><br><span class=\"line\">\t&#125;], <span class=\"comment\">//列表</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-注册数据集\"><a href=\"#2-2-注册数据集\" class=\"headerlink\" title=\"2.2 注册数据集\"></a>2.2 注册数据集</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.data <span class=\"keyword\">import</span> DatasetCatalog, MetadataCatalog</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.data.datasets.register_coco <span class=\"keyword\">import</span> register_coco_instances</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DATA_ALL_CATEGORIES = [</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;airplane&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;ship&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">3</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;storage tank&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">4</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;baseball diamond&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;tennis court&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">6</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;basketball court&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">7</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;ground track field&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">8</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;harbor&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">9</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;bridge&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;vehicle&#x27;</span>&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">DATA_SPLITS = &#123;&#125;</span><br><span class=\"line\">DATA_SPLITS[<span class=\"string\">&#x27;nwpu_all&#x27;</span>] = &#123;</span><br><span class=\"line\">\t<span class=\"string\">&#x27;nwpu_all_trainval&#x27;</span>: (</span><br><span class=\"line\">\t\tos.path.join(DATA_ROOT,<span class=\"string\">&quot;positive image set&quot;</span>),</span><br><span class=\"line\">\t\tos.path.join(DATA_ROOT,<span class=\"string\">&#x27;trainval.json&#x27;</span>)</span><br><span class=\"line\">\t),</span><br><span class=\"line\">\t<span class=\"string\">&#x27;nwpu_all_test&#x27;</span>: (</span><br><span class=\"line\">\t\tos.path.join(DATA_ROOT,<span class=\"string\">&quot;positive image set&quot;</span>),</span><br><span class=\"line\">\t\tos.path.join(DATA_ROOT,<span class=\"string\">&#x27;test.json&#x27;</span>)</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_data_all_instance_meta</span>():</span></span><br><span class=\"line\">    thing_ids = [k[<span class=\"string\">&quot;id&quot;</span>] <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> DATA_ALL_CATEGORIES]</span><br><span class=\"line\">    thing_dataset_id_to_contiguous_id = &#123;k: i <span class=\"keyword\">for</span> i, k <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(thing_ids)&#125;</span><br><span class=\"line\">    thing_classes = [k[<span class=\"string\">&quot;name&quot;</span>] <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> DATA_ALL_CATEGORIES]</span><br><span class=\"line\">    ret = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;thing_dataset&quot;</span>: thing_dataset_id_to_contiguous_id,</span><br><span class=\"line\">        <span class=\"string\">&quot;thing_classes&quot;</span>: thing_classes,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_builtin_metadata</span>(<span class=\"params\">dataset_name</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> dataset_name == <span class=\"string\">&quot;nwpu_all&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _get_data_instance_meta(DATA_ALL_CATEGORIES)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register_all</span>(<span class=\"params\">root</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> dataset_name, splits_per_dataset <span class=\"keyword\">in</span> DATA_SPLITS.items():</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key, (image_root, json_file) <span class=\"keyword\">in</span> splits_per_dataset.items():</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> os.path.exists(os.path.join(root, json_file))</span><br><span class=\"line\">            register_coco_instances(</span><br><span class=\"line\">                key,</span><br><span class=\"line\">                _get_builtin_metadata(dataset_name),</span><br><span class=\"line\">                os.path.join(root, json_file) <span class=\"keyword\">if</span> <span class=\"string\">&quot;://&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> json_file <span class=\"keyword\">else</span> json_file,</span><br><span class=\"line\">                os.path.join(root, image_root),</span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\">DATA_ROOT = <span class=\"string\">&quot;D:/GISP/XIEMINGJIE/Code/Detection/dataset/NWPU VHR-10 dataset/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">register_all(DATA_ROOT)</span><br></pre></td></tr></table></figure>\n\n<p>此时已完成<code>nwpu_all_trainval</code>以及<code>nwpu_all_test</code>数据集的注册，可以通过代码查看：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(DatasetCatalog.get(<span class=\"string\">&quot;nwpu_all_trainval&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(DatasetCatalog.get(<span class=\"string\">&quot;nwpu_all_test&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>当然，如果不想要使用COCO格式数据集也可以自定义注册函数，可以参考<code>register_coco_instances</code>的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register_coco_instances</span>(<span class=\"params\">name, metadata, json_file, image_root</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">        name (str): the name that identifies a dataset, e.g. &quot;coco_2014_train&quot;.</span></span><br><span class=\"line\"><span class=\"string\">        metadata (dict): extra metadata associated with this dataset.  You can</span></span><br><span class=\"line\"><span class=\"string\">            leave it as an empty dict.</span></span><br><span class=\"line\"><span class=\"string\">        json_file (str): path to the json instance annotation file.</span></span><br><span class=\"line\"><span class=\"string\">        image_root (str or path-like): directory which contains all the images.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(name, <span class=\"built_in\">str</span>), name</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(json_file, (<span class=\"built_in\">str</span>, os.PathLike)), json_file</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(image_root, (<span class=\"built_in\">str</span>, os.PathLike)), image_root</span><br><span class=\"line\">    <span class=\"comment\"># 1. register a function which returns dicts</span></span><br><span class=\"line\">    DatasetCatalog.register(name, <span class=\"keyword\">lambda</span>: load_coco_json(json_file, image_root, name))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2. Optionally, add metadata about this dataset,</span></span><br><span class=\"line\">    <span class=\"comment\"># since they might be useful in evaluation, visualization or logging</span></span><br><span class=\"line\">    MetadataCatalog.get(name).<span class=\"built_in\">set</span>(</span><br><span class=\"line\">        json_file=json_file, image_root=image_root, evaluator_type=<span class=\"string\">&quot;coco&quot;</span>, **metadata</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>load_coco_json</code>函数的功能是读取数据集标注文件，并以固定的形式返回，详细可见<a href=\"https://detectron2.readthedocs.io/en/latest/tutorials/datasets.html#register-a-dataset\">官网</a>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># load_coco_json返回的是一个列表</span></span><br><span class=\"line\"><span class=\"comment\"># 返回格式如下：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_coco_json</span>(<span class=\"params\">json_file, image_root, dataset_name=<span class=\"literal\">None</span>, extra_annotation_keys=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">\t<span class=\"comment\"># read and do something</span></span><br><span class=\"line\">\t<span class=\"comment\"># ...</span></span><br><span class=\"line\">\t<span class=\"comment\"># generate dataset_dicts like: ↓</span></span><br><span class=\"line\">    dataset_dicts = [&#123;<span class=\"string\">&#x27;file_name&#x27;</span>: <span class=\"string\">&#x27;...\\\\images\\\\001.jpg&#x27;</span>, <span class=\"string\">&#x27;height&#x27;</span>: <span class=\"number\">939</span>, <span class=\"string\">&#x27;width&#x27;</span>: <span class=\"number\">1356</span>, <span class=\"string\">&#x27;image_id&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;annotations&#x27;</span>: [&#123;<span class=\"string\">&#x27;iscrowd&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;bbox&#x27;</span>: [<span class=\"number\">903</span>, <span class=\"number\">57</span>, <span class=\"number\">129</span>, <span class=\"number\">123</span>], <span class=\"string\">&#x27;category_id&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;bbox_mode&#x27;</span>: &lt;BoxMode.XYWH_ABS: <span class=\"number\">1</span>&gt;&#125;]&#125;, &#123;...&#125;]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dataset_dicts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-可视化工具\"><a href=\"#2-3-可视化工具\" class=\"headerlink\" title=\"2.3 可视化工具\"></a>2.3 可视化工具</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.data <span class=\"keyword\">import</span> MetadataCatalog</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.data <span class=\"keyword\">import</span> detection_utils <span class=\"keyword\">as</span> utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.utils.visualizer <span class=\"keyword\">import</span> Visualizer</span><br><span class=\"line\"></span><br><span class=\"line\">datasets_dicts = DatasetCatalog.get(<span class=\"string\">&quot;nwpu_all_trainval_1shot&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> random.sample(datasets_dicts, <span class=\"number\">1</span>):</span><br><span class=\"line\">    img = utils.read_image(data[<span class=\"string\">&quot;file_name&quot;</span>])</span><br><span class=\"line\">    visual = Visualizer(img, metadata=MetadataCatalog.get(<span class=\"string\">&quot;nwpu_all_trainval&quot;</span>),scale=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    vis = visual.draw_dataset_dict(data)</span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">&quot;window&quot;</span>, vis.get_image()[:, :, ::-<span class=\"number\">1</span>])</span><br><span class=\"line\">    cv2.waitKey()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20220316211311.png\"></p>\n<h2 id=\"2-4-自定义数据增强\"><a href=\"#2-4-自定义数据增强\" class=\"headerlink\" title=\"2.4 自定义数据增强\"></a>2.4 自定义数据增强</h2><p>在注册了数据集之后就可以用<code>detectron2.data.build_detection_train_loader</code>和<code>detectron2.data.build_detection_test_loader</code>构建<code>Dataloader</code>，即数据集的加载方式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> detectron2.config <span class=\"keyword\">import</span> get_cfg</span><br><span class=\"line\"><span class=\"keyword\">import</span> detectron2.data.transforms <span class=\"keyword\">as</span> T</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.model_zoo <span class=\"keyword\">import</span> model_zoo</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.data <span class=\"keyword\">import</span> build_detection_train_loader</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.data <span class=\"keyword\">import</span> DatasetMapper   <span class=\"comment\"># the default mapper</span></span><br><span class=\"line\"></span><br><span class=\"line\">cfg = get_cfg()</span><br><span class=\"line\">cfg.merge_from_file(model_zoo.get_config_file(<span class=\"string\">&quot;COCO-Detection/retinanet_R_50_FPN_1x.yaml&quot;</span>))</span><br><span class=\"line\">cfg.DATASETS.TRAIN = (<span class=\"string\">&quot;nwpu_all_trainval&quot;</span>,)</span><br><span class=\"line\"></span><br><span class=\"line\">mapper = DatasetMapper(cfg,is_train=<span class=\"literal\">True</span>,augmentations=[T.Resize((<span class=\"number\">800</span>, <span class=\"number\">800</span>))])</span><br><span class=\"line\">train_loader = build_detection_train_loader(cfg,mapper=mapper)</span><br></pre></td></tr></table></figure>\n\n<p><code>build_detection_train_loader()</code>的参数如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build_detection_train_loader(</span><br><span class=\"line\">    dataset,</span><br><span class=\"line\">    *,</span><br><span class=\"line\">    mapper,</span><br><span class=\"line\">    sampler=<span class=\"literal\">None</span>,</span><br><span class=\"line\">    total_batch_size,</span><br><span class=\"line\">    aspect_ratio_grouping=<span class=\"literal\">True</span>,</span><br><span class=\"line\">    num_workers=<span class=\"number\">0</span>,</span><br><span class=\"line\">    collate_fn=<span class=\"literal\">None</span>,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>mapper</code>对应的就是数据增强部分，默认为<code>detectron2.data.DatasetMapper</code>，<code>sampler</code>对应的采样策略部分，通常只需要关注<code>mapper</code>即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DatasetMapper</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @configurable</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,is_train: <span class=\"built_in\">bool</span></span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">from_config</span>(<span class=\"params\">cls, cfg, is_train: <span class=\"built_in\">bool</span> = <span class=\"literal\">True</span></span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_transform_annotations</span>(<span class=\"params\">self, dataset_dict, transforms, image_shape</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">self, dataset_dict</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataset_dict</span><br></pre></td></tr></table></figure>\n\n<p>官方给的自定义简化DataMapper：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> detectron2.data <span class=\"keyword\">import</span> detection_utils <span class=\"keyword\">as</span> utils</span><br><span class=\"line\"><span class=\"keyword\">import</span> detectron2.data.transforms <span class=\"keyword\">as</span> T</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mapper</span>(<span class=\"params\">dataset_dict</span>):</span></span><br><span class=\"line\">    dataset_dict = copy.deepcopy(dataset_dict)  <span class=\"comment\"># it will be modified by code below</span></span><br><span class=\"line\">    <span class=\"comment\"># can use other ways to read image</span></span><br><span class=\"line\">    image = utils.read_image(dataset_dict[<span class=\"string\">&quot;file_name&quot;</span>], <span class=\"built_in\">format</span>=<span class=\"string\">&quot;BGR&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># &quot;Data Augmentation&quot;</span></span><br><span class=\"line\">    auginput = T.AugInput(image)</span><br><span class=\"line\">    transform = T.Resize((<span class=\"number\">800</span>, <span class=\"number\">800</span>))(auginput)</span><br><span class=\"line\">    image = torch.from_numpy(auginput.image.transpose(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">    annos = [</span><br><span class=\"line\">        utils.transform_instance_annotations(annotation, [transform], image.shape[<span class=\"number\">1</span>:])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> annotation <span class=\"keyword\">in</span> dataset_dict.pop(<span class=\"string\">&quot;annotations&quot;</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\"># create the format that the model expects</span></span><br><span class=\"line\">       <span class=\"string\">&quot;image&quot;</span>: image,</span><br><span class=\"line\">       <span class=\"string\">&quot;instances&quot;</span>: utils.annotations_to_instances(annos, image.shape[<span class=\"number\">1</span>:])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dataloader = build_detection_train_loader(cfg, mapper=mapper)</span><br></pre></td></tr></table></figure>\n\n<p>因此自定义的数据增强需要满足，输入为<code>dataset_dict</code>，输出为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"string\">&quot;images&quot;</span>: image_tensor,</span><br><span class=\"line\"> <span class=\"string\">&quot;instances&quot;</span>: utils.annotations_to_instances =&gt; Instances类</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-自定义模型\"><a href=\"#3-自定义模型\" class=\"headerlink\" title=\"3. 自定义模型\"></a>3. 自定义模型</h1><p>Detectron2的模型是分模块的，它将目标检测模型拆分为了4个核心模块：<code>backbone</code>，<code>proposal_generator</code>，<code>roi_heads</code>以及<code>meta_arch</code>。</p>\n<h2 id=\"3-1-特征提取网络（backbone）\"><a href=\"#3-1-特征提取网络（backbone）\" class=\"headerlink\" title=\"3.1 特征提取网络（backbone）\"></a>3.1 特征提取网络（backbone）</h2><p>在<code>detectron2.modeling.backbone</code>路径下可以看到，目前只有<code>ResNet</code>、<code>FPN</code>和<code>RegNet</code></p>\n<p>可直接使用的<code>backbone</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build_resnet_backbone</span><br><span class=\"line\">build_resnet_fpn_backbone</span><br><span class=\"line\">build_retinanet_resnet_fpn_backbone</span><br></pre></td></tr></table></figure>\n\n<p>官方的自定义<code>backbone</code>的案例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> detectron2.modeling <span class=\"keyword\">import</span> BACKBONE_REGISTRY, Backbone, ShapeSpec</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@BACKBONE_REGISTRY.register()</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToyBackbone</span>(<span class=\"params\">Backbone</span>):</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, cfg, input_shape</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">    <span class=\"comment\"># create your own backbone</span></span><br><span class=\"line\">    self.conv1 = nn.Conv2d(<span class=\"number\">3</span>, <span class=\"number\">64</span>, kernel_size=<span class=\"number\">7</span>, stride=<span class=\"number\">16</span>, padding=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span>(<span class=\"params\">self, image</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;conv1&quot;</span>: self.conv1(image)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">output_shape</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;conv1&quot;</span>: ShapeSpec(channels=<span class=\"number\">64</span>, stride=<span class=\"number\">16</span>)&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-候选框生成器（proposal-generator）\"><a href=\"#3-2-候选框生成器（proposal-generator）\" class=\"headerlink\" title=\"3.2 候选框生成器（proposal_generator）\"></a>3.2 候选框生成器（proposal_generator）</h2><p>同样可以自定义注册</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PROPOSAL_GENERATOR_REGISTRY.register()</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToyRPN</span>(<span class=\"params\">RPN</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">\t    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RPN_HEAD_REGISTRY.register()</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToyRPNHead</span>(<span class=\"params\">StandardRPNHead</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">\t    <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">\t    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-3-检测器（roi-heads）\"><a href=\"#3-3-检测器（roi-heads）\" class=\"headerlink\" title=\"3.3 检测器（roi_heads）\"></a>3.3 检测器（roi_heads）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ROI_MASK_HEAD_REGISTRY.register()</span></span><br><span class=\"line\"><span class=\"meta\">@ROI_KEYPOINT_HEAD_REGISTRY.register()</span></span><br><span class=\"line\"><span class=\"meta\">@ROI_HEADS_REGISTRY.register()</span></span><br><span class=\"line\"><span class=\"meta\">@ROI_BOX_HEAD_REGISTRY.register()</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-4-模型框架（meta-arch）\"><a href=\"#3-4-模型框架（meta-arch）\" class=\"headerlink\" title=\"3.4 模型框架（meta_arch）\"></a>3.4 模型框架（meta_arch）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@META_ARCH_REGISTRY.register()</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToyNet</span>(<span class=\"params\">nn.Module</span>):</span></span><br><span class=\"line\"><span class=\"meta\">    @configurable</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">from_config</span>(<span class=\"params\">cls, cfg</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward_training</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loss</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @torch.no_grad()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">label_anchors</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward_inference</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inference_single_image</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>具体可参考官方复现的<a href=\"https://github.com/facebookresearch/detectron2/tree/main/projects\">projects</a></p>\n<h1 id=\"4-模型训练\"><a href=\"#4-模型训练\" class=\"headerlink\" title=\"4. 模型训练\"></a>4. 模型训练</h1><h2 id=\"4-1-默认训练\"><a href=\"#4-1-默认训练\" class=\"headerlink\" title=\"4.1 默认训练\"></a>4.1 默认训练</h2><p>一般而言，我们可以继承使用默认的目标检测任务训练器<code>DefalutTrainer</code>，而<code>DefalutTrainer</code>又是继承自<code>TrainerBase</code>，<code>TrainerBase</code>中又使用到了<code>HookBase</code>。我的理解是<code>HookBase</code>和<code>TrainerBase</code>是将一个训练过程抽象并拆分成阶段步骤的过程，先看<code>HookBase</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HookBase</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">before_train</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Called before the first iteration.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_train</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Called after the last iteration.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">before_step</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Called before each iteration.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_step</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Called after each iteration.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">state_dict</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于训练而言，它将一个完整的训练拆分成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrainerBase</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self._hooks: <span class=\"type\">List</span>[HookBase] = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register_hooks</span>(<span class=\"params\">self, hooks: <span class=\"type\">List</span>[<span class=\"type\">Optional</span>[HookBase]]</span>) -&gt; <span class=\"literal\">None</span>:</span></span><br><span class=\"line\">        hooks = [h <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> hooks <span class=\"keyword\">if</span> h <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> hooks:</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(h, HookBase)</span><br><span class=\"line\">            h.trainer = weakref.proxy(self)</span><br><span class=\"line\">        self._hooks.extend(hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train</span>(<span class=\"params\">self, start_iter: <span class=\"built_in\">int</span>, max_iter: <span class=\"built_in\">int</span></span>):</span></span><br><span class=\"line\">        self.<span class=\"built_in\">iter</span> = self.start_iter = start_iter</span><br><span class=\"line\">        self.max_iter = max_iter</span><br><span class=\"line\">        <span class=\"keyword\">with</span> EventStorage(start_iter) <span class=\"keyword\">as</span> self.storage:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                self.before_train()</span><br><span class=\"line\">                <span class=\"keyword\">for</span> self.<span class=\"built_in\">iter</span> <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start_iter, max_iter):</span><br><span class=\"line\">                    self.before_step()</span><br><span class=\"line\">                    self.run_step()</span><br><span class=\"line\">                    self.after_step()</span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                self.after_train()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">before_train</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> self._hooks:</span><br><span class=\"line\">            h.before_train()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_train</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.storage.<span class=\"built_in\">iter</span> = self.<span class=\"built_in\">iter</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> self._hooks:</span><br><span class=\"line\">            h.after_train()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">before_step</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.storage.<span class=\"built_in\">iter</span> = self.<span class=\"built_in\">iter</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> self._hooks:</span><br><span class=\"line\">            h.before_step()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_step</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> self._hooks:</span><br><span class=\"line\">            h.after_step()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_step</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">state_dict</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_state_dict</span>(<span class=\"params\">self, state_dict</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>简化一点，它将一个训练过程抽象成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hook.before_train()</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">iter</span> <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start_iter, max_iter):</span><br><span class=\"line\">    hook.before_step()</span><br><span class=\"line\">    trainer.run_step()</span><br><span class=\"line\">    hook.after_step()</span><br><span class=\"line\"><span class=\"built_in\">iter</span> += <span class=\"number\">1</span></span><br><span class=\"line\">hook.after_train()</span><br></pre></td></tr></table></figure>\n\n<p>具体到目标检测任务，<code>DefaultTrainer</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultTrainer</span>(<span class=\"params\">TrainerBase</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, cfg</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_hooks</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_writers</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>(<span class=\"params\">cls, cfg, model, evaluators=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"comment\"># </span></span><br><span class=\"line\">    <span class=\"comment\"># a lot of</span></span><br><span class=\"line\">    <span class=\"comment\"># def ...(...):</span></span><br><span class=\"line\">    <span class=\"comment\">#     .....</span></span><br><span class=\"line\">    <span class=\"comment\"># </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_train_loader</span>(<span class=\"params\">cls, cfg</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> build_detection_train_loader(cfg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_test_loader</span>(<span class=\"params\">cls, cfg, dataset_name</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> build_detection_test_loader(cfg, dataset_name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_evaluator</span>(<span class=\"params\">cls, cfg, dataset_name</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-自定义训练\"><a href=\"#4-2-自定义训练\" class=\"headerlink\" title=\"4.2 自定义训练\"></a>4.2 自定义训练</h2><p>由于Detectron2已经将训练过程模块化，因此只需要修改对应模块即可，而一般而言，我们只需要修改数据加载和<code>evaluate</code>部分：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> detectron2.engine <span class=\"keyword\">import</span> DefaultTrainer</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trainer</span>(<span class=\"params\">DefaultTrainer</span>):</span></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_evaluator</span>(<span class=\"params\">cls, cfg, dataset_name, output_folder=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">        evaluator_list = []</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> DatasetEvaluators(evaluator_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_test_loader</span>(<span class=\"params\">cls, cfg, dataset_name</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> build_detection_test_loader(cfg, dataset_name, mapper=my_mapper(cfg,<span class=\"string\">&quot;test&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_train_loader</span>(<span class=\"params\">cls, cfg</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> build_detection_train_loader(cfg, mapper=my_mapper(cfg, <span class=\"string\">&quot;train&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-完整训练流程\"><a href=\"#4-3-完整训练流程\" class=\"headerlink\" title=\"4.3 完整训练流程\"></a>4.3 完整训练流程</h2><p>参考<code>tools/train_net.py</code>或者<code>tools/plain_train_net.py</code>，已经写的非常详细了👍，注意别忘了导入自己写好的注册数据集以及注册模型的文件，只要导入了就会自动注册，就可以在配置文件中使用。</p>\n<h1 id=\"5-配置文件\"><a href=\"#5-配置文件\" class=\"headerlink\" title=\"5. 配置文件\"></a>5. 配置文件</h1><p>参考<code>configs</code>文件夹下的<code>yaml</code>文件格式，，可以通过<code>__BASE__</code>继承基础配置文件，还可以直接覆盖之前的配置，如<code>retinanet_R_50_FPN_3x.yaml</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">_BASE_:</span> <span class=\"string\">&quot;../Base-RetinaNet.yaml&quot;</span></span><br><span class=\"line\"><span class=\"attr\">MODEL:</span></span><br><span class=\"line\">  <span class=\"attr\">WEIGHTS:</span> <span class=\"string\">&quot;detectron2://ImageNetPretrained/MSRA/R-50.pkl&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">RESNETS:</span></span><br><span class=\"line\">    <span class=\"attr\">DEPTH:</span> <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"attr\">SOLVER:</span></span><br><span class=\"line\">  <span class=\"attr\">STEPS:</span> <span class=\"string\">(210000,</span> <span class=\"number\">250000</span><span class=\"string\">)</span></span><br><span class=\"line\">  <span class=\"attr\">MAX_ITER:</span> <span class=\"number\">270000</span></span><br></pre></td></tr></table></figure>\n\n<p>查看全部配置项：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> detectron2.config <span class=\"keyword\">import</span> get_cfg</span><br><span class=\"line\">cfg = get_cfg()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cfg)</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cfg.dump())</span><br></pre></td></tr></table></figure>\n\n<p>在python文件中修改配置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfg.SOLVER.BASE_LR = <span class=\"number\">0.001</span></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">cfg.merge_from_list([<span class=\"string\">&quot;SOLVER.BASE_LR&quot;</span>, <span class=\"string\">&quot;0.001&quot;</span>])</span><br></pre></td></tr></table></figure>\n\n<p>合并多个文件中的配置项：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfg.merge_from_file(<span class=\"string\">&quot;my_cfg.yaml&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>由于配置项本质上还是转换成了字典类型，因此可以直接从python文件导入配置，并且也提供了python格式的配置文件该怎么进行训练的示例，参考<code>tools/lazyconfig_train_net.py</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.py</span></span><br><span class=\"line\">NEW_MODEL = <span class=\"built_in\">dict</span>(NUM=<span class=\"number\">1</span>,SIZE=<span class=\"built_in\">dict</span>(W=<span class=\"number\">2</span>,H=<span class=\"number\">3</span>))</span><br><span class=\"line\">NEW_OPT = <span class=\"built_in\">dict</span>(NAME=<span class=\"string\">&quot;hhhh&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.config <span class=\"keyword\">import</span> LazyConfig</span><br><span class=\"line\">cfg = LazyConfig.load(<span class=\"string\">&quot;config.py&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> cfg.NEW_MODEL.SIZE.W==<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># cfg = LazyConfig.load(args.config_file)</span></span><br><span class=\"line\"><span class=\"comment\"># cfg = LazyConfig.apply_overrides(cfg, args.opts)</span></span><br></pre></td></tr></table></figure>\n\n<p>并且Detectron2还提供了一个帮助创建配置字典的函数，<code>LazyCall</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> detectron2.config <span class=\"keyword\">import</span> LazyCall <span class=\"keyword\">as</span> L</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.modeling.backbone <span class=\"keyword\">import</span> RegNet</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.modeling.backbone.regnet <span class=\"keyword\">import</span> SimpleStem, ResBottleneckBlock</span><br><span class=\"line\"></span><br><span class=\"line\">bottom_up = L(RegNet)(</span><br><span class=\"line\">    stem_class=SimpleStem,</span><br><span class=\"line\">    stem_width=<span class=\"number\">32</span>,</span><br><span class=\"line\">    block_class=ResBottleneckBlock,</span><br><span class=\"line\">    depth=<span class=\"number\">23</span>,</span><br><span class=\"line\">    w_a=<span class=\"number\">38.65</span>,</span><br><span class=\"line\">    w_0=<span class=\"number\">96</span>,</span><br><span class=\"line\">    w_m=<span class=\"number\">2.43</span>,</span><br><span class=\"line\">    group_width=<span class=\"number\">40</span>,</span><br><span class=\"line\">    norm=<span class=\"string\">&quot;SyncBN&quot;</span>,</span><br><span class=\"line\">    out_features=[<span class=\"string\">&quot;s1&quot;</span>, <span class=\"string\">&quot;s2&quot;</span>, <span class=\"string\">&quot;s3&quot;</span>, <span class=\"string\">&quot;s4&quot;</span>],</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(bottom_up)</span><br></pre></td></tr></table></figure>","more":"<p><code>Detectron2</code>是<code>Facebook AI Research</code>的检测和分割框架，其主要基于<code>PyTorch</code>实现，但具有更模块化设计，因此它是灵活且便于扩展的，具体简介可见<a href=\"https://github.com/facebookresearch/detectron2\">Github库</a>和<a href=\"https://ai.facebook.com/blog/-detectron2-a-pytorch-based-modular-object-detection-library-/\">Meta AI Blog Post</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@misc&#123;wu2019detectron2,</span><br><span class=\"line\">  author =       &#123;Yuxin Wu and Alexander Kirillov and Francisco Massa and</span><br><span class=\"line\"> Wan-Yen Lo and Ross Girshick&#125;,</span><br><span class=\"line\">  title =        &#123;Detectron2&#125;,</span><br><span class=\"line\">  howpublished = &#123;\\url&#123;https://github.com/facebookresearch/detectron2&#125;&#125;,</span><br><span class=\"line\">  year =         &#123;2019&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"1-Detectron2安装\"><a href=\"#1-Detectron2安装\" class=\"headerlink\" title=\"1. Detectron2安装\"></a>1. Detectron2安装</h1><blockquote>\n<p>首先官方要求的环境条件如下：</p>\n<ul>\n<li>Linux or macOS with Python ≥ 3.6</li>\n<li>PyTorch ≥ 1.8 and <a href=\"https://github.com/pytorch/vision/\">torchvision</a> that matches the PyTorch installation. Install them together at <a href=\"https://pytorch.org/\">pytorch.org</a> to make sure of this</li>\n<li>OpenCV is optional but needed by demo and visualization</li>\n<li> gcc &amp; g++ ≥ 5.4 are required</li>\n<li><a href=\"https://ninja-build.org/\">ninja</a> is optional but recommended for faster build</li>\n<li>Cuda &amp; Cudnn</li>\n</ul>\n</blockquote>\n<p>因此想要安装并使用Detectron2，需要有：</p>\n<ul>\n<li>环境：Python，Cuda，Cudnn，gcc&amp;g++</li>\n<li>Python包：pytorch，torchvision，python-opencv</li>\n<li>推荐：Anaconda</li>\n</ul>\n<h2 id=\"1-1-Linux\"><a href=\"#1-1-Linux\" class=\"headerlink\" title=\"1.1 Linux\"></a>1.1 Linux</h2><p>Linux安装直接按照<a href=\"https://detectron2.readthedocs.io/en/latest/tutorials/install.html\">官方文档</a>的安装步骤即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install &#x27;git+https://github.com/facebookresearch/detectron2.git&#x27;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> (add --user <span class=\"keyword\">if</span> you don<span class=\"string\">&#x27;t have permission)</span></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\"> Or, to install it from a local clone:</span></span></span><br><span class=\"line\">git clone https://github.com/facebookresearch/detectron2.git</span><br><span class=\"line\">python -m pip install -e detectron2</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\"> On macOS, you may need to prepend the above commands with a few environment variables:</span></span></span><br><span class=\"line\">CC=clang CXX=clang++ ARCHFLAGS=&quot;-arch x86_64&quot; python -m pip install ...</span><br></pre></td></tr></table></figure>\n\n<p>如果以上安装失败，可以尝试直接安装预编译文件，同样在<a href=\"https://detectron2.readthedocs.io/en/latest/tutorials/install.html\">官方文档有提供</a></p>\n<h2 id=\"1-2-Windows\"><a href=\"#1-2-Windows\" class=\"headerlink\" title=\"1.2 Windows\"></a>1.2 Windows</h2><h3 id=\"1-2-1-VS2019-C-编译环境\"><a href=\"#1-2-1-VS2019-C-编译环境\" class=\"headerlink\" title=\"1.2.1 VS2019 C++编译环境\"></a>1.2.1 VS2019 C++编译环境</h3><p>Windows想要安装Detectron2，需要提前安装<strong>Microsoft Visual Studio 2019</strong>，然后选择安装“<strong>使用C++的桌面开发</strong>”，其他均默认即可。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20220316165420.png\"></p>\n<h3 id=\"1-2-2-pycocotools\"><a href=\"#1-2-2-pycocotools\" class=\"headerlink\" title=\"1.2.2 pycocotools\"></a>1.2.2 pycocotools</h3><p>安装方法一：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install git+https://github.com/philferriere/cocoapi.git#subdirectory=PythonAPI</span><br></pre></td></tr></table></figure>\n\n<p>安装方法二：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/pdollar/coco.git</span><br><span class=\"line\"></span><br><span class=\"line\">cd coco/PythonAPI</span><br><span class=\"line\"></span><br><span class=\"line\">python setup.py build_ext --inplace</span><br><span class=\"line\">python setup.py build_ext install</span><br></pre></td></tr></table></figure>\n\n<p>如果安装失败（一般都会失败），尝试下载“Microsoft Visual C++ Build Tools.exe” ，官网链接：<a href=\"https://go.microsoft.com/fwlink/?LinkId=691126\">https://go.microsoft.com/fwlink/?LinkId=691126</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20220316171845.png\"></p>\n<p>如果在安装的过程中因网络问题失败，可以使用离线包，网盘链接：<a href=\"https://pan.baidu.com/s/1GeJ2c8MxnZP8lAYAwQACzg\">https://pan.baidu.com/s/1GeJ2c8MxnZP8lAYAwQACzg</a>，提取码<code>1114</code>。</p>\n<h3 id=\"1-2-3-Detectron2\"><a href=\"#1-2-3-Detectron2\" class=\"headerlink\" title=\"1.2.3 Detectron2\"></a>1.2.3 Detectron2</h3><p>使用Conda（推荐！之前有过同一个包使用conda安装的好用而pip安装的不好用的经历）或者pip下载包：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install cython</span><br><span class=\"line\">conda install ninja</span><br><span class=\"line\">conda install pywin32</span><br></pre></td></tr></table></figure>\n\n<p>下载Detectron2到本地:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/facebookresearch/detectron2.git</span><br><span class=\"line\">python -m pip install -e detectron2</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/facebookresearch/detectron2.git</span><br><span class=\"line\">cd detectron2 </span><br><span class=\"line\">python setup.py build develop</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-自定义数据集\"><a href=\"#2-自定义数据集\" class=\"headerlink\" title=\"2.  自定义数据集\"></a>2.  自定义数据集</h1><h2 id=\"2-1-关于COCO格式\"><a href=\"#2-1-关于COCO格式\" class=\"headerlink\" title=\"2.1 关于COCO格式\"></a>2.1 关于COCO格式</h2><p>Detectron2已经写好了COCO格式的数据集图像和标注的读取，因此通常减少工作量，可以自己写一个脚本将<strong>数据集转为COCO格式</strong>的标注。</p>\n<p>COCO的文件目录如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-coco/</span><br><span class=\"line\">    |-train2017/</span><br><span class=\"line\">    \t|-1.jpg</span><br><span class=\"line\">    \t|-2.jpg</span><br><span class=\"line\">    |-val2017/</span><br><span class=\"line\">    \t|-3.jpg</span><br><span class=\"line\">    \t|-4.jpg</span><br><span class=\"line\">    |-test2017/</span><br><span class=\"line\">    \t|-5.jpg</span><br><span class=\"line\">    \t|-6.jpg</span><br><span class=\"line\">    |-annotations/</span><br><span class=\"line\">    \t|-instances_train2017.json</span><br><span class=\"line\">    \t|-instances_val2017.json</span><br><span class=\"line\">    \t|-*.json</span><br></pre></td></tr></table></figure>\n\n<p>其中标注文件（json）最为重要，其格式如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;info&quot;</span>: &#123;<span class=\"comment\">//数据集信息，对于训练而言不重要</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;year&quot;</span>: int, </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;version&quot;</span>: str, </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;description&quot;</span>: str, </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;contributor&quot;</span>: str, </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;url&quot;</span>: str, </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;date_created&quot;</span>: datetime,</span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">\t<span class=\"attr\">&quot;images&quot;</span>: [&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;id&quot;</span>: int, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;width&quot;</span>: int, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;height&quot;</span>: int, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;file_name&quot;</span>: str, <span class=\"comment\">//必要</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;license&quot;</span>: int,</span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;flickr_url&quot;</span>: str,</span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;coco_url&quot;</span>: str,</span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;date_captured&quot;</span>: datetime, </span><br><span class=\"line\">\t&#125;,&#123;...&#125;], <span class=\"comment\">//列表</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;annotations&quot;</span>: [&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;id&quot;</span>: int, <span class=\"comment\">//标注id</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;image_id&quot;</span>: int, <span class=\"comment\">//所属图像id</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;category_id&quot;</span>: int, <span class=\"comment\">//类别id</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;segmentation&quot;</span>: RLE or [polygon], <span class=\"comment\">//图像分割标注</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;area&quot;</span>: float, <span class=\"comment\">//区域面积</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;bbox&quot;</span>: [x,y,width,height], <span class=\"comment\">//目标框左上角坐标以及宽高</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;iscrowd&quot;</span>: <span class=\"number\">0</span> or <span class=\"number\">1</span>, <span class=\"comment\">//是否密集</span></span><br><span class=\"line\">\t&#125;,&#123;...&#125;], <span class=\"comment\">//列表</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;categories&quot;</span>: [&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;id&quot;</span>: int, <span class=\"comment\">//类别序号</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;name&quot;</span>: str, <span class=\"comment\">//类别名称</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;supercategory&quot;</span>: str, <span class=\"comment\">//父类别</span></span><br><span class=\"line\">\t&#125;], <span class=\"comment\">//列表</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;licenses&quot;</span>: [&#123;<span class=\"comment\">//对于训练，不重要</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;id&quot;</span>: int, </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;name&quot;</span>: str, </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;url&quot;</span>: str,</span><br><span class=\"line\">\t&#125;], <span class=\"comment\">//列表</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-注册数据集\"><a href=\"#2-2-注册数据集\" class=\"headerlink\" title=\"2.2 注册数据集\"></a>2.2 注册数据集</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.data <span class=\"keyword\">import</span> DatasetCatalog, MetadataCatalog</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.data.datasets.register_coco <span class=\"keyword\">import</span> register_coco_instances</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DATA_ALL_CATEGORIES = [</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;airplane&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;ship&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">3</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;storage tank&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">4</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;baseball diamond&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">5</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;tennis court&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">6</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;basketball court&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">7</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;ground track field&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">8</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;harbor&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">9</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;bridge&#x27;</span>&#125;,</span><br><span class=\"line\"> &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"number\">10</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;vehicle&#x27;</span>&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">DATA_SPLITS = &#123;&#125;</span><br><span class=\"line\">DATA_SPLITS[<span class=\"string\">&#x27;nwpu_all&#x27;</span>] = &#123;</span><br><span class=\"line\">\t<span class=\"string\">&#x27;nwpu_all_trainval&#x27;</span>: (</span><br><span class=\"line\">\t\tos.path.join(DATA_ROOT,<span class=\"string\">&quot;positive image set&quot;</span>),</span><br><span class=\"line\">\t\tos.path.join(DATA_ROOT,<span class=\"string\">&#x27;trainval.json&#x27;</span>)</span><br><span class=\"line\">\t),</span><br><span class=\"line\">\t<span class=\"string\">&#x27;nwpu_all_test&#x27;</span>: (</span><br><span class=\"line\">\t\tos.path.join(DATA_ROOT,<span class=\"string\">&quot;positive image set&quot;</span>),</span><br><span class=\"line\">\t\tos.path.join(DATA_ROOT,<span class=\"string\">&#x27;test.json&#x27;</span>)</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_data_all_instance_meta</span>():</span></span><br><span class=\"line\">    thing_ids = [k[<span class=\"string\">&quot;id&quot;</span>] <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> DATA_ALL_CATEGORIES]</span><br><span class=\"line\">    thing_dataset_id_to_contiguous_id = &#123;k: i <span class=\"keyword\">for</span> i, k <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(thing_ids)&#125;</span><br><span class=\"line\">    thing_classes = [k[<span class=\"string\">&quot;name&quot;</span>] <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> DATA_ALL_CATEGORIES]</span><br><span class=\"line\">    ret = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;thing_dataset&quot;</span>: thing_dataset_id_to_contiguous_id,</span><br><span class=\"line\">        <span class=\"string\">&quot;thing_classes&quot;</span>: thing_classes,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_builtin_metadata</span>(<span class=\"params\">dataset_name</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> dataset_name == <span class=\"string\">&quot;nwpu_all&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _get_data_instance_meta(DATA_ALL_CATEGORIES)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register_all</span>(<span class=\"params\">root</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> dataset_name, splits_per_dataset <span class=\"keyword\">in</span> DATA_SPLITS.items():</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key, (image_root, json_file) <span class=\"keyword\">in</span> splits_per_dataset.items():</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> os.path.exists(os.path.join(root, json_file))</span><br><span class=\"line\">            register_coco_instances(</span><br><span class=\"line\">                key,</span><br><span class=\"line\">                _get_builtin_metadata(dataset_name),</span><br><span class=\"line\">                os.path.join(root, json_file) <span class=\"keyword\">if</span> <span class=\"string\">&quot;://&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> json_file <span class=\"keyword\">else</span> json_file,</span><br><span class=\"line\">                os.path.join(root, image_root),</span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\">DATA_ROOT = <span class=\"string\">&quot;D:/GISP/XIEMINGJIE/Code/Detection/dataset/NWPU VHR-10 dataset/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">register_all(DATA_ROOT)</span><br></pre></td></tr></table></figure>\n\n<p>此时已完成<code>nwpu_all_trainval</code>以及<code>nwpu_all_test</code>数据集的注册，可以通过代码查看：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(DatasetCatalog.get(<span class=\"string\">&quot;nwpu_all_trainval&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(DatasetCatalog.get(<span class=\"string\">&quot;nwpu_all_test&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>当然，如果不想要使用COCO格式数据集也可以自定义注册函数，可以参考<code>register_coco_instances</code>的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register_coco_instances</span>(<span class=\"params\">name, metadata, json_file, image_root</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">        name (str): the name that identifies a dataset, e.g. &quot;coco_2014_train&quot;.</span></span><br><span class=\"line\"><span class=\"string\">        metadata (dict): extra metadata associated with this dataset.  You can</span></span><br><span class=\"line\"><span class=\"string\">            leave it as an empty dict.</span></span><br><span class=\"line\"><span class=\"string\">        json_file (str): path to the json instance annotation file.</span></span><br><span class=\"line\"><span class=\"string\">        image_root (str or path-like): directory which contains all the images.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(name, <span class=\"built_in\">str</span>), name</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(json_file, (<span class=\"built_in\">str</span>, os.PathLike)), json_file</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(image_root, (<span class=\"built_in\">str</span>, os.PathLike)), image_root</span><br><span class=\"line\">    <span class=\"comment\"># 1. register a function which returns dicts</span></span><br><span class=\"line\">    DatasetCatalog.register(name, <span class=\"keyword\">lambda</span>: load_coco_json(json_file, image_root, name))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2. Optionally, add metadata about this dataset,</span></span><br><span class=\"line\">    <span class=\"comment\"># since they might be useful in evaluation, visualization or logging</span></span><br><span class=\"line\">    MetadataCatalog.get(name).<span class=\"built_in\">set</span>(</span><br><span class=\"line\">        json_file=json_file, image_root=image_root, evaluator_type=<span class=\"string\">&quot;coco&quot;</span>, **metadata</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>load_coco_json</code>函数的功能是读取数据集标注文件，并以固定的形式返回，详细可见<a href=\"https://detectron2.readthedocs.io/en/latest/tutorials/datasets.html#register-a-dataset\">官网</a>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># load_coco_json返回的是一个列表</span></span><br><span class=\"line\"><span class=\"comment\"># 返回格式如下：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_coco_json</span>(<span class=\"params\">json_file, image_root, dataset_name=<span class=\"literal\">None</span>, extra_annotation_keys=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">\t<span class=\"comment\"># read and do something</span></span><br><span class=\"line\">\t<span class=\"comment\"># ...</span></span><br><span class=\"line\">\t<span class=\"comment\"># generate dataset_dicts like: ↓</span></span><br><span class=\"line\">    dataset_dicts = [&#123;<span class=\"string\">&#x27;file_name&#x27;</span>: <span class=\"string\">&#x27;...\\\\images\\\\001.jpg&#x27;</span>, <span class=\"string\">&#x27;height&#x27;</span>: <span class=\"number\">939</span>, <span class=\"string\">&#x27;width&#x27;</span>: <span class=\"number\">1356</span>, <span class=\"string\">&#x27;image_id&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;annotations&#x27;</span>: [&#123;<span class=\"string\">&#x27;iscrowd&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;bbox&#x27;</span>: [<span class=\"number\">903</span>, <span class=\"number\">57</span>, <span class=\"number\">129</span>, <span class=\"number\">123</span>], <span class=\"string\">&#x27;category_id&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;bbox_mode&#x27;</span>: &lt;BoxMode.XYWH_ABS: <span class=\"number\">1</span>&gt;&#125;]&#125;, &#123;...&#125;]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dataset_dicts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-可视化工具\"><a href=\"#2-3-可视化工具\" class=\"headerlink\" title=\"2.3 可视化工具\"></a>2.3 可视化工具</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.data <span class=\"keyword\">import</span> MetadataCatalog</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.data <span class=\"keyword\">import</span> detection_utils <span class=\"keyword\">as</span> utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.utils.visualizer <span class=\"keyword\">import</span> Visualizer</span><br><span class=\"line\"></span><br><span class=\"line\">datasets_dicts = DatasetCatalog.get(<span class=\"string\">&quot;nwpu_all_trainval_1shot&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> random.sample(datasets_dicts, <span class=\"number\">1</span>):</span><br><span class=\"line\">    img = utils.read_image(data[<span class=\"string\">&quot;file_name&quot;</span>])</span><br><span class=\"line\">    visual = Visualizer(img, metadata=MetadataCatalog.get(<span class=\"string\">&quot;nwpu_all_trainval&quot;</span>),scale=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    vis = visual.draw_dataset_dict(data)</span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">&quot;window&quot;</span>, vis.get_image()[:, :, ::-<span class=\"number\">1</span>])</span><br><span class=\"line\">    cv2.waitKey()</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20220316211311.png\"></p>\n<h2 id=\"2-4-自定义数据增强\"><a href=\"#2-4-自定义数据增强\" class=\"headerlink\" title=\"2.4 自定义数据增强\"></a>2.4 自定义数据增强</h2><p>在注册了数据集之后就可以用<code>detectron2.data.build_detection_train_loader</code>和<code>detectron2.data.build_detection_test_loader</code>构建<code>Dataloader</code>，即数据集的加载方式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> detectron2.config <span class=\"keyword\">import</span> get_cfg</span><br><span class=\"line\"><span class=\"keyword\">import</span> detectron2.data.transforms <span class=\"keyword\">as</span> T</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.model_zoo <span class=\"keyword\">import</span> model_zoo</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.data <span class=\"keyword\">import</span> build_detection_train_loader</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.data <span class=\"keyword\">import</span> DatasetMapper   <span class=\"comment\"># the default mapper</span></span><br><span class=\"line\"></span><br><span class=\"line\">cfg = get_cfg()</span><br><span class=\"line\">cfg.merge_from_file(model_zoo.get_config_file(<span class=\"string\">&quot;COCO-Detection/retinanet_R_50_FPN_1x.yaml&quot;</span>))</span><br><span class=\"line\">cfg.DATASETS.TRAIN = (<span class=\"string\">&quot;nwpu_all_trainval&quot;</span>,)</span><br><span class=\"line\"></span><br><span class=\"line\">mapper = DatasetMapper(cfg,is_train=<span class=\"literal\">True</span>,augmentations=[T.Resize((<span class=\"number\">800</span>, <span class=\"number\">800</span>))])</span><br><span class=\"line\">train_loader = build_detection_train_loader(cfg,mapper=mapper)</span><br></pre></td></tr></table></figure>\n\n<p><code>build_detection_train_loader()</code>的参数如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build_detection_train_loader(</span><br><span class=\"line\">    dataset,</span><br><span class=\"line\">    *,</span><br><span class=\"line\">    mapper,</span><br><span class=\"line\">    sampler=<span class=\"literal\">None</span>,</span><br><span class=\"line\">    total_batch_size,</span><br><span class=\"line\">    aspect_ratio_grouping=<span class=\"literal\">True</span>,</span><br><span class=\"line\">    num_workers=<span class=\"number\">0</span>,</span><br><span class=\"line\">    collate_fn=<span class=\"literal\">None</span>,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>mapper</code>对应的就是数据增强部分，默认为<code>detectron2.data.DatasetMapper</code>，<code>sampler</code>对应的采样策略部分，通常只需要关注<code>mapper</code>即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DatasetMapper</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @configurable</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,is_train: <span class=\"built_in\">bool</span></span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">from_config</span>(<span class=\"params\">cls, cfg, is_train: <span class=\"built_in\">bool</span> = <span class=\"literal\">True</span></span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_transform_annotations</span>(<span class=\"params\">self, dataset_dict, transforms, image_shape</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">self, dataset_dict</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataset_dict</span><br></pre></td></tr></table></figure>\n\n<p>官方给的自定义简化DataMapper：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> detectron2.data <span class=\"keyword\">import</span> detection_utils <span class=\"keyword\">as</span> utils</span><br><span class=\"line\"><span class=\"keyword\">import</span> detectron2.data.transforms <span class=\"keyword\">as</span> T</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mapper</span>(<span class=\"params\">dataset_dict</span>):</span></span><br><span class=\"line\">    dataset_dict = copy.deepcopy(dataset_dict)  <span class=\"comment\"># it will be modified by code below</span></span><br><span class=\"line\">    <span class=\"comment\"># can use other ways to read image</span></span><br><span class=\"line\">    image = utils.read_image(dataset_dict[<span class=\"string\">&quot;file_name&quot;</span>], <span class=\"built_in\">format</span>=<span class=\"string\">&quot;BGR&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># &quot;Data Augmentation&quot;</span></span><br><span class=\"line\">    auginput = T.AugInput(image)</span><br><span class=\"line\">    transform = T.Resize((<span class=\"number\">800</span>, <span class=\"number\">800</span>))(auginput)</span><br><span class=\"line\">    image = torch.from_numpy(auginput.image.transpose(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">    annos = [</span><br><span class=\"line\">        utils.transform_instance_annotations(annotation, [transform], image.shape[<span class=\"number\">1</span>:])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> annotation <span class=\"keyword\">in</span> dataset_dict.pop(<span class=\"string\">&quot;annotations&quot;</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\"># create the format that the model expects</span></span><br><span class=\"line\">       <span class=\"string\">&quot;image&quot;</span>: image,</span><br><span class=\"line\">       <span class=\"string\">&quot;instances&quot;</span>: utils.annotations_to_instances(annos, image.shape[<span class=\"number\">1</span>:])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dataloader = build_detection_train_loader(cfg, mapper=mapper)</span><br></pre></td></tr></table></figure>\n\n<p>因此自定义的数据增强需要满足，输入为<code>dataset_dict</code>，输出为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"string\">&quot;images&quot;</span>: image_tensor,</span><br><span class=\"line\"> <span class=\"string\">&quot;instances&quot;</span>: utils.annotations_to_instances =&gt; Instances类</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-自定义模型\"><a href=\"#3-自定义模型\" class=\"headerlink\" title=\"3. 自定义模型\"></a>3. 自定义模型</h1><p>Detectron2的模型是分模块的，它将目标检测模型拆分为了4个核心模块：<code>backbone</code>，<code>proposal_generator</code>，<code>roi_heads</code>以及<code>meta_arch</code>。</p>\n<h2 id=\"3-1-特征提取网络（backbone）\"><a href=\"#3-1-特征提取网络（backbone）\" class=\"headerlink\" title=\"3.1 特征提取网络（backbone）\"></a>3.1 特征提取网络（backbone）</h2><p>在<code>detectron2.modeling.backbone</code>路径下可以看到，目前只有<code>ResNet</code>、<code>FPN</code>和<code>RegNet</code></p>\n<p>可直接使用的<code>backbone</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build_resnet_backbone</span><br><span class=\"line\">build_resnet_fpn_backbone</span><br><span class=\"line\">build_retinanet_resnet_fpn_backbone</span><br></pre></td></tr></table></figure>\n\n<p>官方的自定义<code>backbone</code>的案例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> detectron2.modeling <span class=\"keyword\">import</span> BACKBONE_REGISTRY, Backbone, ShapeSpec</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@BACKBONE_REGISTRY.register()</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToyBackbone</span>(<span class=\"params\">Backbone</span>):</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, cfg, input_shape</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">    <span class=\"comment\"># create your own backbone</span></span><br><span class=\"line\">    self.conv1 = nn.Conv2d(<span class=\"number\">3</span>, <span class=\"number\">64</span>, kernel_size=<span class=\"number\">7</span>, stride=<span class=\"number\">16</span>, padding=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span>(<span class=\"params\">self, image</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;conv1&quot;</span>: self.conv1(image)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">output_shape</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;conv1&quot;</span>: ShapeSpec(channels=<span class=\"number\">64</span>, stride=<span class=\"number\">16</span>)&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-候选框生成器（proposal-generator）\"><a href=\"#3-2-候选框生成器（proposal-generator）\" class=\"headerlink\" title=\"3.2 候选框生成器（proposal_generator）\"></a>3.2 候选框生成器（proposal_generator）</h2><p>同样可以自定义注册</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PROPOSAL_GENERATOR_REGISTRY.register()</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToyRPN</span>(<span class=\"params\">RPN</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">\t    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RPN_HEAD_REGISTRY.register()</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToyRPNHead</span>(<span class=\"params\">StandardRPNHead</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">\t    <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">\t    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-3-检测器（roi-heads）\"><a href=\"#3-3-检测器（roi-heads）\" class=\"headerlink\" title=\"3.3 检测器（roi_heads）\"></a>3.3 检测器（roi_heads）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ROI_MASK_HEAD_REGISTRY.register()</span></span><br><span class=\"line\"><span class=\"meta\">@ROI_KEYPOINT_HEAD_REGISTRY.register()</span></span><br><span class=\"line\"><span class=\"meta\">@ROI_HEADS_REGISTRY.register()</span></span><br><span class=\"line\"><span class=\"meta\">@ROI_BOX_HEAD_REGISTRY.register()</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-4-模型框架（meta-arch）\"><a href=\"#3-4-模型框架（meta-arch）\" class=\"headerlink\" title=\"3.4 模型框架（meta_arch）\"></a>3.4 模型框架（meta_arch）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@META_ARCH_REGISTRY.register()</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToyNet</span>(<span class=\"params\">nn.Module</span>):</span></span><br><span class=\"line\"><span class=\"meta\">    @configurable</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">from_config</span>(<span class=\"params\">cls, cfg</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward_training</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loss</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @torch.no_grad()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">label_anchors</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward_inference</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inference_single_image</span>(<span class=\"params\">self,*args, **kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>具体可参考官方复现的<a href=\"https://github.com/facebookresearch/detectron2/tree/main/projects\">projects</a></p>\n<h1 id=\"4-模型训练\"><a href=\"#4-模型训练\" class=\"headerlink\" title=\"4. 模型训练\"></a>4. 模型训练</h1><h2 id=\"4-1-默认训练\"><a href=\"#4-1-默认训练\" class=\"headerlink\" title=\"4.1 默认训练\"></a>4.1 默认训练</h2><p>一般而言，我们可以继承使用默认的目标检测任务训练器<code>DefalutTrainer</code>，而<code>DefalutTrainer</code>又是继承自<code>TrainerBase</code>，<code>TrainerBase</code>中又使用到了<code>HookBase</code>。我的理解是<code>HookBase</code>和<code>TrainerBase</code>是将一个训练过程抽象并拆分成阶段步骤的过程，先看<code>HookBase</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HookBase</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">before_train</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Called before the first iteration.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_train</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Called after the last iteration.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">before_step</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Called before each iteration.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_step</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Called after each iteration.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">state_dict</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于训练而言，它将一个完整的训练拆分成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrainerBase</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self._hooks: <span class=\"type\">List</span>[HookBase] = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register_hooks</span>(<span class=\"params\">self, hooks: <span class=\"type\">List</span>[<span class=\"type\">Optional</span>[HookBase]]</span>) -&gt; <span class=\"literal\">None</span>:</span></span><br><span class=\"line\">        hooks = [h <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> hooks <span class=\"keyword\">if</span> h <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> hooks:</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(h, HookBase)</span><br><span class=\"line\">            h.trainer = weakref.proxy(self)</span><br><span class=\"line\">        self._hooks.extend(hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train</span>(<span class=\"params\">self, start_iter: <span class=\"built_in\">int</span>, max_iter: <span class=\"built_in\">int</span></span>):</span></span><br><span class=\"line\">        self.<span class=\"built_in\">iter</span> = self.start_iter = start_iter</span><br><span class=\"line\">        self.max_iter = max_iter</span><br><span class=\"line\">        <span class=\"keyword\">with</span> EventStorage(start_iter) <span class=\"keyword\">as</span> self.storage:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                self.before_train()</span><br><span class=\"line\">                <span class=\"keyword\">for</span> self.<span class=\"built_in\">iter</span> <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start_iter, max_iter):</span><br><span class=\"line\">                    self.before_step()</span><br><span class=\"line\">                    self.run_step()</span><br><span class=\"line\">                    self.after_step()</span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                self.after_train()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">before_train</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> self._hooks:</span><br><span class=\"line\">            h.before_train()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_train</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.storage.<span class=\"built_in\">iter</span> = self.<span class=\"built_in\">iter</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> self._hooks:</span><br><span class=\"line\">            h.after_train()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">before_step</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.storage.<span class=\"built_in\">iter</span> = self.<span class=\"built_in\">iter</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> self._hooks:</span><br><span class=\"line\">            h.before_step()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_step</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> self._hooks:</span><br><span class=\"line\">            h.after_step()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_step</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">state_dict</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_state_dict</span>(<span class=\"params\">self, state_dict</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>简化一点，它将一个训练过程抽象成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hook.before_train()</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">iter</span> <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start_iter, max_iter):</span><br><span class=\"line\">    hook.before_step()</span><br><span class=\"line\">    trainer.run_step()</span><br><span class=\"line\">    hook.after_step()</span><br><span class=\"line\"><span class=\"built_in\">iter</span> += <span class=\"number\">1</span></span><br><span class=\"line\">hook.after_train()</span><br></pre></td></tr></table></figure>\n\n<p>具体到目标检测任务，<code>DefaultTrainer</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultTrainer</span>(<span class=\"params\">TrainerBase</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, cfg</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_hooks</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_writers</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>(<span class=\"params\">cls, cfg, model, evaluators=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"comment\"># </span></span><br><span class=\"line\">    <span class=\"comment\"># a lot of</span></span><br><span class=\"line\">    <span class=\"comment\"># def ...(...):</span></span><br><span class=\"line\">    <span class=\"comment\">#     .....</span></span><br><span class=\"line\">    <span class=\"comment\"># </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_train_loader</span>(<span class=\"params\">cls, cfg</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> build_detection_train_loader(cfg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_test_loader</span>(<span class=\"params\">cls, cfg, dataset_name</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> build_detection_test_loader(cfg, dataset_name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_evaluator</span>(<span class=\"params\">cls, cfg, dataset_name</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-自定义训练\"><a href=\"#4-2-自定义训练\" class=\"headerlink\" title=\"4.2 自定义训练\"></a>4.2 自定义训练</h2><p>由于Detectron2已经将训练过程模块化，因此只需要修改对应模块即可，而一般而言，我们只需要修改数据加载和<code>evaluate</code>部分：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> detectron2.engine <span class=\"keyword\">import</span> DefaultTrainer</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trainer</span>(<span class=\"params\">DefaultTrainer</span>):</span></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_evaluator</span>(<span class=\"params\">cls, cfg, dataset_name, output_folder=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">        evaluator_list = []</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> DatasetEvaluators(evaluator_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_test_loader</span>(<span class=\"params\">cls, cfg, dataset_name</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> build_detection_test_loader(cfg, dataset_name, mapper=my_mapper(cfg,<span class=\"string\">&quot;test&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_train_loader</span>(<span class=\"params\">cls, cfg</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> build_detection_train_loader(cfg, mapper=my_mapper(cfg, <span class=\"string\">&quot;train&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-完整训练流程\"><a href=\"#4-3-完整训练流程\" class=\"headerlink\" title=\"4.3 完整训练流程\"></a>4.3 完整训练流程</h2><p>参考<code>tools/train_net.py</code>或者<code>tools/plain_train_net.py</code>，已经写的非常详细了👍，注意别忘了导入自己写好的注册数据集以及注册模型的文件，只要导入了就会自动注册，就可以在配置文件中使用。</p>\n<h1 id=\"5-配置文件\"><a href=\"#5-配置文件\" class=\"headerlink\" title=\"5. 配置文件\"></a>5. 配置文件</h1><p>参考<code>configs</code>文件夹下的<code>yaml</code>文件格式，，可以通过<code>__BASE__</code>继承基础配置文件，还可以直接覆盖之前的配置，如<code>retinanet_R_50_FPN_3x.yaml</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">_BASE_:</span> <span class=\"string\">&quot;../Base-RetinaNet.yaml&quot;</span></span><br><span class=\"line\"><span class=\"attr\">MODEL:</span></span><br><span class=\"line\">  <span class=\"attr\">WEIGHTS:</span> <span class=\"string\">&quot;detectron2://ImageNetPretrained/MSRA/R-50.pkl&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">RESNETS:</span></span><br><span class=\"line\">    <span class=\"attr\">DEPTH:</span> <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"attr\">SOLVER:</span></span><br><span class=\"line\">  <span class=\"attr\">STEPS:</span> <span class=\"string\">(210000,</span> <span class=\"number\">250000</span><span class=\"string\">)</span></span><br><span class=\"line\">  <span class=\"attr\">MAX_ITER:</span> <span class=\"number\">270000</span></span><br></pre></td></tr></table></figure>\n\n<p>查看全部配置项：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> detectron2.config <span class=\"keyword\">import</span> get_cfg</span><br><span class=\"line\">cfg = get_cfg()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cfg)</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cfg.dump())</span><br></pre></td></tr></table></figure>\n\n<p>在python文件中修改配置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfg.SOLVER.BASE_LR = <span class=\"number\">0.001</span></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">cfg.merge_from_list([<span class=\"string\">&quot;SOLVER.BASE_LR&quot;</span>, <span class=\"string\">&quot;0.001&quot;</span>])</span><br></pre></td></tr></table></figure>\n\n<p>合并多个文件中的配置项：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfg.merge_from_file(<span class=\"string\">&quot;my_cfg.yaml&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>由于配置项本质上还是转换成了字典类型，因此可以直接从python文件导入配置，并且也提供了python格式的配置文件该怎么进行训练的示例，参考<code>tools/lazyconfig_train_net.py</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.py</span></span><br><span class=\"line\">NEW_MODEL = <span class=\"built_in\">dict</span>(NUM=<span class=\"number\">1</span>,SIZE=<span class=\"built_in\">dict</span>(W=<span class=\"number\">2</span>,H=<span class=\"number\">3</span>))</span><br><span class=\"line\">NEW_OPT = <span class=\"built_in\">dict</span>(NAME=<span class=\"string\">&quot;hhhh&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.config <span class=\"keyword\">import</span> LazyConfig</span><br><span class=\"line\">cfg = LazyConfig.load(<span class=\"string\">&quot;config.py&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> cfg.NEW_MODEL.SIZE.W==<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># cfg = LazyConfig.load(args.config_file)</span></span><br><span class=\"line\"><span class=\"comment\"># cfg = LazyConfig.apply_overrides(cfg, args.opts)</span></span><br></pre></td></tr></table></figure>\n\n<p>并且Detectron2还提供了一个帮助创建配置字典的函数，<code>LazyCall</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> detectron2.config <span class=\"keyword\">import</span> LazyCall <span class=\"keyword\">as</span> L</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.modeling.backbone <span class=\"keyword\">import</span> RegNet</span><br><span class=\"line\"><span class=\"keyword\">from</span> detectron2.modeling.backbone.regnet <span class=\"keyword\">import</span> SimpleStem, ResBottleneckBlock</span><br><span class=\"line\"></span><br><span class=\"line\">bottom_up = L(RegNet)(</span><br><span class=\"line\">    stem_class=SimpleStem,</span><br><span class=\"line\">    stem_width=<span class=\"number\">32</span>,</span><br><span class=\"line\">    block_class=ResBottleneckBlock,</span><br><span class=\"line\">    depth=<span class=\"number\">23</span>,</span><br><span class=\"line\">    w_a=<span class=\"number\">38.65</span>,</span><br><span class=\"line\">    w_0=<span class=\"number\">96</span>,</span><br><span class=\"line\">    w_m=<span class=\"number\">2.43</span>,</span><br><span class=\"line\">    group_width=<span class=\"number\">40</span>,</span><br><span class=\"line\">    norm=<span class=\"string\">&quot;SyncBN&quot;</span>,</span><br><span class=\"line\">    out_features=[<span class=\"string\">&quot;s1&quot;</span>, <span class=\"string\">&quot;s2&quot;</span>, <span class=\"string\">&quot;s3&quot;</span>, <span class=\"string\">&quot;s4&quot;</span>],</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(bottom_up)</span><br></pre></td></tr></table></figure>","categories":[{"name":"人工智能","path":"api/categories/人工智能.json"}],"tags":[{"name":"深度学习","path":"api/tags/深度学习.json"},{"name":"论文笔记","path":"api/tags/论文笔记.json"},{"name":"目标检测","path":"api/tags/目标检测.json"}]}