{"title":"大学课程 | 计算机系统结构精简知识点","slug":"学习笔记-计算机系统结构精简知识点","date":"2020-09-08T06:31:25.000Z","updated":"2020-09-08T06:31:25.000Z","comments":true,"path":"api/articles/学习笔记-计算机系统结构精简知识点.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200826171758.png","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200415140626.png","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909153438.png","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909165849.png","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909201223.png","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212811.png","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212445.png","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910101227.png","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910102823.png","https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910105055.png"],"content":"<p><a href=\"/posts/50754.html\">计算机系统结构笔记传送门</a></p>\n<h1 id=\"计算机系统结构知识点\"><a href=\"#计算机系统结构知识点\" class=\"headerlink\" title=\"计算机系统结构知识点\"></a>计算机系统结构知识点</h1><ol>\n<li>多级层次结构：<br>（1）按功能划分成多层机器级组成的层次结构，从上到下依次为，应用语言机器级，高级语言机器级，汇编语言机器级，操作系统机器级，传统机器语言机器级，微程序机器级。<br>（2）机器，被定义为能存储和执行相应语言程序的算法和数据结构的集合体<br>（3）微程序机器级用硬件实现，传统机器语言机器级用固件实现<br>（4）固件：具有软件功能的硬件<br>（5）以软件为主实现的机器称为虚拟机器，由硬件或固件实现的称为实际机器</li>\n<li>透明性：<br>（1）客观存在的事物或属性从某个角度看不见</li>\n<li>翻译与解释<br>（1）翻译：先用转换程序将高一级机器级上的程序<code>整个</code>变换成低一级机器级上等效的程序，然后再在低一级机器级上实现的技术<br>（2）解释：在低级机器级上用它的一串语句或指令来仿真高级机器级上的一条语句或指令的功能，是通过对高级的机器级语言程序中的每条语句或指令<code>逐条</code>解释来实现的技术</li>\n<li>软硬件逻辑功能等效<br>（1）概念：软硬件逻辑功能等效是指计算机系统的某功能可以由硬件实现也可以由软件实现，在逻辑功能上是等价的。由硬件实现功能的特点是速度快、增加硬件成本，灵活性低。由软件实现功能的特点是灵活性好、但速度较慢，增加软件设计费用等</li>\n<li>计算机系统结构、组成与实现的定义及三者之间的关系，以乘法指令为例说明上述三者各自的研究内容<br>（1）计算机系统结构的定义：对计算机系统中各级界面的定义及其上下的功能分配<br>（2）计算机组成的定义：计算机系统结构的逻辑实现，包括机器级内部的数据流和控制流的组成以及逻辑设计等<br>（3）计算机实现：是指计算机组成的物理实现（具体电路，器件的设计，装配技术等等）<br>（4）三者的关系：三者互不相同，但又相互影响。组成向上决定于结构，向下受限于实现技术。<br>（5）对于乘法指令，计算机系统结构主要考虑是否要设置乘法指令；而计算机组成主要考虑乘法指令是用专门的高速乘法器还是用加法器和移位器实现；计算机实现主要考虑乘法器，加法器的物理显示，如器件的类型，继承父，数量的确定和选择</li>\n<li>计算机系统结构的设计思路<br>（1）<code>“由上往下”设计</code>，由顶向底。先考虑应用要求，再逐级向下，下一级是对上一级的优化。是一种穿行设计方法，设计周期较长<br>（2）<code>“由下往上”设计</code>，由底向顶。先设计底层，再加配操作系统和编译系统，以及设施的系统软件和算法等等。软硬件容易脱节，串行设计，周期长，很少采用<br>（3）<code>“从中间开始”向两边设计</code>。一般方法。软硬件并行设计，较好的设计方法</li>\n<li>软件移植及三种移植技术<br>（1）软件的可移植性：软件不修改或只经少量修改就可以由一台机器移到另一台机器上允许，同一软件可应用于不同的环境<br>（2）移植技术：<code>统一高级语言</code>；<code>采用系列机</code>；<code>模拟和仿真</code></li>\n<li>软件兼容及分类<br>（1）软件兼容：机器语言程序以及编译程序能不加修改地通用于各档机器<br>（2）分类：<br>a. 向上兼容/向下兼容：向上（下）兼容是指，按某党机器编制的软件，不加修改就能运行于比他高（低）档的机器上。<br>b. 向前兼容/向后兼容：向前（后）兼容是指，按某个时期投入市场的该型号机器上编制的软件，不加修改就能运行于在它之前（后）的投入市场的机器上。<br>（3）系列机软件必须保证向后兼容，力争向上兼容</li>\n<li>系列机与兼容机，模拟与仿真<br>（1）系列机：是具有相同体系结构，但组成和实现不同的一系列不同型号的计算机系统。<br>兼容机：不同厂家生产的具有相同体系结构的计算机。<br>（2）模拟：用机器语言程序（在主存）解释实现软件移植的方法；运行速度低，实时性差，模拟程序复杂<br>仿真：用微程序（在控制寄存器）直接解释另一种机器指令系统的方法；两种系统结构差别较大时，难以仿真<br>两者的主要区别在于解释用的语言，其次有解释程序的所存位置不同</li>\n<li>应用与器件对系统结构的影响<br>（1）应用的发展对结构设计提出范围广泛的要求<br>（2）器件的发展改变了逻辑设计的传统方法；推动结构和组成前进的关键因素；加速了结构“下移”；促进了算法，语言和软件的发展</li>\n<li>并行性概念及发展并行性的三种技术途径<br>（1）并行性：把解题中具有可以同时进行运算或操作的特性称为并行性，并行性包括同时性和并发性<br>（2）并行性等级：<br>①按计算机系统执行程序的角度，从低到高：指令内部，指令之间，任务或进程之间，作业或程序之间<br>②从计算机系统中处理数据的角度来看，从低到高：位串字串，位并字串，位片串字并，全并行<br>（3）三种技术途径：时间重叠，资源重叠，资源共享<br>时间重叠：多个处理过程在时间上错开<br>资源重叠：重复设置硬件资源来提高可靠性和性能<br>资源共享：多个用户按时间顺序轮流使用同一套资源</li>\n<li>耦合度概念<br>（1）耦合度概念：反映多机系统中各机器之间物理连接的紧密度和交叉作用能力<br>（2）分类：<br>最低耦合：除存储介质，无物理连接，脱机<br>松散耦合：通过通道或通信线路互连，磁带，磁盘…<br>紧密耦合：通过总线或高速开关互连，主存…</li>\n<li>弗林分类法<br>（1）单指令流单数据流（SISD），传统单处理器计算机<br>（2）单指令流多数据流（SIMD），阵列处理机和相联处理机<br>（3）多指令流单数据流（MISD），很少见<br>（4）多指令流多数据流（MIMD），多级系统</li>\n<li>数据表示与数据结构<br>（1）数据表示：能由机器硬件识别和引用的数据类型（数据类型指一类值的集合和可作用于其上的操作集）<br>（2）数据结构：结构数据类型的组织方式，反映了应用中要用到的各种数据元素或信息单元之间的结构关系<br>（3）数据结构和数据表示是软硬件的交界面，数据结构是软，数据表示是硬</li>\n<li>高级数据表示<br>（1）自定义数据表示：<br>a). 标识符数据表示<br>①每个数据带了类型标志位，标识符主要用于指明数据类型，但也可以用域指明所用信息类型。标识符由编译程序建立，对高级语言程序透明。<br>②优点：简化了指令系统和程序设计；简化了编译程序；便于一致性校验；能由硬件自动变换数据类型；支持数据库系统的实现与数据类型无关的要求；为软件调试和应用软件开发提供了支持，便于程序的跟踪和调试<br>③缺点：增加程序所占的主存空间；降低指令的执行速度<br>b). 数据描述符<br>①描述符和数据分开存放，用于描述所访问的数据是整块的还是单个的，访问该数据块或数据元素所要的地址以及其它信息<br>②优点：进一步减少标识符所占存储空间<br>（2）向量，数组数据表示<br>①有向量数据表示的处理机是向量处理机<br>②优点：加快形成元素地址，便于实现把向量各元素成块预取到中央处理机，用一条向量，数组指令流水或同事对整个向量，数组进行高速处理<br>（3）堆栈数据表示<br>①有堆栈数据表示的处理机是堆栈机器<br>②通常用于保存子程序调用时的返回地址<br>③堆栈机器特点：有丰富的堆栈操作指令且功能强大；有力地支持了高级语言程序的编译；有力的支持了子程序的嵌套和递归调用</li>\n<li>引入数据表示的原则<br>（1）原则1：看系统的效率是否显著提高，包括实现时间和存储空间是否显著减少。实现时间是否减少又主要看主存和处理机之间传送的信息量是否减少<br>（2）原则2：看引入这种数据表示后，其通用性和利用率是否提高<br>（3）原则3：基本的数据表示，也有可挖掘的细节问题<br>（4）原则4：基本的数据类型必须设</li>\n<li>浮点数尾数基值的选择与下溢处理方法<br>（1）浮点数尾数基值的选择<br>如果小数点的位置事先已有约定，不再改变，此类数称为“定点数”。<br>如果小数点的位置可变，则称为“浮点数”。<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200826171758.png\"><br>rm ：尾数的基<br>re ：阶码的基（re =2）<br>m： 尾数长度 (注意其含义)<br>p： 阶码长度<br>【p表示数的范围大小；尾数的位数m主要影响表示值的精度】<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200415135441.png\"></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">条件：非负阶，规格化，正尾数</th>\n<th align=\"center\">阶值：二进制p位，尾数：rm进制m’位</th>\n<th align=\"center\">若p=2，m=4，当rm=2（即m’=4）时</th>\n<th align=\"center\">若p=2，m=4，当rm=16（即m’=1）时</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">可表示最小尾数值</td>\n<td align=\"center\">rm^(-1)</td>\n<td align=\"center\">1/2</td>\n<td align=\"center\">1/16</td>\n</tr>\n<tr>\n<td align=\"center\">可表示最大尾数值</td>\n<td align=\"center\">1-1×rm^(-m’)</td>\n<td align=\"center\">15/16</td>\n<td align=\"center\">15/16</td>\n</tr>\n<tr>\n<td align=\"center\">最大阶值</td>\n<td align=\"center\">2^p-1</td>\n<td align=\"center\">3</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">可表示最小值</td>\n<td align=\"center\">rm^(-1)</td>\n<td align=\"center\">1/2</td>\n<td align=\"center\">1/16</td>\n</tr>\n<tr>\n<td align=\"center\">可表示最大值</td>\n<td align=\"center\">rm^(2^p-1)×(1-rm^(-m’))</td>\n<td align=\"center\">7.5</td>\n<td align=\"center\">3840</td>\n</tr>\n<tr>\n<td align=\"center\">可表示的尾数个数</td>\n<td align=\"center\">rm^(m’)×(rm-1)/rm</td>\n<td align=\"center\">8</td>\n<td align=\"center\">15</td>\n</tr>\n<tr>\n<td align=\"center\">可表示阶的个数</td>\n<td align=\"center\">2^p</td>\n<td align=\"center\">4</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">可表示数的个数</td>\n<td align=\"center\">2^p×rm^(m’)×(rm-1)/rm</td>\n<td align=\"center\">32</td>\n<td align=\"center\">60</td>\n</tr>\n</tbody></table>\n<p>（2）下溢处理方法（对应用程序员，系统程序员透明）<br>减少运算中的精度损失关键是要处理好运算中尾数超出字长的部分，使精度损失最小<br>a) <strong>截断法</strong><br>①方法：<strong>将尾数超出机器字长的部分去掉</strong><br>②以rm=2，m=2为例讨论最大误差：在整数时接近于1(“11:111…1”截断成“11:”)；在分数时接近于2^(-m) (“.01:111…1”截断成“.01:”)<br>③对于正数，如有误差总是负误差<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200415140626.png\"><br>④优点：实现简单，不增加硬件，不需要处理时间<br>缺点：最大误差较大，且平均误差为负且较大，无法调节，因而已很少使用<br>b) <strong>舍入法</strong><br>①方法：在机器运算的规定字长之外增设一位附加位，存放溢出部分的最高位，每当进行尾数下溢处理时，将附加位加1，[整数加0.5，分数加2^(-(m+1))]<br>②例如：整数：“10:10…0”舍入成“11:” 正误差；分数：“.10:01…0”舍入成“.10:” 负误差<br>③优点：实现简单，增加的硬件开销少，最大误差小，平均误差接近于零，略偏正<br>缺点：处理速度慢，需要花费在数的附加位加1以及因此产生进位的时间，最坏情况下，需要从尾数最低位进制<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/Y5E%7B1ZHXC%25%5B77%7BW_5Z2%5BY%5DO.png\"><br>c) <strong>恒置“1”法</strong><br>①方法：将机器运算的规定字长之最低位恒置“1”<br>②最大误差：整数为1（如“10:00…0”处理成“11:”）；分数为2-m（如“.00:00…0”处理成“.01:”）<br>③误差有正负：负误差（如“.11:10…1”处理成“.11:”）；正误差（如“.00:00…0”处理成“.01:”)<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/%25%7DMG%25YPJF2L0QNXJ%7DK8FC%402.png\"><br>④优点：实现简单，不需要增加硬件和处里时间，平均误差趋于0<br>缺点：最大误差最大，比截断法还大（接近于1）<br>⑤多用于中、高速机器中，由于尾数位数比微、小型机器长<br>d) <strong>查表舍入法</strong><br>①方法：取尾数p位的最后k-1位和准备舍弃的最高1位，共k位。通过ROM或PLA查表得到k-1位，作为新的尾数p位的最后k-1位<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/%29%7DUAT%7DO7%7D%7B%25%28WNSFI%40I%25MOP.png\"><br>②下溢处理表的内容：当尾数最低k-1位为全”1“时以<code>截断法</code>设置处理结果；其余情况采用<code>舍入法</code><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200415142649.png\"><br>③优点：ROM法速度较快，平均误差可调到0；避免再次右规操作<br>缺点：需要硬件配合，硬件量大<br>（3）上述4种处理方法中：<br><strong>最大误差最大</strong>的是恒置“1”法，<br><strong>最大误差最小</strong>的是舍入法；<br><strong>平均误差最大</strong>的是截断法；<br><strong>平均误差可人为调节</strong>的是查表舍入法；<br><strong>下溢处理不需要附加时间开销，即速度最快</strong>的是截断法和恒置“1”法，<br><strong>处理速度最慢</strong>的是舍入法；<br><strong>实现上最花费硬件</strong>的是查表舍入法，<br><strong>最省硬件</strong>的是截断法和恒置“1”法。 </p>\n<ol start=\"18\">\n<li>程序在主存中的定位技术<br>（1）静态再定位：再目的程序装入主存时，由装入程序用软件方法把目的程序的逻辑地址变换成物理地址，程序执行时，物理地址不再改变<br>（2）动态再定位：在执行每条指令时才形成访存物理地址的方法<br>①基址寻址：设置基址寄存器和地址加法器硬件，实现逻辑地址到物理地址空间变换的支持<br>②优越性：地址加法器形成物理地址的速度快于装入程序形成的物理地址速度；具有越界保护措施，如设置上、下界寄存器，判断是否出现地址越界错误<br>（3）虚实地址映像表：用虚拟存储器增加映像表硬件后，程序空间可以超过实际主存空间，采用基地址寄存器加位移量的方法</li>\n<li>基址寻址与变址寻址的区别<br>（1）基址寻址：基址寄存器里的值加上指令格式内的逻辑地址形成物理地址；对逻辑地址空间到物理地址空间变换的支持；通常基址寄存器的内容不变，逻辑地址可变；<br>（2）变址寻址：变址寄存器的值和指令地址码部分给出的地址之和作为操作数地址；对诸如向量，数组等数据块运算的支持；通常逻辑地址不变，变址寄存器里面的值由用户定义</li>\n<li>信息按整数边界存储<br>（1）为了使任何时候所需的信息都只用一个存储周期访问到，要求信息在主存中存放的地址必须是该信息宽度（字节数）的整数倍，防止信息跨主存边界存放<br>（2）优点：访问周期短；缺点：存储空间浪费</li>\n<li>哈夫曼压缩思想与指令格式的优化<br>（1）指令包含操作码和地址码两部分，为了优化指令格式，要使指令的平均字长最短，减少程序总位数以及增加指令字能表示的操作信息和地址信息<br>（2）哈夫曼压缩思想：当各种时间发生的概率不均等时，对发生概率最高的事件用最短的位数（时间）来表示（处理），而对出现概率较低的事件允许用较长的位数（时间）来表示（处理），就会使表示（处理）的平均位数（时间）缩短<br>（3）扩展操作码编码</li>\n<li>CISC与RISC的常用技术<br>（1）CISC（复杂指令系统计算机）：进一步增强原有指令的功能以及设置更为复杂的新指令，取代原先由软件子程序完成的功能，实现软件功能的硬化；<br>a)面向目标程序的优化实现改进<br>①途径1：对大量已有机器的机器语言程序及其执行情况进行统计各种指令和指令串的使用频度来加以分析和改进。<br>使用频度分为<code>静态使用频度</code>（程序中统计出的指令及指令串的使用频度称为静态使用频度。着眼于减少目标程序所占用的存储空间）和<code>动态使用频度</code>（目标程序执行过程中对指令和指令串统计出的频度称为动态使用频度。着眼于减少目标程序的执行时间）<br>②途径2：增设强功能复合指令来取代原先由常用宏指令或子程序实现的功能，由微程序解释实现，不仅大大提高了运算速度，减少了程序调用的额外开销，也减少了子程序所占的主存空间。<br>b)面向高级语言的优化实现改进<br>①目的：缩短高级语言和机器语言的语义差距，支持高级语言编译，缩短编译程序长度和时间<br>②途径1：通过对源程序中各种高级语言语句的使用频度进行统计来分析改进<br>③途径2：如何面向编译，优化代码生成来改进<br>④途径3：改进指令系统，使它与各种语言间的语义差距都有同等的缩小<br>⑤途径4：让机器具有分别面向各种高级语言的多种指令系统，多种系统结构的面向问题动态自寻优的计算机系统<br>⑥途径5：发展高级语言计算机（或称高级语言机器）<br>c)面向操作系统的优化实现改进<br>①目的：通过缩短操作系统与计算机系统结构之间的语义差距，来进一步减少运行操作系统的时间和节省操作系统软件所占用的存储空间<br>②途径1：通过对操作系统中常用指令和指令串的使用频度进行统计分析来改进<br>③途径2：考虑如何增设专用于操作系统的新指令<br>④途径3：把操作系统中频繁使用的，对速度影响大的机构型软件子程序硬化或固化，直接用硬件或微程序解释实现<br>⑤途径4：发展让操作系统由专门的处理机来执行的功能分布处理系统结构<br>d) CISC的问题：指令系统庞大；许多质量操作繁杂，执行速度很低；编译程序太长，太复杂；部分指令利用率很低<br>（2）RISC（精简指令系统计算机）：通过减少指令种数和简化指令功能来降低硬件设计的复杂度，提高指令的执行速度<br>a) RISC的基本技术<br>①按照设计RISC一般原则来设计<br>②逻辑实现采用硬联和微程序相结合<br>③在CPU中设置大量工作寄存器并采用重叠寄存器窗口<br>④指令用流水和延迟转移<br>⑤采用高速缓冲寄存器cache，设置指令cache和数据cache分别存放指令和数据<br>⑥优化设计编译系统<br>b) RISC的问题<br>①指令少，加重汇编语言程序设计的负担，增加了机器语言程序的长度，占用存储空间多，加大了指令的信息流量<br>②对浮点运算和虚拟存储器支持不足<br>③RISC机器的编译程序比CISC的难写</li>\n<li>总线的分类<br>（1）按在系统中的位置分为<code>芯片级</code>，<code>板级</code>，<code>系统级</code><br>（2）按允许信息传送方向分为<code>单向传输</code>，<code>双向传输（半双向和全双向）</code><br>（3）按用法分为<code>专用</code>和<code>非专用</code></li>\n<li>总线的控制技术及通讯技术<br>（1）控制技术<br>a） 集中式控制<br>①优先次序的确定方法：串行链接，定时查询，独立请求<br>②串行链接获得使用总线权优先次序由“总线可用”线所接不见的物理位置决定，离总线控制器越近，优先级越高；三根总线，总线忙，总线可用，总线请求<br>③定时查询：查询线上计数值与发出请求的部件号是否一致；总线忙+总线请求+「logn「个定时查询计数线=2+「logn「<br>④独立请求：1根总线已被分配线+每个部件各有一对总线请求和总线准许线=2×N+1<br>b） 分布式控制<br>（2）通讯技术<br>a) 同步通信：定宽，定距的系统时标同步<br>b) 异步通信：<br>分为单向控制（分为单向源控和单向目控）和请求/回答双向控制（分为源控式（互锁和非互锁）和目控）</li>\n<li>中断响应优先级与中断处理程序优先级及分析过程<br>（1）基本概念:<br>中断：CPU中止正在执行的程序，转去处理随机提出的请求，待处理完后，再回到预先被打断的程序继续恢复执行的过程<br>中断系统：相应和处理各种中断的软硬件总体称为中断系统<br>中断分为内部中断（CPU内的异常引起），外部中断（由中断信号引起）和软件中断（由自陷指令引起）；外部中断又分为可屏蔽中断和不可屏蔽中断<br>中断源：引起中断的各种事件<br>中断请求：中断源向中断系统发出请求中断的申请<br>中断响应：允许中断CPU现行程序的运行，转去对该请求进行预处理，包括保存好断电及其现场，调出有关处理该中断的中断服务程序，准备运行（交换新旧程序状态字PSW）<br>中断现行程序细分为中断（可屏蔽）和异常（不可屏蔽，如自陷，故障，失败）<br>（2）中断分级<br>机器校验（第1级），程序性中断和管理程序调用（第2级），外部中断（第3级），输入/输出（第4级），重新启动（最低级）<br>（3）中断的响应次序与处理次序<br>中断级屏蔽位寄存器<br>本级对本级屏蔽<br>中断响应次序，中断处理完成次序，中断处理次序<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909153438.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909154306.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909160431.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909160611.png\"><br>（4）通道程序结束引起的中断属于I/O中断；<br>访管中断属于第2级；</li>\n<li>通道的工作原理及三类通道的流量计算<br>（1）通道的工作原理：用户只能再目态程序中安排要求输入输出的广义指令，然后进入相应管理程序执行这些输入输出管态指令<br>a) 目态和管态：<br>管态又叫特权态，系统态或核心态。CPU在管态下可以执行指令系统的全集。通常，操作系统在管态下运行。<br>目态又叫常态或用户态。机器处于目态时，程序只能执行非特权指令。<br>从目态转换为管态的唯一途径是中断。<br>从管态到目态可以通过修改程序状态字来实现，这将伴随这由操作系统程序到用户程序的转换。<br>启动I/O指令属于管态指令<br>（2）三类通道：<code>字节多路</code>，<code>数组多路</code>和<code>选择通道</code><br>通道流量和通道工作方式，数据传送期内选择一次设备的时间Ts，传送一个字节的时间Td有关<br>通道的极限流量：<br>fmaxbyte=1/(Ts+Td)<br>fmaxblock=K/(Ts+K×Td)<br>fmaxselect=N/(Ts+N×Td)<br>设备要求通道的实际最大流量只有小于等于通道所能达到的极限<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909165849.png\"><br>工作周期小的不能挂载<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909171038.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909171326.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909171903.png\"></li>\n<li>存储器的性能指标<br>（1）容量Sm：存储器的位数或总字节数<br>Sm=W×L×m （W:存储体的字长，L每个存储体的字数，m并行工作存储体的个数）<br>（2）速度<br>访问时间Tn，存储周期Tm，频宽Bm<br>（3）价格<br>总价格C，每位价格c<br>同等容量下，存储器的访问速度由高到低：双极型→MOS→电荷耦合型→磁泡→定位磁盘→动头磁盘→磁带</li>\n<li>单体多字、多体单字与多体多字<br>（1）并行主存系统的三种模式：单体多字，多体单字，多体多字</li>\n<li>存储器系统、并行存储体系与存储层次<br>（1）存储系统：存储系统是指计算机中由存放程序和数据的各种存储设备、控制部件及管理信息调度的设备（硬件）和算法（软件）所组成的系统。<br>（2）存储体系（存储层次）：构成存储系统的几种不同的存储器之间，配上辅助软硬件或辅助硬件，使之从应用程序员来看，在逻辑上是一个整体<br>基本的二级存储体系：虚拟存储器和Cache存储器（主存-辅存存储层次）<br>Cache存储器对于应用程序员和系统程序员都是透明的<br>（3）并行主存系统：可以并行读出多个CPU字的单体多字，多体单字，，多体多字的交叉存储主存系统</li>\n<li>虚拟存储器与高速缓冲存储器<br>（1）在具有层次结构存储器的计算机系统中，增设地址映像表机构来实现程序在主存中的定位，自动实现部分装入和部分替换功能，能从逻辑上为用户提供一个比物理贮存容量大得多，可寻址的“主存储器”。虚拟存储区的容量与物理主存大小无关，而受限于计算机的地址结构和可用磁盘容量。<br>（2）存储管理方式：段式，页式，段页式</li>\n<li>段式存储管理与页式存储管理技术<br>（1）段式管理：将主存按段分配的存储管理方式<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909201223.png\"><br>首先分配算法<br>最佳分配算法<br>（2）页式管理：将主存空间和程序空间都机械等分成固定大小的页<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909201854.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909202427.png\"><br>（3）段页式管理：将主存机械等分成固定大小的页，程序按模块分段，每个段又分为和主存页面大小相同的页</li>\n<li>地址的映像与变换<br>（1）地址的映像：将每个虚存单元按什么规则（算法）装入（定位于）主存，建立起多用户虚地址N和贮存地址n之间的对应关系<br>（2）地址变换：是指程序按照映像关系装入实存后，在执行中，如何将多用户虚地址N变换成对应的实地址</li>\n<li>全相联映像、直接相联映像与组相联映像<br>（1）Cache的全相联映像：主存中任意一块都可映像装入到Cache中任意一块位置<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212811.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212838.png\"><br>（2）Cache的直接相联映像：把主存空间按Cache大小等分成区，每区内的各块只能映像到Cache中唯一一个特定块位置<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212844.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212845.png\"><br>（3）Cache的组相联映像：将Cache和贮存空间先分成若干个组，共有2^n个组。Cache中多有的组构成Cache的唯一一个区。而主存则分成与Cache同样大小的2^(nd)个区<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212846.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212847.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910083257.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910212801.png\"></li>\n<li>常用替换算法<br>（1）随机算法：RAND，随机产生页号，命中率低，不采用<br>（2）先进先出算法：FIFO，选择最早装如主存的页作为被替换的页<br>（3）近期最少使用算法：LRU，选择近期最少访问的页作为被替换的页<br>（4）优化替换算法：OPT，将未来的近期内不用的页替换出去的算法，有较高的主存命中率，但是不太现实<br>（5）页面失效频率法（动态算法）：PFF，根据各道程序运行中的主存页面失效率的高低，由操作系统来动态操控</li>\n<li>堆栈型替换算法<br>（1）堆栈型替换算法：任何时刻t，在n个实页中的虚页集合总是被包含在给其增加一个实页，即n+1个实页时，在实存中的虚页集合之内的<br>（2）堆栈型替换算法，命中率H随着主存页数n的增减单调上升，至少不下降。<br>LRU替换算法属于堆栈型替换算法，操作：将刚访问过的页号置于栈顶，最久未被访问过的页号置于栈底<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212445.png\"></li>\n<li>重叠与流水的区别<br>（1）重叠解释方式：在解释第K条指令的操作完成之前，就开始解释第K+1条指令<br>（2）重叠和流水的区别：依次重叠时把一条指令的解释分为两个子程序，而流水是分为更多个子过程</li>\n<li>流水线中的各种相关及解决方案<br>（1）局部性相关：指的是在机器同时解释的多条指令之间出现了对同一主存单元或寄存器要求“先写后读”；包括<code>指令相关</code>，<code>访存操作数相关</code>和<code>通用寄存器组相关</code>等;<br>a）指令相关：包含寄存器相关（包括数据相关和名字相关）和控制相关<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910101227.png\"><br>b）主存空间数相关：相邻两条指令之间出现要求对同一主存单元先写入而后再读出的关联<br>解决方法：推后读<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910101451.png\"><br>（2）全局性相关：已进入流水线的转移指令（尤其时条件转移指令）和后续指令之间的相关</li>\n<li>流水线的分类及三个性能指标的计算方法<br>（1）流水线分类：<br>按处理级别：部件级，处理机级，系统级<br>按具有的功能多少：单功能流水线，多功能流水线<br>按多功能流水线的各段能否允许同时用于多种不同功能连接流水：静态流水线，动态流水线<br>按机器所具有的数据表示：标量流水机和向量流水机<br>按各功能段间是否有反馈电路分为：线性流水和非线性流水<br>按信息流动控制方式：顺序流动流水线，异步流动流水线<br>（2）三个性能指标<br>a) 吞吐率Tp ：流水线单位时间里能流出的任务数或结果数<br>Tpmax = 1/max{各个子过程的时间}<br>Tp = n/(m×▲t+(n-1)×▲t) ：m段流水线，各段时间为▲t，完成n个任务的解释共需要时间m×▲t+(n-1)×▲t<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910102823.png\"><br>b) 加速比Sp ：流水线方式相对于非流水线顺序方式速度提高的比值<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910103021.png\"><br>c) 效率η：流水线设备的时间利用率，设备实际使用时间占整个设备运行时间的比值<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910103134.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910103907.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910103939.png\"><br>（3）消除瓶颈：<br>①瓶颈子过程再细分<br>②重复设置多套瓶颈段并联</li>\n<li>单功能非线性流水线的调度技术<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910105055.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910104959.png\"></li>\n</ol>\n","more":"<p><a href=\"/posts/50754.html\">计算机系统结构笔记传送门</a></p>\n<h1 id=\"计算机系统结构知识点\"><a href=\"#计算机系统结构知识点\" class=\"headerlink\" title=\"计算机系统结构知识点\"></a>计算机系统结构知识点</h1><ol>\n<li>多级层次结构：<br>（1）按功能划分成多层机器级组成的层次结构，从上到下依次为，应用语言机器级，高级语言机器级，汇编语言机器级，操作系统机器级，传统机器语言机器级，微程序机器级。<br>（2）机器，被定义为能存储和执行相应语言程序的算法和数据结构的集合体<br>（3）微程序机器级用硬件实现，传统机器语言机器级用固件实现<br>（4）固件：具有软件功能的硬件<br>（5）以软件为主实现的机器称为虚拟机器，由硬件或固件实现的称为实际机器</li>\n<li>透明性：<br>（1）客观存在的事物或属性从某个角度看不见</li>\n<li>翻译与解释<br>（1）翻译：先用转换程序将高一级机器级上的程序<code>整个</code>变换成低一级机器级上等效的程序，然后再在低一级机器级上实现的技术<br>（2）解释：在低级机器级上用它的一串语句或指令来仿真高级机器级上的一条语句或指令的功能，是通过对高级的机器级语言程序中的每条语句或指令<code>逐条</code>解释来实现的技术</li>\n<li>软硬件逻辑功能等效<br>（1）概念：软硬件逻辑功能等效是指计算机系统的某功能可以由硬件实现也可以由软件实现，在逻辑功能上是等价的。由硬件实现功能的特点是速度快、增加硬件成本，灵活性低。由软件实现功能的特点是灵活性好、但速度较慢，增加软件设计费用等</li>\n<li>计算机系统结构、组成与实现的定义及三者之间的关系，以乘法指令为例说明上述三者各自的研究内容<br>（1）计算机系统结构的定义：对计算机系统中各级界面的定义及其上下的功能分配<br>（2）计算机组成的定义：计算机系统结构的逻辑实现，包括机器级内部的数据流和控制流的组成以及逻辑设计等<br>（3）计算机实现：是指计算机组成的物理实现（具体电路，器件的设计，装配技术等等）<br>（4）三者的关系：三者互不相同，但又相互影响。组成向上决定于结构，向下受限于实现技术。<br>（5）对于乘法指令，计算机系统结构主要考虑是否要设置乘法指令；而计算机组成主要考虑乘法指令是用专门的高速乘法器还是用加法器和移位器实现；计算机实现主要考虑乘法器，加法器的物理显示，如器件的类型，继承父，数量的确定和选择</li>\n<li>计算机系统结构的设计思路<br>（1）<code>“由上往下”设计</code>，由顶向底。先考虑应用要求，再逐级向下，下一级是对上一级的优化。是一种穿行设计方法，设计周期较长<br>（2）<code>“由下往上”设计</code>，由底向顶。先设计底层，再加配操作系统和编译系统，以及设施的系统软件和算法等等。软硬件容易脱节，串行设计，周期长，很少采用<br>（3）<code>“从中间开始”向两边设计</code>。一般方法。软硬件并行设计，较好的设计方法</li>\n<li>软件移植及三种移植技术<br>（1）软件的可移植性：软件不修改或只经少量修改就可以由一台机器移到另一台机器上允许，同一软件可应用于不同的环境<br>（2）移植技术：<code>统一高级语言</code>；<code>采用系列机</code>；<code>模拟和仿真</code></li>\n<li>软件兼容及分类<br>（1）软件兼容：机器语言程序以及编译程序能不加修改地通用于各档机器<br>（2）分类：<br>a. 向上兼容/向下兼容：向上（下）兼容是指，按某党机器编制的软件，不加修改就能运行于比他高（低）档的机器上。<br>b. 向前兼容/向后兼容：向前（后）兼容是指，按某个时期投入市场的该型号机器上编制的软件，不加修改就能运行于在它之前（后）的投入市场的机器上。<br>（3）系列机软件必须保证向后兼容，力争向上兼容</li>\n<li>系列机与兼容机，模拟与仿真<br>（1）系列机：是具有相同体系结构，但组成和实现不同的一系列不同型号的计算机系统。<br>兼容机：不同厂家生产的具有相同体系结构的计算机。<br>（2）模拟：用机器语言程序（在主存）解释实现软件移植的方法；运行速度低，实时性差，模拟程序复杂<br>仿真：用微程序（在控制寄存器）直接解释另一种机器指令系统的方法；两种系统结构差别较大时，难以仿真<br>两者的主要区别在于解释用的语言，其次有解释程序的所存位置不同</li>\n<li>应用与器件对系统结构的影响<br>（1）应用的发展对结构设计提出范围广泛的要求<br>（2）器件的发展改变了逻辑设计的传统方法；推动结构和组成前进的关键因素；加速了结构“下移”；促进了算法，语言和软件的发展</li>\n<li>并行性概念及发展并行性的三种技术途径<br>（1）并行性：把解题中具有可以同时进行运算或操作的特性称为并行性，并行性包括同时性和并发性<br>（2）并行性等级：<br>①按计算机系统执行程序的角度，从低到高：指令内部，指令之间，任务或进程之间，作业或程序之间<br>②从计算机系统中处理数据的角度来看，从低到高：位串字串，位并字串，位片串字并，全并行<br>（3）三种技术途径：时间重叠，资源重叠，资源共享<br>时间重叠：多个处理过程在时间上错开<br>资源重叠：重复设置硬件资源来提高可靠性和性能<br>资源共享：多个用户按时间顺序轮流使用同一套资源</li>\n<li>耦合度概念<br>（1）耦合度概念：反映多机系统中各机器之间物理连接的紧密度和交叉作用能力<br>（2）分类：<br>最低耦合：除存储介质，无物理连接，脱机<br>松散耦合：通过通道或通信线路互连，磁带，磁盘…<br>紧密耦合：通过总线或高速开关互连，主存…</li>\n<li>弗林分类法<br>（1）单指令流单数据流（SISD），传统单处理器计算机<br>（2）单指令流多数据流（SIMD），阵列处理机和相联处理机<br>（3）多指令流单数据流（MISD），很少见<br>（4）多指令流多数据流（MIMD），多级系统</li>\n<li>数据表示与数据结构<br>（1）数据表示：能由机器硬件识别和引用的数据类型（数据类型指一类值的集合和可作用于其上的操作集）<br>（2）数据结构：结构数据类型的组织方式，反映了应用中要用到的各种数据元素或信息单元之间的结构关系<br>（3）数据结构和数据表示是软硬件的交界面，数据结构是软，数据表示是硬</li>\n<li>高级数据表示<br>（1）自定义数据表示：<br>a). 标识符数据表示<br>①每个数据带了类型标志位，标识符主要用于指明数据类型，但也可以用域指明所用信息类型。标识符由编译程序建立，对高级语言程序透明。<br>②优点：简化了指令系统和程序设计；简化了编译程序；便于一致性校验；能由硬件自动变换数据类型；支持数据库系统的实现与数据类型无关的要求；为软件调试和应用软件开发提供了支持，便于程序的跟踪和调试<br>③缺点：增加程序所占的主存空间；降低指令的执行速度<br>b). 数据描述符<br>①描述符和数据分开存放，用于描述所访问的数据是整块的还是单个的，访问该数据块或数据元素所要的地址以及其它信息<br>②优点：进一步减少标识符所占存储空间<br>（2）向量，数组数据表示<br>①有向量数据表示的处理机是向量处理机<br>②优点：加快形成元素地址，便于实现把向量各元素成块预取到中央处理机，用一条向量，数组指令流水或同事对整个向量，数组进行高速处理<br>（3）堆栈数据表示<br>①有堆栈数据表示的处理机是堆栈机器<br>②通常用于保存子程序调用时的返回地址<br>③堆栈机器特点：有丰富的堆栈操作指令且功能强大；有力地支持了高级语言程序的编译；有力的支持了子程序的嵌套和递归调用</li>\n<li>引入数据表示的原则<br>（1）原则1：看系统的效率是否显著提高，包括实现时间和存储空间是否显著减少。实现时间是否减少又主要看主存和处理机之间传送的信息量是否减少<br>（2）原则2：看引入这种数据表示后，其通用性和利用率是否提高<br>（3）原则3：基本的数据表示，也有可挖掘的细节问题<br>（4）原则4：基本的数据类型必须设</li>\n<li>浮点数尾数基值的选择与下溢处理方法<br>（1）浮点数尾数基值的选择<br>如果小数点的位置事先已有约定，不再改变，此类数称为“定点数”。<br>如果小数点的位置可变，则称为“浮点数”。<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200826171758.png\"><br>rm ：尾数的基<br>re ：阶码的基（re =2）<br>m： 尾数长度 (注意其含义)<br>p： 阶码长度<br>【p表示数的范围大小；尾数的位数m主要影响表示值的精度】<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200415135441.png\"></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">条件：非负阶，规格化，正尾数</th>\n<th align=\"center\">阶值：二进制p位，尾数：rm进制m’位</th>\n<th align=\"center\">若p=2，m=4，当rm=2（即m’=4）时</th>\n<th align=\"center\">若p=2，m=4，当rm=16（即m’=1）时</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">可表示最小尾数值</td>\n<td align=\"center\">rm^(-1)</td>\n<td align=\"center\">1/2</td>\n<td align=\"center\">1/16</td>\n</tr>\n<tr>\n<td align=\"center\">可表示最大尾数值</td>\n<td align=\"center\">1-1×rm^(-m’)</td>\n<td align=\"center\">15/16</td>\n<td align=\"center\">15/16</td>\n</tr>\n<tr>\n<td align=\"center\">最大阶值</td>\n<td align=\"center\">2^p-1</td>\n<td align=\"center\">3</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">可表示最小值</td>\n<td align=\"center\">rm^(-1)</td>\n<td align=\"center\">1/2</td>\n<td align=\"center\">1/16</td>\n</tr>\n<tr>\n<td align=\"center\">可表示最大值</td>\n<td align=\"center\">rm^(2^p-1)×(1-rm^(-m’))</td>\n<td align=\"center\">7.5</td>\n<td align=\"center\">3840</td>\n</tr>\n<tr>\n<td align=\"center\">可表示的尾数个数</td>\n<td align=\"center\">rm^(m’)×(rm-1)/rm</td>\n<td align=\"center\">8</td>\n<td align=\"center\">15</td>\n</tr>\n<tr>\n<td align=\"center\">可表示阶的个数</td>\n<td align=\"center\">2^p</td>\n<td align=\"center\">4</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">可表示数的个数</td>\n<td align=\"center\">2^p×rm^(m’)×(rm-1)/rm</td>\n<td align=\"center\">32</td>\n<td align=\"center\">60</td>\n</tr>\n</tbody></table>\n<p>（2）下溢处理方法（对应用程序员，系统程序员透明）<br>减少运算中的精度损失关键是要处理好运算中尾数超出字长的部分，使精度损失最小<br>a) <strong>截断法</strong><br>①方法：<strong>将尾数超出机器字长的部分去掉</strong><br>②以rm=2，m=2为例讨论最大误差：在整数时接近于1(“11:111…1”截断成“11:”)；在分数时接近于2^(-m) (“.01:111…1”截断成“.01:”)<br>③对于正数，如有误差总是负误差<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200415140626.png\"><br>④优点：实现简单，不增加硬件，不需要处理时间<br>缺点：最大误差较大，且平均误差为负且较大，无法调节，因而已很少使用<br>b) <strong>舍入法</strong><br>①方法：在机器运算的规定字长之外增设一位附加位，存放溢出部分的最高位，每当进行尾数下溢处理时，将附加位加1，[整数加0.5，分数加2^(-(m+1))]<br>②例如：整数：“10:10…0”舍入成“11:” 正误差；分数：“.10:01…0”舍入成“.10:” 负误差<br>③优点：实现简单，增加的硬件开销少，最大误差小，平均误差接近于零，略偏正<br>缺点：处理速度慢，需要花费在数的附加位加1以及因此产生进位的时间，最坏情况下，需要从尾数最低位进制<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/Y5E%7B1ZHXC%25%5B77%7BW_5Z2%5BY%5DO.png\"><br>c) <strong>恒置“1”法</strong><br>①方法：将机器运算的规定字长之最低位恒置“1”<br>②最大误差：整数为1（如“10:00…0”处理成“11:”）；分数为2-m（如“.00:00…0”处理成“.01:”）<br>③误差有正负：负误差（如“.11:10…1”处理成“.11:”）；正误差（如“.00:00…0”处理成“.01:”)<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/%25%7DMG%25YPJF2L0QNXJ%7DK8FC%402.png\"><br>④优点：实现简单，不需要增加硬件和处里时间，平均误差趋于0<br>缺点：最大误差最大，比截断法还大（接近于1）<br>⑤多用于中、高速机器中，由于尾数位数比微、小型机器长<br>d) <strong>查表舍入法</strong><br>①方法：取尾数p位的最后k-1位和准备舍弃的最高1位，共k位。通过ROM或PLA查表得到k-1位，作为新的尾数p位的最后k-1位<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/%29%7DUAT%7DO7%7D%7B%25%28WNSFI%40I%25MOP.png\"><br>②下溢处理表的内容：当尾数最低k-1位为全”1“时以<code>截断法</code>设置处理结果；其余情况采用<code>舍入法</code><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200415142649.png\"><br>③优点：ROM法速度较快，平均误差可调到0；避免再次右规操作<br>缺点：需要硬件配合，硬件量大<br>（3）上述4种处理方法中：<br><strong>最大误差最大</strong>的是恒置“1”法，<br><strong>最大误差最小</strong>的是舍入法；<br><strong>平均误差最大</strong>的是截断法；<br><strong>平均误差可人为调节</strong>的是查表舍入法；<br><strong>下溢处理不需要附加时间开销，即速度最快</strong>的是截断法和恒置“1”法，<br><strong>处理速度最慢</strong>的是舍入法；<br><strong>实现上最花费硬件</strong>的是查表舍入法，<br><strong>最省硬件</strong>的是截断法和恒置“1”法。 </p>\n<ol start=\"18\">\n<li>程序在主存中的定位技术<br>（1）静态再定位：再目的程序装入主存时，由装入程序用软件方法把目的程序的逻辑地址变换成物理地址，程序执行时，物理地址不再改变<br>（2）动态再定位：在执行每条指令时才形成访存物理地址的方法<br>①基址寻址：设置基址寄存器和地址加法器硬件，实现逻辑地址到物理地址空间变换的支持<br>②优越性：地址加法器形成物理地址的速度快于装入程序形成的物理地址速度；具有越界保护措施，如设置上、下界寄存器，判断是否出现地址越界错误<br>（3）虚实地址映像表：用虚拟存储器增加映像表硬件后，程序空间可以超过实际主存空间，采用基地址寄存器加位移量的方法</li>\n<li>基址寻址与变址寻址的区别<br>（1）基址寻址：基址寄存器里的值加上指令格式内的逻辑地址形成物理地址；对逻辑地址空间到物理地址空间变换的支持；通常基址寄存器的内容不变，逻辑地址可变；<br>（2）变址寻址：变址寄存器的值和指令地址码部分给出的地址之和作为操作数地址；对诸如向量，数组等数据块运算的支持；通常逻辑地址不变，变址寄存器里面的值由用户定义</li>\n<li>信息按整数边界存储<br>（1）为了使任何时候所需的信息都只用一个存储周期访问到，要求信息在主存中存放的地址必须是该信息宽度（字节数）的整数倍，防止信息跨主存边界存放<br>（2）优点：访问周期短；缺点：存储空间浪费</li>\n<li>哈夫曼压缩思想与指令格式的优化<br>（1）指令包含操作码和地址码两部分，为了优化指令格式，要使指令的平均字长最短，减少程序总位数以及增加指令字能表示的操作信息和地址信息<br>（2）哈夫曼压缩思想：当各种时间发生的概率不均等时，对发生概率最高的事件用最短的位数（时间）来表示（处理），而对出现概率较低的事件允许用较长的位数（时间）来表示（处理），就会使表示（处理）的平均位数（时间）缩短<br>（3）扩展操作码编码</li>\n<li>CISC与RISC的常用技术<br>（1）CISC（复杂指令系统计算机）：进一步增强原有指令的功能以及设置更为复杂的新指令，取代原先由软件子程序完成的功能，实现软件功能的硬化；<br>a)面向目标程序的优化实现改进<br>①途径1：对大量已有机器的机器语言程序及其执行情况进行统计各种指令和指令串的使用频度来加以分析和改进。<br>使用频度分为<code>静态使用频度</code>（程序中统计出的指令及指令串的使用频度称为静态使用频度。着眼于减少目标程序所占用的存储空间）和<code>动态使用频度</code>（目标程序执行过程中对指令和指令串统计出的频度称为动态使用频度。着眼于减少目标程序的执行时间）<br>②途径2：增设强功能复合指令来取代原先由常用宏指令或子程序实现的功能，由微程序解释实现，不仅大大提高了运算速度，减少了程序调用的额外开销，也减少了子程序所占的主存空间。<br>b)面向高级语言的优化实现改进<br>①目的：缩短高级语言和机器语言的语义差距，支持高级语言编译，缩短编译程序长度和时间<br>②途径1：通过对源程序中各种高级语言语句的使用频度进行统计来分析改进<br>③途径2：如何面向编译，优化代码生成来改进<br>④途径3：改进指令系统，使它与各种语言间的语义差距都有同等的缩小<br>⑤途径4：让机器具有分别面向各种高级语言的多种指令系统，多种系统结构的面向问题动态自寻优的计算机系统<br>⑥途径5：发展高级语言计算机（或称高级语言机器）<br>c)面向操作系统的优化实现改进<br>①目的：通过缩短操作系统与计算机系统结构之间的语义差距，来进一步减少运行操作系统的时间和节省操作系统软件所占用的存储空间<br>②途径1：通过对操作系统中常用指令和指令串的使用频度进行统计分析来改进<br>③途径2：考虑如何增设专用于操作系统的新指令<br>④途径3：把操作系统中频繁使用的，对速度影响大的机构型软件子程序硬化或固化，直接用硬件或微程序解释实现<br>⑤途径4：发展让操作系统由专门的处理机来执行的功能分布处理系统结构<br>d) CISC的问题：指令系统庞大；许多质量操作繁杂，执行速度很低；编译程序太长，太复杂；部分指令利用率很低<br>（2）RISC（精简指令系统计算机）：通过减少指令种数和简化指令功能来降低硬件设计的复杂度，提高指令的执行速度<br>a) RISC的基本技术<br>①按照设计RISC一般原则来设计<br>②逻辑实现采用硬联和微程序相结合<br>③在CPU中设置大量工作寄存器并采用重叠寄存器窗口<br>④指令用流水和延迟转移<br>⑤采用高速缓冲寄存器cache，设置指令cache和数据cache分别存放指令和数据<br>⑥优化设计编译系统<br>b) RISC的问题<br>①指令少，加重汇编语言程序设计的负担，增加了机器语言程序的长度，占用存储空间多，加大了指令的信息流量<br>②对浮点运算和虚拟存储器支持不足<br>③RISC机器的编译程序比CISC的难写</li>\n<li>总线的分类<br>（1）按在系统中的位置分为<code>芯片级</code>，<code>板级</code>，<code>系统级</code><br>（2）按允许信息传送方向分为<code>单向传输</code>，<code>双向传输（半双向和全双向）</code><br>（3）按用法分为<code>专用</code>和<code>非专用</code></li>\n<li>总线的控制技术及通讯技术<br>（1）控制技术<br>a） 集中式控制<br>①优先次序的确定方法：串行链接，定时查询，独立请求<br>②串行链接获得使用总线权优先次序由“总线可用”线所接不见的物理位置决定，离总线控制器越近，优先级越高；三根总线，总线忙，总线可用，总线请求<br>③定时查询：查询线上计数值与发出请求的部件号是否一致；总线忙+总线请求+「logn「个定时查询计数线=2+「logn「<br>④独立请求：1根总线已被分配线+每个部件各有一对总线请求和总线准许线=2×N+1<br>b） 分布式控制<br>（2）通讯技术<br>a) 同步通信：定宽，定距的系统时标同步<br>b) 异步通信：<br>分为单向控制（分为单向源控和单向目控）和请求/回答双向控制（分为源控式（互锁和非互锁）和目控）</li>\n<li>中断响应优先级与中断处理程序优先级及分析过程<br>（1）基本概念:<br>中断：CPU中止正在执行的程序，转去处理随机提出的请求，待处理完后，再回到预先被打断的程序继续恢复执行的过程<br>中断系统：相应和处理各种中断的软硬件总体称为中断系统<br>中断分为内部中断（CPU内的异常引起），外部中断（由中断信号引起）和软件中断（由自陷指令引起）；外部中断又分为可屏蔽中断和不可屏蔽中断<br>中断源：引起中断的各种事件<br>中断请求：中断源向中断系统发出请求中断的申请<br>中断响应：允许中断CPU现行程序的运行，转去对该请求进行预处理，包括保存好断电及其现场，调出有关处理该中断的中断服务程序，准备运行（交换新旧程序状态字PSW）<br>中断现行程序细分为中断（可屏蔽）和异常（不可屏蔽，如自陷，故障，失败）<br>（2）中断分级<br>机器校验（第1级），程序性中断和管理程序调用（第2级），外部中断（第3级），输入/输出（第4级），重新启动（最低级）<br>（3）中断的响应次序与处理次序<br>中断级屏蔽位寄存器<br>本级对本级屏蔽<br>中断响应次序，中断处理完成次序，中断处理次序<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909153438.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909154306.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909160431.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909160611.png\"><br>（4）通道程序结束引起的中断属于I/O中断；<br>访管中断属于第2级；</li>\n<li>通道的工作原理及三类通道的流量计算<br>（1）通道的工作原理：用户只能再目态程序中安排要求输入输出的广义指令，然后进入相应管理程序执行这些输入输出管态指令<br>a) 目态和管态：<br>管态又叫特权态，系统态或核心态。CPU在管态下可以执行指令系统的全集。通常，操作系统在管态下运行。<br>目态又叫常态或用户态。机器处于目态时，程序只能执行非特权指令。<br>从目态转换为管态的唯一途径是中断。<br>从管态到目态可以通过修改程序状态字来实现，这将伴随这由操作系统程序到用户程序的转换。<br>启动I/O指令属于管态指令<br>（2）三类通道：<code>字节多路</code>，<code>数组多路</code>和<code>选择通道</code><br>通道流量和通道工作方式，数据传送期内选择一次设备的时间Ts，传送一个字节的时间Td有关<br>通道的极限流量：<br>fmaxbyte=1/(Ts+Td)<br>fmaxblock=K/(Ts+K×Td)<br>fmaxselect=N/(Ts+N×Td)<br>设备要求通道的实际最大流量只有小于等于通道所能达到的极限<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909165849.png\"><br>工作周期小的不能挂载<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909171038.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909171326.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909171903.png\"></li>\n<li>存储器的性能指标<br>（1）容量Sm：存储器的位数或总字节数<br>Sm=W×L×m （W:存储体的字长，L每个存储体的字数，m并行工作存储体的个数）<br>（2）速度<br>访问时间Tn，存储周期Tm，频宽Bm<br>（3）价格<br>总价格C，每位价格c<br>同等容量下，存储器的访问速度由高到低：双极型→MOS→电荷耦合型→磁泡→定位磁盘→动头磁盘→磁带</li>\n<li>单体多字、多体单字与多体多字<br>（1）并行主存系统的三种模式：单体多字，多体单字，多体多字</li>\n<li>存储器系统、并行存储体系与存储层次<br>（1）存储系统：存储系统是指计算机中由存放程序和数据的各种存储设备、控制部件及管理信息调度的设备（硬件）和算法（软件）所组成的系统。<br>（2）存储体系（存储层次）：构成存储系统的几种不同的存储器之间，配上辅助软硬件或辅助硬件，使之从应用程序员来看，在逻辑上是一个整体<br>基本的二级存储体系：虚拟存储器和Cache存储器（主存-辅存存储层次）<br>Cache存储器对于应用程序员和系统程序员都是透明的<br>（3）并行主存系统：可以并行读出多个CPU字的单体多字，多体单字，，多体多字的交叉存储主存系统</li>\n<li>虚拟存储器与高速缓冲存储器<br>（1）在具有层次结构存储器的计算机系统中，增设地址映像表机构来实现程序在主存中的定位，自动实现部分装入和部分替换功能，能从逻辑上为用户提供一个比物理贮存容量大得多，可寻址的“主存储器”。虚拟存储区的容量与物理主存大小无关，而受限于计算机的地址结构和可用磁盘容量。<br>（2）存储管理方式：段式，页式，段页式</li>\n<li>段式存储管理与页式存储管理技术<br>（1）段式管理：将主存按段分配的存储管理方式<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909201223.png\"><br>首先分配算法<br>最佳分配算法<br>（2）页式管理：将主存空间和程序空间都机械等分成固定大小的页<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909201854.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909202427.png\"><br>（3）段页式管理：将主存机械等分成固定大小的页，程序按模块分段，每个段又分为和主存页面大小相同的页</li>\n<li>地址的映像与变换<br>（1）地址的映像：将每个虚存单元按什么规则（算法）装入（定位于）主存，建立起多用户虚地址N和贮存地址n之间的对应关系<br>（2）地址变换：是指程序按照映像关系装入实存后，在执行中，如何将多用户虚地址N变换成对应的实地址</li>\n<li>全相联映像、直接相联映像与组相联映像<br>（1）Cache的全相联映像：主存中任意一块都可映像装入到Cache中任意一块位置<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212811.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212838.png\"><br>（2）Cache的直接相联映像：把主存空间按Cache大小等分成区，每区内的各块只能映像到Cache中唯一一个特定块位置<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212844.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212845.png\"><br>（3）Cache的组相联映像：将Cache和贮存空间先分成若干个组，共有2^n个组。Cache中多有的组构成Cache的唯一一个区。而主存则分成与Cache同样大小的2^(nd)个区<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212846.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212847.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910083257.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910212801.png\"></li>\n<li>常用替换算法<br>（1）随机算法：RAND，随机产生页号，命中率低，不采用<br>（2）先进先出算法：FIFO，选择最早装如主存的页作为被替换的页<br>（3）近期最少使用算法：LRU，选择近期最少访问的页作为被替换的页<br>（4）优化替换算法：OPT，将未来的近期内不用的页替换出去的算法，有较高的主存命中率，但是不太现实<br>（5）页面失效频率法（动态算法）：PFF，根据各道程序运行中的主存页面失效率的高低，由操作系统来动态操控</li>\n<li>堆栈型替换算法<br>（1）堆栈型替换算法：任何时刻t，在n个实页中的虚页集合总是被包含在给其增加一个实页，即n+1个实页时，在实存中的虚页集合之内的<br>（2）堆栈型替换算法，命中率H随着主存页数n的增减单调上升，至少不下降。<br>LRU替换算法属于堆栈型替换算法，操作：将刚访问过的页号置于栈顶，最久未被访问过的页号置于栈底<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200909212445.png\"></li>\n<li>重叠与流水的区别<br>（1）重叠解释方式：在解释第K条指令的操作完成之前，就开始解释第K+1条指令<br>（2）重叠和流水的区别：依次重叠时把一条指令的解释分为两个子程序，而流水是分为更多个子过程</li>\n<li>流水线中的各种相关及解决方案<br>（1）局部性相关：指的是在机器同时解释的多条指令之间出现了对同一主存单元或寄存器要求“先写后读”；包括<code>指令相关</code>，<code>访存操作数相关</code>和<code>通用寄存器组相关</code>等;<br>a）指令相关：包含寄存器相关（包括数据相关和名字相关）和控制相关<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910101227.png\"><br>b）主存空间数相关：相邻两条指令之间出现要求对同一主存单元先写入而后再读出的关联<br>解决方法：推后读<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910101451.png\"><br>（2）全局性相关：已进入流水线的转移指令（尤其时条件转移指令）和后续指令之间的相关</li>\n<li>流水线的分类及三个性能指标的计算方法<br>（1）流水线分类：<br>按处理级别：部件级，处理机级，系统级<br>按具有的功能多少：单功能流水线，多功能流水线<br>按多功能流水线的各段能否允许同时用于多种不同功能连接流水：静态流水线，动态流水线<br>按机器所具有的数据表示：标量流水机和向量流水机<br>按各功能段间是否有反馈电路分为：线性流水和非线性流水<br>按信息流动控制方式：顺序流动流水线，异步流动流水线<br>（2）三个性能指标<br>a) 吞吐率Tp ：流水线单位时间里能流出的任务数或结果数<br>Tpmax = 1/max{各个子过程的时间}<br>Tp = n/(m×▲t+(n-1)×▲t) ：m段流水线，各段时间为▲t，完成n个任务的解释共需要时间m×▲t+(n-1)×▲t<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910102823.png\"><br>b) 加速比Sp ：流水线方式相对于非流水线顺序方式速度提高的比值<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910103021.png\"><br>c) 效率η：流水线设备的时间利用率，设备实际使用时间占整个设备运行时间的比值<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910103134.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910103907.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910103939.png\"><br>（3）消除瓶颈：<br>①瓶颈子过程再细分<br>②重复设置多套瓶颈段并联</li>\n<li>单功能非线性流水线的调度技术<br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910105055.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/20200910104959.png\"></li>\n</ol>\n","categories":[{"name":"学习笔记","path":"api/categories/学习笔记.json"}],"tags":[{"name":"大学课程","path":"api/tags/大学课程.json"},{"name":"系统结构","path":"api/tags/系统结构.json"}]}