{"title":"学习笔记 | Flask学习从入门到放弃（1）","slug":"学习笔记-Flask笔记1","date":"2019-09-02T13:20:03.000Z","updated":"2019-09-02T13:20:03.000Z","comments":true,"path":"api/articles/学习笔记-Flask笔记1.json","excerpt":null,"covers":null,"content":"<p>Flask web开发学习笔记之初识Flask</p>\n<ul>\n<li>Flask是使用python编写的Web微框架</li>\n<li>Flask有两个主要依赖：<ul>\n<li>WSGI（Web Server Gateway Interface，Web服务器网关接口）</li>\n<li>Jinja2模块引擎</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-1搭建开发环境\"><a href=\"#1-1搭建开发环境\" class=\"headerlink\" title=\"1.1搭建开发环境\"></a>1.1搭建开发环境</h1><h2 id=\"1-1-1-Pipenv工作流\"><a href=\"#1-1-1-Pipenv工作流\" class=\"headerlink\" title=\"1.1.1 Pipenv工作流\"></a>1.1.1 Pipenv工作流</h2><ul>\n<li>可看作是pip加强版，是pip和pipfile和virtualenv的结合体，使得包安装，包依赖管理和虚拟环境管理更加方便</li>\n<li>python3.4及以上版本自带pip工具，使用    <code>$ pip --version</code>     查看已安装版本</li>\n<li>安装pipenv： <code>$ pip install pipenv</code></li>\n<li>选择并进入工作目录，创建虚拟环境： <code>$ pipenv install</code></li>\n<li>虚拟环境文件夹的目录名称的形式是’当前项目目录名+一串随机字符’</li>\n<li>显式激活虚拟环境： <code>$ pipenv shell</code> ,使用<code>exit</code>退出</li>\n<li>非显式激活虚拟环境： <code>$ pipenv run python xxxx.py</code></li>\n<li>管理依赖（会使用到的python包）,查看Pipfile和Pipfile.lock文件,或者输入<code>$ pipenv graph</code>或者在虚拟环境中输入 <code>$ pip list</code></li>\n</ul>\n<h2 id=\"1-1-2-安装Flask\"><a href=\"#1-1-2-安装Flask\" class=\"headerlink\" title=\"1.1.2 安装Flask\"></a>1.1.2 安装Flask</h2><ul>\n<li>在虚拟环境中安装Flask： <code>$ pipenv install Flask</code></li>\n</ul>\n<h2 id=\"1-1-3-集成开发环境IDE\"><a href=\"#1-1-3-集成开发环境IDE\" class=\"headerlink\" title=\"1.1.3 集成开发环境IDE\"></a>1.1.3 集成开发环境IDE</h2><ul>\n<li>pycharm</li>\n<li>点击File → Setting → Project：XXX → Project Interpreter → Add local Python Interpreter → Virtualenv Environment → Existing environment → （输入 <code>$ pipenv --venv</code> 查看对应虚拟环境路径，找到其下的python.exe文件，linux/MacOS在bin，windows在Scripts）</li>\n<li>推荐使用浏览器 Firefox 和 Chorme</li>\n</ul>\n<h1 id=\"1-2-第一的程序\"><a href=\"#1-2-第一的程序\" class=\"headerlink\" title=\"1.2 第一的程序\"></a>1.2 第一的程序</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask //导入Flask类</span><br><span class=\"line\">app=Flask(__name__)     //实例化这个类</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)\t\t\t//注册路由</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span>\t\t\t//视图函数</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">\tapp.run(debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-1-创建程序实例\"><a href=\"#1-2-1-创建程序实例\" class=\"headerlink\" title=\"1.2.1 创建程序实例\"></a>1.2.1 创建程序实例</h2><ul>\n<li>导入Flask类，实例化这个类</li>\n</ul>\n<h2 id=\"1-2-2-注册路由\"><a href=\"#1-2-2-注册路由\" class=\"headerlink\" title=\"1.2.2 注册路由\"></a>1.2.2 注册路由</h2><ul>\n<li>为函数附加app.route()装饰器，并传入URL规则作参数</li>\n<li>可以为一个视图函数绑定多个URL</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hi&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hello&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span>():</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;h1&gt;hello&lt;/h1&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>动态URL：使用‘&lt;变量名&gt;’表示变量</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/greet/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greet</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;h1&gt;hello, %s!&lt;/h1&gt;&#x27;</span> % name</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>URL中包含变量时，如果用户访问的URL中没有包含变量，则会返回错误，所以可以设置装饰器使用defaults参数设置变量的默认值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/greet&#x27;</span>,defaults=&#123;<span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;programmer&#x27;</span>&#125;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/greet/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greet</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;h1&gt;Hello, %s!&lt;/h1&gt;&#x27;</span> % name</span><br><span class=\"line\"></span><br><span class=\"line\">//等价于</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/greet&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/greet/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greet</span>(<span class=\"params\">name=<span class=\"string\">&#x27;programmer&#x27;</span></span>):</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;h1&gt;Hello, %s!&lt;/h1&gt;&#x27;</span> % name</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"1-3-启动开发服务器\"><a href=\"#1-3-启动开发服务器\" class=\"headerlink\" title=\"1.3 启动开发服务器\"></a>1.3 启动开发服务器</h1><h2 id=\"1-3-1-运行\"><a href=\"#1-3-1-运行\" class=\"headerlink\" title=\"1.3.1 运行\"></a>1.3.1 运行</h2><ul>\n<li><code>$ flask run</code></li>\n<li>自动发现程序实例：（Linux/macOS）<code>$ export FlASK_APP=XXX </code>或（Windows）<code>set FlASK_APP=XXX </code>,但是当我在Windows使用powershell时我输入<code>set FLASK_APP=appname.py</code>时，出错了，解决办法是输入<code>$env:FLASK_APP=&quot;appname.py&quot;</code> </li>\n<li>管理环境变量： 安装python-dotenv,<code>pip install python-dotenv</code>,在项目根目录下创建两个文件：.env（存储敏感信息的环境变量）和.flaskenv（存储与flask相关公开环境变量）,每行一个，以#为注释的键值对</li>\n<li>使用pycharm运行,需要配置一系列变量…..</li>\n</ul>\n<h2 id=\"1-3-2-更多启动选项\"><a href=\"#1-3-2-更多启动选项\" class=\"headerlink\" title=\"1.3.2 更多启动选项\"></a>1.3.2 更多启动选项</h2><ul>\n<li>设置主机地址：<code>flask run --host=0.0.0.0</code></li>\n<li>设置端口： <code>flask run --port=8000</code></li>\n<li>设置开发环境：可在.flaskenv文件中写入<code>FALSK_ENV=development</code>，在开发环境下，调试模式自动开启，通过FALSK_DEBUG控制是(=1)否(=0)开启.</li>\n<li>调试模式下，会激活调试器和重载器，调试器允许在错误页面输入PIN码调试，重载器可以检测文件变动，重启服务器。</li>\n<li>内置stat重载器性能一般，可以使用watchdog，<code>pipenv install watchdog --dev</code>,添加–dev的目的是声明为开发依赖。</li>\n</ul>\n<h1 id=\"1-4-shell\"><a href=\"#1-4-shell\" class=\"headerlink\" title=\"1.4 shell\"></a>1.4 shell</h1><ul>\n<li>python shell与flask shell</li>\n</ul>\n<h1 id=\"1-5-Flask扩展\"><a href=\"#1-5-Flask扩展\" class=\"headerlink\" title=\"1.5 Flask扩展\"></a>1.5 Flask扩展</h1><ul>\n<li>即使用Flask提供的API接口编写的Python库</li>\n</ul>\n<h1 id=\"1-6-项目配置\"><a href=\"#1-6-项目配置\" class=\"headerlink\" title=\"1.6 项目配置\"></a>1.6 项目配置</h1><ul>\n<li>配置变量都是通过Flask对象的app.config属性作为统一的接口来设置和获取</li>\n<li>单个设置：<code>app.cofig[&#39;ADMIN_NAME&#39;]=&#39;xiaoming&#39;</code>,也可以保存在文件中</li>\n<li>多个设置：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.config.update&#123;</span><br><span class=\"line\">\tTESTING=<span class=\"literal\">True</span>,</span><br><span class=\"line\">\tSECRET_KEY=<span class=\"string\">&#x27;XXXXXXXXXXX&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取：<code>value=app.config[&#39;ADMIN_NAME&#39;]</code></li>\n</ul>\n<h1 id=\"1-7-URL与端点\"><a href=\"#1-7-URL与端点\" class=\"headerlink\" title=\"1.7 URL与端点\"></a>1.7 URL与端点</h1><ul>\n<li>使用Flask提供的url_for()函数获取URL，第一个参数是端点名（默认是视图函数名）,其后还可以加动态参数，形如：name=’Jack’,得到的URL是相对的URL（内部的URL）</li>\n</ul>\n<h1 id=\"1-8-Flask命令\"><a href=\"#1-8-Flask命令\" class=\"headerlink\" title=\"1.8 Flask命令\"></a>1.8 Flask命令</h1><ul>\n<li>flask run/flask shell/flask –help等等</li>\n<li>注册flask命令：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.cli.command()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">\tclick.env(<span class=\"string\">&#x27;Hello , Human!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>然后在控制台输入：<code>flask hello</code> </p>\n<h1 id=\"1-9-模板和静态文件\"><a href=\"#1-9-模板和静态文件\" class=\"headerlink\" title=\"1.9 模板和静态文件\"></a>1.9 模板和静态文件</h1><ul>\n<li>项目结构示例：templates中存放html文件，static中存放css和js文件</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello/</span><br><span class=\"line\"><span class=\"bullet\">   -</span> templates/</span><br><span class=\"line\"><span class=\"bullet\">   -</span> static/</span><br><span class=\"line\"><span class=\"bullet\">   -</span> app.py</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"1-10-Flask与MVC框架\"><a href=\"#1-10-Flask与MVC框架\" class=\"headerlink\" title=\"1.10 Flask与MVC框架\"></a>1.10 Flask与MVC框架</h1><ul>\n<li>MVC框架最初是设计桌面程序的，在MVC框架中，程序被分成了三个组件：数据处理（Model），用户界面（View），交互逻辑（Controller）</li>\n<li>严格来说Flask不是MVC架构的框架</li>\n</ul>\n","more":"<p>Flask web开发学习笔记之初识Flask</p>\n<ul>\n<li>Flask是使用python编写的Web微框架</li>\n<li>Flask有两个主要依赖：<ul>\n<li>WSGI（Web Server Gateway Interface，Web服务器网关接口）</li>\n<li>Jinja2模块引擎</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-1搭建开发环境\"><a href=\"#1-1搭建开发环境\" class=\"headerlink\" title=\"1.1搭建开发环境\"></a>1.1搭建开发环境</h1><h2 id=\"1-1-1-Pipenv工作流\"><a href=\"#1-1-1-Pipenv工作流\" class=\"headerlink\" title=\"1.1.1 Pipenv工作流\"></a>1.1.1 Pipenv工作流</h2><ul>\n<li>可看作是pip加强版，是pip和pipfile和virtualenv的结合体，使得包安装，包依赖管理和虚拟环境管理更加方便</li>\n<li>python3.4及以上版本自带pip工具，使用    <code>$ pip --version</code>     查看已安装版本</li>\n<li>安装pipenv： <code>$ pip install pipenv</code></li>\n<li>选择并进入工作目录，创建虚拟环境： <code>$ pipenv install</code></li>\n<li>虚拟环境文件夹的目录名称的形式是’当前项目目录名+一串随机字符’</li>\n<li>显式激活虚拟环境： <code>$ pipenv shell</code> ,使用<code>exit</code>退出</li>\n<li>非显式激活虚拟环境： <code>$ pipenv run python xxxx.py</code></li>\n<li>管理依赖（会使用到的python包）,查看Pipfile和Pipfile.lock文件,或者输入<code>$ pipenv graph</code>或者在虚拟环境中输入 <code>$ pip list</code></li>\n</ul>\n<h2 id=\"1-1-2-安装Flask\"><a href=\"#1-1-2-安装Flask\" class=\"headerlink\" title=\"1.1.2 安装Flask\"></a>1.1.2 安装Flask</h2><ul>\n<li>在虚拟环境中安装Flask： <code>$ pipenv install Flask</code></li>\n</ul>\n<h2 id=\"1-1-3-集成开发环境IDE\"><a href=\"#1-1-3-集成开发环境IDE\" class=\"headerlink\" title=\"1.1.3 集成开发环境IDE\"></a>1.1.3 集成开发环境IDE</h2><ul>\n<li>pycharm</li>\n<li>点击File → Setting → Project：XXX → Project Interpreter → Add local Python Interpreter → Virtualenv Environment → Existing environment → （输入 <code>$ pipenv --venv</code> 查看对应虚拟环境路径，找到其下的python.exe文件，linux/MacOS在bin，windows在Scripts）</li>\n<li>推荐使用浏览器 Firefox 和 Chorme</li>\n</ul>\n<h1 id=\"1-2-第一的程序\"><a href=\"#1-2-第一的程序\" class=\"headerlink\" title=\"1.2 第一的程序\"></a>1.2 第一的程序</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask //导入Flask类</span><br><span class=\"line\">app=Flask(__name__)     //实例化这个类</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)\t\t\t//注册路由</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span>\t\t\t//视图函数</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">\tapp.run(debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-1-创建程序实例\"><a href=\"#1-2-1-创建程序实例\" class=\"headerlink\" title=\"1.2.1 创建程序实例\"></a>1.2.1 创建程序实例</h2><ul>\n<li>导入Flask类，实例化这个类</li>\n</ul>\n<h2 id=\"1-2-2-注册路由\"><a href=\"#1-2-2-注册路由\" class=\"headerlink\" title=\"1.2.2 注册路由\"></a>1.2.2 注册路由</h2><ul>\n<li>为函数附加app.route()装饰器，并传入URL规则作参数</li>\n<li>可以为一个视图函数绑定多个URL</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hi&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hello&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span>():</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;h1&gt;hello&lt;/h1&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>动态URL：使用‘&lt;变量名&gt;’表示变量</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/greet/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greet</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;h1&gt;hello, %s!&lt;/h1&gt;&#x27;</span> % name</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>URL中包含变量时，如果用户访问的URL中没有包含变量，则会返回错误，所以可以设置装饰器使用defaults参数设置变量的默认值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/greet&#x27;</span>,defaults=&#123;<span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;programmer&#x27;</span>&#125;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/greet/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greet</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;h1&gt;Hello, %s!&lt;/h1&gt;&#x27;</span> % name</span><br><span class=\"line\"></span><br><span class=\"line\">//等价于</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/greet&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/greet/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greet</span>(<span class=\"params\">name=<span class=\"string\">&#x27;programmer&#x27;</span></span>):</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;h1&gt;Hello, %s!&lt;/h1&gt;&#x27;</span> % name</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"1-3-启动开发服务器\"><a href=\"#1-3-启动开发服务器\" class=\"headerlink\" title=\"1.3 启动开发服务器\"></a>1.3 启动开发服务器</h1><h2 id=\"1-3-1-运行\"><a href=\"#1-3-1-运行\" class=\"headerlink\" title=\"1.3.1 运行\"></a>1.3.1 运行</h2><ul>\n<li><code>$ flask run</code></li>\n<li>自动发现程序实例：（Linux/macOS）<code>$ export FlASK_APP=XXX </code>或（Windows）<code>set FlASK_APP=XXX </code>,但是当我在Windows使用powershell时我输入<code>set FLASK_APP=appname.py</code>时，出错了，解决办法是输入<code>$env:FLASK_APP=&quot;appname.py&quot;</code> </li>\n<li>管理环境变量： 安装python-dotenv,<code>pip install python-dotenv</code>,在项目根目录下创建两个文件：.env（存储敏感信息的环境变量）和.flaskenv（存储与flask相关公开环境变量）,每行一个，以#为注释的键值对</li>\n<li>使用pycharm运行,需要配置一系列变量…..</li>\n</ul>\n<h2 id=\"1-3-2-更多启动选项\"><a href=\"#1-3-2-更多启动选项\" class=\"headerlink\" title=\"1.3.2 更多启动选项\"></a>1.3.2 更多启动选项</h2><ul>\n<li>设置主机地址：<code>flask run --host=0.0.0.0</code></li>\n<li>设置端口： <code>flask run --port=8000</code></li>\n<li>设置开发环境：可在.flaskenv文件中写入<code>FALSK_ENV=development</code>，在开发环境下，调试模式自动开启，通过FALSK_DEBUG控制是(=1)否(=0)开启.</li>\n<li>调试模式下，会激活调试器和重载器，调试器允许在错误页面输入PIN码调试，重载器可以检测文件变动，重启服务器。</li>\n<li>内置stat重载器性能一般，可以使用watchdog，<code>pipenv install watchdog --dev</code>,添加–dev的目的是声明为开发依赖。</li>\n</ul>\n<h1 id=\"1-4-shell\"><a href=\"#1-4-shell\" class=\"headerlink\" title=\"1.4 shell\"></a>1.4 shell</h1><ul>\n<li>python shell与flask shell</li>\n</ul>\n<h1 id=\"1-5-Flask扩展\"><a href=\"#1-5-Flask扩展\" class=\"headerlink\" title=\"1.5 Flask扩展\"></a>1.5 Flask扩展</h1><ul>\n<li>即使用Flask提供的API接口编写的Python库</li>\n</ul>\n<h1 id=\"1-6-项目配置\"><a href=\"#1-6-项目配置\" class=\"headerlink\" title=\"1.6 项目配置\"></a>1.6 项目配置</h1><ul>\n<li>配置变量都是通过Flask对象的app.config属性作为统一的接口来设置和获取</li>\n<li>单个设置：<code>app.cofig[&#39;ADMIN_NAME&#39;]=&#39;xiaoming&#39;</code>,也可以保存在文件中</li>\n<li>多个设置：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.config.update&#123;</span><br><span class=\"line\">\tTESTING=<span class=\"literal\">True</span>,</span><br><span class=\"line\">\tSECRET_KEY=<span class=\"string\">&#x27;XXXXXXXXXXX&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取：<code>value=app.config[&#39;ADMIN_NAME&#39;]</code></li>\n</ul>\n<h1 id=\"1-7-URL与端点\"><a href=\"#1-7-URL与端点\" class=\"headerlink\" title=\"1.7 URL与端点\"></a>1.7 URL与端点</h1><ul>\n<li>使用Flask提供的url_for()函数获取URL，第一个参数是端点名（默认是视图函数名）,其后还可以加动态参数，形如：name=’Jack’,得到的URL是相对的URL（内部的URL）</li>\n</ul>\n<h1 id=\"1-8-Flask命令\"><a href=\"#1-8-Flask命令\" class=\"headerlink\" title=\"1.8 Flask命令\"></a>1.8 Flask命令</h1><ul>\n<li>flask run/flask shell/flask –help等等</li>\n<li>注册flask命令：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.cli.command()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">\tclick.env(<span class=\"string\">&#x27;Hello , Human!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>然后在控制台输入：<code>flask hello</code> </p>\n<h1 id=\"1-9-模板和静态文件\"><a href=\"#1-9-模板和静态文件\" class=\"headerlink\" title=\"1.9 模板和静态文件\"></a>1.9 模板和静态文件</h1><ul>\n<li>项目结构示例：templates中存放html文件，static中存放css和js文件</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello/</span><br><span class=\"line\"><span class=\"bullet\">   -</span> templates/</span><br><span class=\"line\"><span class=\"bullet\">   -</span> static/</span><br><span class=\"line\"><span class=\"bullet\">   -</span> app.py</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"1-10-Flask与MVC框架\"><a href=\"#1-10-Flask与MVC框架\" class=\"headerlink\" title=\"1.10 Flask与MVC框架\"></a>1.10 Flask与MVC框架</h1><ul>\n<li>MVC框架最初是设计桌面程序的，在MVC框架中，程序被分成了三个组件：数据处理（Model），用户界面（View），交互逻辑（Controller）</li>\n<li>严格来说Flask不是MVC架构的框架</li>\n</ul>\n","categories":[{"name":"学习笔记","path":"api/categories/学习笔记.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"Flask","path":"api/tags/Flask.json"}]}