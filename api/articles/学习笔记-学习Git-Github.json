{"title":"Github | 学习Git&Github","slug":"学习笔记-学习Git-Github","date":"2019-07-10T12:34:51.000Z","updated":"2019-07-10T12:34:51.000Z","comments":true,"path":"api/articles/学习笔记-学习Git-Github.json","excerpt":"关于Git与Github的基础知识的笔记","covers":null,"content":"<p>关于Git与Github的基础知识的笔记</p>\n<span id=\"more\"></span>\n<h1 id=\"GitHub与Git区别\"><a href=\"#GitHub与Git区别\" class=\"headerlink\" title=\"GitHub与Git区别\"></a>GitHub与Git区别</h1><ul>\n<li>Git属于分散型版本管理系统，开发者使用Git将源代码存入名叫“Git仓库”的资料库中并加以使用。</li>\n<li>GitHub事在网络上提供Git仓库的一项服务，使用GitHub可以实现多人协作</li>\n</ul>\n<h1 id=\"Git初始设置\"><a href=\"#Git初始设置\" class=\"headerlink\" title=\"Git初始设置\"></a>Git初始设置</h1><h2 id=\"git-config命令的–global参数\"><a href=\"#git-config命令的–global参数\" class=\"headerlink\" title=\"git config命令的–global参数\"></a>git config命令的–global参数</h2><ul>\n<li>设置Git提交时的姓名与邮箱<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">&quot;justlovesmile&quot;</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">&quot;865717150@qq.com&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>让命令的输出具有更高的可读性<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global color.ui auto</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h2><ul>\n<li><p>把这个目录编程Git可以管理的仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure></li>\n<li><p>将文件添加到仓库缓冲区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add hello_world.php</span><br></pre></td></tr></table></figure></li>\n<li><p>添加说明并正式提交 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">&quot;wrote a file&quot;</span></span><br><span class=\"line\">[master (root-commit) a4207ca] wrote a file</span><br><span class=\"line\"> 1 file changed, 3 insertions(+)</span><br><span class=\"line\"> create mode 100644 hello_world.php</span><br></pre></td></tr></table></figure></li>\n<li><p>查看提交日志</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）$ git <span class=\"built_in\">log</span>（+文件名）</span><br><span class=\"line\"></span><br><span class=\"line\">commit a4207cab55e08e29847031903c3d885f522483d3 (HEAD -&gt; master)</span><br><span class=\"line\">Author: justlovesmile &lt;865717150@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Jun 13 11:04:29 2019 +0800</span><br><span class=\"line\">    wrote a file</span><br><span class=\"line\"></span><br><span class=\"line\">（2）$ git <span class=\"built_in\">log</span> --pretty=oneline</span><br><span class=\"line\"></span><br><span class=\"line\">db0644b6e8c15385d34c80b44fab5a2124289526 (HEAD -&gt; master) add one line</span><br><span class=\"line\">5022ed9f401a7a95b2c325d1f57ef7c9c291e860 wrote a read.txt</span><br><span class=\"line\">a4207cab55e08e29847031903c3d885f522483d3 wrote a file</span><br><span class=\"line\"></span><br><span class=\"line\">（3）$ git <span class=\"built_in\">log</span> -p查看文件改动</span><br></pre></td></tr></table></figure></li>\n<li><p>查看仓库状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure></li>\n<li><p>查看修改的不同之处</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff read.txt </span><br></pre></td></tr></table></figure></li>\n<li><p>回退版本到上一个版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n<p>（回退后就看不见之前那个了，但是如果还没关命令窗口可以向上查找commit id然后再👇）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard 1094a（id不一定要写全）</span><br></pre></td></tr></table></figure></li>\n<li><p>使用cat查看文件内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat read.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>Git提供了查看你的每一次命令的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure></li>\n<li><p>丢弃工作区修改（当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- read.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>撤销暂存区的修改（当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了工作区的修改，再执行👆）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD read.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>删除文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm read.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>删除版本库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm read.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>误删恢复<br>（用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”，但是会失去最近一次提交后的修改内容）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure>\n<h1 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h1></li>\n<li><p>创建SSH Key</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>查看id_rsa.pub文件，并复制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li>\n<li><p>然后再在github中添加ssh key</p>\n</li>\n<li><p>输入命令测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></li>\n<li><p>在github中创建一个git仓库</p>\n</li>\n<li><p>关联远程库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:Justlovesmile/Hello-World.git</span><br></pre></td></tr></table></figure></li>\n<li><p>将本地库的所有内容推送到远程库上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure></li>\n<li><p>从现在起，只要本地作了提交，就可以通过命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure></li>\n<li><p>克隆远程库到本地库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:Justlovesmile/practice.git</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h1><h2 id=\"创建于合并\"><a href=\"#创建于合并\" class=\"headerlink\" title=\"创建于合并\"></a>创建于合并</h2><ul>\n<li><p>创建dev分支，并切换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b dev</span><br><span class=\"line\">（即</span><br><span class=\"line\">$ git branch dev</span><br><span class=\"line\">$ git checkout dev</span><br><span class=\"line\">）</span><br></pre></td></tr></table></figure></li>\n<li><p>查看分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br></pre></td></tr></table></figure></li>\n<li><p>在切换到分支后，可以在分支上继续修改文件，再提交</p>\n</li>\n<li><p>然后切回master</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br></pre></td></tr></table></figure>\n<p>此时，master上看不见分支</p>\n</li>\n<li><p>将分支的工作结果与master合并</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge dev</span><br></pre></td></tr></table></figure></li>\n<li><p>合并完成后删掉分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"出现冲突的情况\"><a href=\"#出现冲突的情况\" class=\"headerlink\" title=\"出现冲突的情况\"></a>出现冲突的情况</h2></li>\n<li><p>如果创建了分支，并进行了修改与提交</p>\n</li>\n<li><p>而master也进行了提交，那么两者就不能直接进行合并，需要检查冲突手动修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status（会告述你哪里冲突了）</span><br></pre></td></tr></table></figure></li>\n<li><p>查看合并情况图</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"分支管理-1\"><a href=\"#分支管理-1\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><ul>\n<li><p>一般master仅用来发布新版本，其他工作，修改在分支上进行</p>\n</li>\n<li><p>合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge --no-ff -m <span class=\"string\">&quot;merge with no-ff&quot;</span> dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"bug分支\"><a href=\"#bug分支\" class=\"headerlink\" title=\"bug分支\"></a>bug分支</h2></li>\n<li><p>当工作只进行了一半，但是又要修改另外的bug时，可以将工作现场先储藏起来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash</span><br></pre></td></tr></table></figure></li>\n<li><p>然后再创建一个分支，例如叫issue，在这上面修改bug</p>\n</li>\n<li><p>再提交，然后切换回master合并，最后删除这个分支</p>\n</li>\n<li><p>切回之前工作的分支，恢复工作现场</p>\n</li>\n</ul>\n<h2 id=\"强制删除分支\"><a href=\"#强制删除分支\" class=\"headerlink\" title=\"强制删除分支\"></a>强制删除分支</h2><ul>\n<li><p>如果分支中的修改已经提交，但是发现不能加到master中，并且，该修改属于机密，所以你需要强制删除该分支（因为系统会提示你该修改未合并，使用D）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -D feature</span><br></pre></td></tr></table></figure>\n<h2 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h2></li>\n<li><p>查看远程库的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br></pre></td></tr></table></figure></li>\n<li><p>查看远程库的详细信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin  git@github.com:Justlovesmile/Hello-World.git (fetch)</span><br><span class=\"line\">origin  git@github.com:Justlovesmile/Hello-World.git (push)</span><br></pre></td></tr></table></figure></li>\n<li><p>推送master主分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure></li>\n<li><p>推送其他分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin dev</span><br></pre></td></tr></table></figure></li>\n<li><p>抓取分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:Justlovesmile/Hello-World.git</span><br></pre></td></tr></table></figure></li>\n<li><p>多人协作的工作模式通常是这样：</p>\n<ul>\n<li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li>\n<li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li>\n<li>如果合并有冲突，则解决冲突，并在本地提交；</li>\n<li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li>\n</ul>\n</li>\n<li><p>如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p>\n</li>\n</ul>\n<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><h2 id=\"创建标签\"><a href=\"#创建标签\" class=\"headerlink\" title=\"创建标签\"></a>创建标签</h2><ul>\n<li>切换到需要打标签的分支上<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  master</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch <span class=\"string\">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>创建标签<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag v1.0</span><br></pre></td></tr></table></figure></li>\n<li>给对应的版本打上标签<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag v0.9 f52c633</span><br></pre></td></tr></table></figure></li>\n<li>标签它是按字母排序的，查看标签<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show v0.9commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)</span><br><span class=\"line\">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Fri May 18 21:56:54 2018 +0800</span><br><span class=\"line\">    add merge</span><br><span class=\"line\">diff --git a/readme.txt b/readme.txt</span><br></pre></td></tr></table></figure></li>\n<li>创建带有说明的标签，用-a指定标签名，-m指定说明文字：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a v0.1 -m <span class=\"string\">&quot;version 0.1 released&quot;</span> 1094adb</span><br></pre></td></tr></table></figure>\n<h2 id=\"操作标签\"><a href=\"#操作标签\" class=\"headerlink\" title=\"操作标签\"></a>操作标签</h2></li>\n<li>删除标签<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -d v0.1</span><br></pre></td></tr></table></figure></li>\n<li>推送某个标签到远程<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin v1.0</span><br></pre></td></tr></table></figure></li>\n<li>一次性推送全部尚未推送到远程的本地标签：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --tags</span><br></pre></td></tr></table></figure></li>\n<li>如果标签已经推送到远程，又想要删除标签，先从本地删除<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -d v0.9</span><br></pre></td></tr></table></figure>\n然后再从远程删除<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin :refs/tags/v0.9</span><br></pre></td></tr></table></figure>\n<h1 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h1></li>\n<li>对于感兴趣的项目，先点Fork克隆仓库，然后再从自己的账号下clone<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:michaelliao/clone.git</span><br></pre></td></tr></table></figure>\n<h1 id=\"码云gitee-com\"><a href=\"#码云gitee-com\" class=\"headerlink\" title=\"码云gitee.com\"></a>码云gitee.com</h1></li>\n<li>国内的Git托管服务</li>\n</ul>\n<h1 id=\"自定义git命令\"><a href=\"#自定义git命令\" class=\"headerlink\" title=\"自定义git命令\"></a>自定义git命令</h1><ul>\n<li>自定义st表示status<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.st status</span><br></pre></td></tr></table></figure></li>\n<li>修改在配置文件.gitconfig中</li>\n</ul>\n","more":"<h1 id=\"GitHub与Git区别\"><a href=\"#GitHub与Git区别\" class=\"headerlink\" title=\"GitHub与Git区别\"></a>GitHub与Git区别</h1><ul>\n<li>Git属于分散型版本管理系统，开发者使用Git将源代码存入名叫“Git仓库”的资料库中并加以使用。</li>\n<li>GitHub事在网络上提供Git仓库的一项服务，使用GitHub可以实现多人协作</li>\n</ul>\n<h1 id=\"Git初始设置\"><a href=\"#Git初始设置\" class=\"headerlink\" title=\"Git初始设置\"></a>Git初始设置</h1><h2 id=\"git-config命令的–global参数\"><a href=\"#git-config命令的–global参数\" class=\"headerlink\" title=\"git config命令的–global参数\"></a>git config命令的–global参数</h2><ul>\n<li>设置Git提交时的姓名与邮箱<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">&quot;justlovesmile&quot;</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">&quot;865717150@qq.com&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>让命令的输出具有更高的可读性<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global color.ui auto</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h2><ul>\n<li><p>把这个目录编程Git可以管理的仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure></li>\n<li><p>将文件添加到仓库缓冲区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add hello_world.php</span><br></pre></td></tr></table></figure></li>\n<li><p>添加说明并正式提交 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">&quot;wrote a file&quot;</span></span><br><span class=\"line\">[master (root-commit) a4207ca] wrote a file</span><br><span class=\"line\"> 1 file changed, 3 insertions(+)</span><br><span class=\"line\"> create mode 100644 hello_world.php</span><br></pre></td></tr></table></figure></li>\n<li><p>查看提交日志</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）$ git <span class=\"built_in\">log</span>（+文件名）</span><br><span class=\"line\"></span><br><span class=\"line\">commit a4207cab55e08e29847031903c3d885f522483d3 (HEAD -&gt; master)</span><br><span class=\"line\">Author: justlovesmile &lt;865717150@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Jun 13 11:04:29 2019 +0800</span><br><span class=\"line\">    wrote a file</span><br><span class=\"line\"></span><br><span class=\"line\">（2）$ git <span class=\"built_in\">log</span> --pretty=oneline</span><br><span class=\"line\"></span><br><span class=\"line\">db0644b6e8c15385d34c80b44fab5a2124289526 (HEAD -&gt; master) add one line</span><br><span class=\"line\">5022ed9f401a7a95b2c325d1f57ef7c9c291e860 wrote a read.txt</span><br><span class=\"line\">a4207cab55e08e29847031903c3d885f522483d3 wrote a file</span><br><span class=\"line\"></span><br><span class=\"line\">（3）$ git <span class=\"built_in\">log</span> -p查看文件改动</span><br></pre></td></tr></table></figure></li>\n<li><p>查看仓库状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure></li>\n<li><p>查看修改的不同之处</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff read.txt </span><br></pre></td></tr></table></figure></li>\n<li><p>回退版本到上一个版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n<p>（回退后就看不见之前那个了，但是如果还没关命令窗口可以向上查找commit id然后再👇）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard 1094a（id不一定要写全）</span><br></pre></td></tr></table></figure></li>\n<li><p>使用cat查看文件内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat read.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>Git提供了查看你的每一次命令的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure></li>\n<li><p>丢弃工作区修改（当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- read.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>撤销暂存区的修改（当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了工作区的修改，再执行👆）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD read.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>删除文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm read.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>删除版本库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm read.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>误删恢复<br>（用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”，但是会失去最近一次提交后的修改内容）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure>\n<h1 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h1></li>\n<li><p>创建SSH Key</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>查看id_rsa.pub文件，并复制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li>\n<li><p>然后再在github中添加ssh key</p>\n</li>\n<li><p>输入命令测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></li>\n<li><p>在github中创建一个git仓库</p>\n</li>\n<li><p>关联远程库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:Justlovesmile/Hello-World.git</span><br></pre></td></tr></table></figure></li>\n<li><p>将本地库的所有内容推送到远程库上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure></li>\n<li><p>从现在起，只要本地作了提交，就可以通过命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure></li>\n<li><p>克隆远程库到本地库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:Justlovesmile/practice.git</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h1><h2 id=\"创建于合并\"><a href=\"#创建于合并\" class=\"headerlink\" title=\"创建于合并\"></a>创建于合并</h2><ul>\n<li><p>创建dev分支，并切换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b dev</span><br><span class=\"line\">（即</span><br><span class=\"line\">$ git branch dev</span><br><span class=\"line\">$ git checkout dev</span><br><span class=\"line\">）</span><br></pre></td></tr></table></figure></li>\n<li><p>查看分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br></pre></td></tr></table></figure></li>\n<li><p>在切换到分支后，可以在分支上继续修改文件，再提交</p>\n</li>\n<li><p>然后切回master</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br></pre></td></tr></table></figure>\n<p>此时，master上看不见分支</p>\n</li>\n<li><p>将分支的工作结果与master合并</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge dev</span><br></pre></td></tr></table></figure></li>\n<li><p>合并完成后删掉分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"出现冲突的情况\"><a href=\"#出现冲突的情况\" class=\"headerlink\" title=\"出现冲突的情况\"></a>出现冲突的情况</h2></li>\n<li><p>如果创建了分支，并进行了修改与提交</p>\n</li>\n<li><p>而master也进行了提交，那么两者就不能直接进行合并，需要检查冲突手动修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status（会告述你哪里冲突了）</span><br></pre></td></tr></table></figure></li>\n<li><p>查看合并情况图</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"分支管理-1\"><a href=\"#分支管理-1\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><ul>\n<li><p>一般master仅用来发布新版本，其他工作，修改在分支上进行</p>\n</li>\n<li><p>合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge --no-ff -m <span class=\"string\">&quot;merge with no-ff&quot;</span> dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"bug分支\"><a href=\"#bug分支\" class=\"headerlink\" title=\"bug分支\"></a>bug分支</h2></li>\n<li><p>当工作只进行了一半，但是又要修改另外的bug时，可以将工作现场先储藏起来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash</span><br></pre></td></tr></table></figure></li>\n<li><p>然后再创建一个分支，例如叫issue，在这上面修改bug</p>\n</li>\n<li><p>再提交，然后切换回master合并，最后删除这个分支</p>\n</li>\n<li><p>切回之前工作的分支，恢复工作现场</p>\n</li>\n</ul>\n<h2 id=\"强制删除分支\"><a href=\"#强制删除分支\" class=\"headerlink\" title=\"强制删除分支\"></a>强制删除分支</h2><ul>\n<li><p>如果分支中的修改已经提交，但是发现不能加到master中，并且，该修改属于机密，所以你需要强制删除该分支（因为系统会提示你该修改未合并，使用D）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -D feature</span><br></pre></td></tr></table></figure>\n<h2 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h2></li>\n<li><p>查看远程库的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br></pre></td></tr></table></figure></li>\n<li><p>查看远程库的详细信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin  git@github.com:Justlovesmile/Hello-World.git (fetch)</span><br><span class=\"line\">origin  git@github.com:Justlovesmile/Hello-World.git (push)</span><br></pre></td></tr></table></figure></li>\n<li><p>推送master主分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure></li>\n<li><p>推送其他分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin dev</span><br></pre></td></tr></table></figure></li>\n<li><p>抓取分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:Justlovesmile/Hello-World.git</span><br></pre></td></tr></table></figure></li>\n<li><p>多人协作的工作模式通常是这样：</p>\n<ul>\n<li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li>\n<li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li>\n<li>如果合并有冲突，则解决冲突，并在本地提交；</li>\n<li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li>\n</ul>\n</li>\n<li><p>如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p>\n</li>\n</ul>\n<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><h2 id=\"创建标签\"><a href=\"#创建标签\" class=\"headerlink\" title=\"创建标签\"></a>创建标签</h2><ul>\n<li>切换到需要打标签的分支上<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  master</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch <span class=\"string\">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>创建标签<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag v1.0</span><br></pre></td></tr></table></figure></li>\n<li>给对应的版本打上标签<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag v0.9 f52c633</span><br></pre></td></tr></table></figure></li>\n<li>标签它是按字母排序的，查看标签<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show v0.9commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)</span><br><span class=\"line\">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Fri May 18 21:56:54 2018 +0800</span><br><span class=\"line\">    add merge</span><br><span class=\"line\">diff --git a/readme.txt b/readme.txt</span><br></pre></td></tr></table></figure></li>\n<li>创建带有说明的标签，用-a指定标签名，-m指定说明文字：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a v0.1 -m <span class=\"string\">&quot;version 0.1 released&quot;</span> 1094adb</span><br></pre></td></tr></table></figure>\n<h2 id=\"操作标签\"><a href=\"#操作标签\" class=\"headerlink\" title=\"操作标签\"></a>操作标签</h2></li>\n<li>删除标签<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -d v0.1</span><br></pre></td></tr></table></figure></li>\n<li>推送某个标签到远程<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin v1.0</span><br></pre></td></tr></table></figure></li>\n<li>一次性推送全部尚未推送到远程的本地标签：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --tags</span><br></pre></td></tr></table></figure></li>\n<li>如果标签已经推送到远程，又想要删除标签，先从本地删除<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -d v0.9</span><br></pre></td></tr></table></figure>\n然后再从远程删除<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin :refs/tags/v0.9</span><br></pre></td></tr></table></figure>\n<h1 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h1></li>\n<li>对于感兴趣的项目，先点Fork克隆仓库，然后再从自己的账号下clone<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:michaelliao/clone.git</span><br></pre></td></tr></table></figure>\n<h1 id=\"码云gitee-com\"><a href=\"#码云gitee-com\" class=\"headerlink\" title=\"码云gitee.com\"></a>码云gitee.com</h1></li>\n<li>国内的Git托管服务</li>\n</ul>\n<h1 id=\"自定义git命令\"><a href=\"#自定义git命令\" class=\"headerlink\" title=\"自定义git命令\"></a>自定义git命令</h1><ul>\n<li>自定义st表示status<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.st status</span><br></pre></td></tr></table></figure></li>\n<li>修改在配置文件.gitconfig中</li>\n</ul>","categories":[{"name":"学习笔记","path":"api/categories/学习笔记.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"},{"name":"Github","path":"api/tags/Github.json"}]}