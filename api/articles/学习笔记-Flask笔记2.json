{"title":"学习笔记 | Flask学习从入门到放弃（2）","slug":"学习笔记-Flask笔记2","date":"2019-09-03T05:49:51.000Z","updated":"2019-09-03T05:49:51.000Z","comments":true,"path":"api/articles/学习笔记-Flask笔记2.json","excerpt":null,"covers":null,"content":"<p>Flask Web学习笔记之Flask与HTTP</p>\n<h1 id=\"2-1-请求响应循环\"><a href=\"#2-1-请求响应循环\" class=\"headerlink\" title=\"2.1 请求响应循环\"></a>2.1 请求响应循环</h1><ul>\n<li>每一个Web应用都包含这种处理模式：客户端发出请求，服务器端处理请求并返回响应</li>\n<li>HTTP是客户端和服务器端沟通的桥梁，当用户点击URL时，浏览器会生成http请求，经互联网发送到对应的web服务器，Web服务器端接收请求，通过WSGI将HTTP格式数据转换成能用的数据，并生成响应又依次返回给客户端</li>\n</ul>\n<h1 id=\"2-2-HTTP请求\"><a href=\"#2-2-HTTP请求\" class=\"headerlink\" title=\"2.2 HTTP请求\"></a>2.2 HTTP请求</h1><h2 id=\"2-2-1-报文\"><a href=\"#2-2-1-报文\" class=\"headerlink\" title=\"2.2.1 报文\"></a>2.2.1 报文</h2><ul>\n<li>常见HTTP方法：GET，POST，PUT，DELETE，HEAD，OPTIONS</li>\n</ul>\n<h2 id=\"2-2-2-Request对象\"><a href=\"#2-2-2-Request对象\" class=\"headerlink\" title=\"2.2.2 Request对象\"></a>2.2.2 Request对象</h2><ul>\n<li>当Flask接收到请求后，请求对象会提供多个属性来获取URL的各个部分，除了URL，请求报文中的其他信息都可以通过request对象提供的属性和方法获取</li>\n<li>常用属性和方法如：<code>args</code>,<code>cookies</code>,<code>data</code>,<code>form</code>,<code>files</code>,<code>json</code>,<code>method</code>,<code>user_agent</code>,<code>get_json()</code>等等</li>\n</ul>\n<h2 id=\"2-2-3-在Flask中处理请求\"><a href=\"#2-2-3-在Flask中处理请求\" class=\"headerlink\" title=\"2.2.3 在Flask中处理请求\"></a>2.2.3 在Flask中处理请求</h2><h3 id=\"1-路由匹配\"><a href=\"#1-路由匹配\" class=\"headerlink\" title=\"1. 路由匹配\"></a>1. 路由匹配</h3><ul>\n<li>程序实例中存储了一个路由表(app.url_map)，当请求发来后，Flask会根据请求报文中的URL来尝试与该表中所有的URL规则匹配，调用匹配成功的视图函数。</li>\n<li>可使用<code>flask routes</code>查看路由</li>\n</ul>\n<h3 id=\"2-设置监听的HTTP方法\"><a href=\"#2-设置监听的HTTP方法\" class=\"headerlink\" title=\"2. 设置监听的HTTP方法\"></a>2. 设置监听的HTTP方法</h3><ul>\n<li>当查看了路由表后可以发现，每一个路由还包含了一个监听的HTTP方法。</li>\n<li>我们可以在app.route()装饰器中使用methods参数传入一个包含监听的HTTP方法的可迭代对象。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hello&#x27;</span>,methods=[<span class=\"string\">&#x27;GET&#x27;</span>,<span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;h1&gt;Hello,Flask!&lt;/h1&gt;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当请求的方法不符合要求时，请求将无法被正常处理（出现405错误响应），因此我们可以为同一个URL根据请求方式定义多个视图函数</li>\n</ul>\n<h3 id=\"3-URL处理\"><a href=\"#3-URL处理\" class=\"headerlink\" title=\"3. URL处理\"></a>3. URL处理</h3><ul>\n<li>URL中的变量部分默认类型是字符串，但Flask提供了一些转换器可以在URL规则中使用</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>转换器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string</td>\n<td>不包含斜线的字符串（默认值）</td>\n</tr>\n<tr>\n<td>int</td>\n<td>整型</td>\n</tr>\n<tr>\n<td>float</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>path</td>\n<td>包含斜线的字符串，static路由的URL规则中的filename变量就是使用了这个转换器</td>\n</tr>\n<tr>\n<td>any</td>\n<td>匹配一系列给定值中的一个元素</td>\n</tr>\n<tr>\n<td>uuid</td>\n<td>UUID字符串</td>\n</tr>\n</tbody></table>\n<ul>\n<li>规则：<code>&lt;转换器：变量名&gt;</code>,例如：<code>&lt;int:year&gt;</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hello/&lt;int:year&gt;&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;p&gt;hello,I am %d years old!&lt;/p&gt;&#x27;</span>%(year-<span class=\"number\">2019</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在这个例子中，如果不使用int转换器，默认的string转换器会将其转换成string类型，为了计算数值，需要使用int转换器将变量转换成整型</li>\n<li>在用法上比较独特的是any转换器，<code>&lt;any(value1,value2...):变量名&gt;</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/colors/&lt;any(blue,white,red):color&gt;&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">three_colors</span>(<span class=\"params\">color</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;p&gt;You choose %s&lt;/p&gt;&#x27;</span>%color  </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-4-请求钩子\"><a href=\"#2-2-4-请求钩子\" class=\"headerlink\" title=\"2.2.4 请求钩子\"></a>2.2.4 请求钩子</h2><ul>\n<li>Flask提供一些请求钩子(HOOK)，来对请求进行预处理和后处理，它们可以用来注册在请求处理的不同阶段执行的回调函数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>钩子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>before_first_request</td>\n<td>注册一个函数，在处理第一个请求前运行</td>\n</tr>\n<tr>\n<td>before_request</td>\n<td>注册一个函数，在处理每个请求前运行</td>\n</tr>\n<tr>\n<td>after_request</td>\n<td>注册一个函数，如果没有未处理的异常抛出，会在每个请求结束后运行</td>\n</tr>\n<tr>\n<td>teardown_request</td>\n<td>注册一个函数，即使有未处理的异常抛出，会在每个请求结束后运行。如果发送异常，会传入异常对象作为参数到注册的函数中</td>\n</tr>\n<tr>\n<td>after_this_request</td>\n<td>在注册函数内注册一个函数，会在这个请求结束后运行</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.before_request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_something</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span> <span class=\"comment\">#这里的代码会在每个请求处理前执行</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-3-HTTP响应\"><a href=\"#2-3-HTTP响应\" class=\"headerlink\" title=\"2.3 HTTP响应\"></a>2.3 HTTP响应</h1><h2 id=\"2-3-1-响应报文\"><a href=\"#2-3-1-响应报文\" class=\"headerlink\" title=\"2.3.1 响应报文\"></a>2.3.1 响应报文</h2><ul>\n<li>响应报文主要由<strong>协议版本</strong>,<strong>状态码</strong>(status code),<strong>原因短语</strong>(reason phrase),<strong>响应首部</strong>和<strong>响应主体</strong>组成。</li>\n<li>响应报文的首部包含一些关于响应和服务器的信息，这些内容由Flask生成，而我们在视图函数中返回的内容即为响应报文中的主题内容</li>\n<li>HTTP状态码用来表示请求处理的结果</li>\n</ul>\n<table>\n<!-- rowspan是要跨的行数，colspan是要跨的列数 -->\n    <tr>\n        <th>类型</th>\n        <th>状态码</th>\n        <th>原因短语</th>\n        <th>说明</th>\n    </tr>\n    <tr>\n        <td rowspan=\"3\">成功</td>\n        <td>200</td>\n        <td>OK</td>\n        <td>请求被正常处理</td>\n    </tr>\n    <tr>\n        <td>201</td>\n        <td>Created</td>\n        <td>请求被处理,并创建了一个新资源</td>\n    </tr>\n    <tr>\n        <td>204</td>\n        <td>No Content</td>\n        <td>请求处理成功，但无内容返回</td>\n    </tr>\n    <tr>\n        <td rowspan=\"3\">重定向</td>\n        <td>301</td>\n        <td>Moved Permanently</td>\n        <td>永久重定向</td>\n    </tr>\n    <tr>\n        <td>302</td>\n        <td>Found</td>\n        <td>临时性重定向</td>\n    </tr>\n    <tr>\n        <td>304</td>\n        <td>Not Modified</td>\n        <td>请求的资源未被修改，重定向到缓存的资源</td>\n    </tr>\n    <tr>\n        <td rowspan=\"4\">客户端错误</td>\n        <td>400</td>\n        <td>Bad Request</td>\n        <td>请求无效，即请求报文中存在错误</td>\n    </tr>\n    <tr>\n        <td>401</td>\n        <td>Unauthorized</td>\n        <td>表示请求的资源需要获取授权信息，在浏览器中会弹出认证弹窗</td>\n    </tr>\n    <tr>\n        <td>403</td>\n        <td>Forbidden</td>\n        <td>请求的资源被服务器拒绝访问</td>\n    </tr>\n    <tr>\n        <td>404</td>\n        <td>Not Found</td>\n        <td>服务器上无法找到请求的资源或者URL无效</td>\n    </tr>\n    <tr>\n        <td rowspan=\"1\">服务器端错误</td>\n        <td>500</td>\n        <td>Internet Server Error</td>\n        <td>服务器内部发送错误</td>\n    </tr>\n\n</table>\n\n<h2 id=\"2-3-1-在Flask中生成响应\"><a href=\"#2-3-1-在Flask中生成响应\" class=\"headerlink\" title=\"2.3.1 在Flask中生成响应\"></a>2.3.1 在Flask中生成响应</h2><ul>\n<li>视图函数可以返回：响应主体，状态码，首部字段</li>\n</ul>\n<h3 id=\"1-重定向\"><a href=\"#1-重定向\" class=\"headerlink\" title=\"1. 重定向\"></a>1. 重定向</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,redirect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hello&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(<span class=\"string\">&#x27;http://justlovesmile.top&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>redirect函数默认的状态码是302即临时重定向，可以通过code关键字传入或作为第二参数传入修改</p>\n</li>\n<li><p>如果要在程序内重定向到其他视图，只需在redirect函数中使用url_for()函数生成目标URL</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,redirect,url_for</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hi&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hi</span>():</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;hello&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hello&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-错误响应\"><a href=\"#2-错误响应\" class=\"headerlink\" title=\"2. 错误响应\"></a>2. 错误响应</h3><ul>\n<li> 使用Flask提供的abort()函数，手动返回错误响应</li>\n<li>abort()函数前不需要执行使用return语句，一旦abort函数被调用，其之后的代码不被执行</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,abort</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/404&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">not_found</span>():</span></span><br><span class=\"line\">    abort(<span class=\"number\">404</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-2-响应格式\"><a href=\"#2-3-2-响应格式\" class=\"headerlink\" title=\"2.3.2 响应格式\"></a>2.3.2 响应格式</h2><ul>\n<li>默认情况下Flask使用html格式响应，在特定情况下，也会使用其他格式，不同的响应数据格式需要设置不同的MIME类型，MIME类型在首部的Content-Type定义，以默认的html类型为例<br><code>Content-Type: text/html;charset=utf-8</code></li>\n<li>如果想使用其他的MIME类型，可以通过Flask提供的make_response()方法,生成对应响应对象，传入响应的主体作为参数，然后使用响应对象的mimetype属性设置MIME类型</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> make_response</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/foo&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    response=make_response(<span class=\"string\">&#x27;Hello World&#x27;</span>)</span><br><span class=\"line\">    response.mimetype=<span class=\"string\">&#x27;text/plain&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>常用MIME类型：</p>\n<ul>\n<li>纯文本：<code>text/plain</code></li>\n<li>HTML：<code>text/html</code> </li>\n<li>XML：<code>application/xml</code></li>\n<li>json: <code>application/json</code></li>\n</ul>\n</li>\n<li><p>对于json数据，python的json模块具有<code>dumps()</code>和<code>load()</code>等方法,并且Flask提供了包装好的更方便的<code>jsonify()</code>函数</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> falsk <span class=\"keyword\">import</span> Flask,make_response,json</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/foo&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    data=&#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;justlovesmile&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;gender&#x27;</span>:<span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response=make_response(json.dumps(data))</span><br><span class=\"line\">    response.mimetype=<span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,jsonify</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/foo&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(&#123;name=<span class=\"string\">&#x27;justlovesmile&#x27;</span>,gender=<span class=\"string\">&#x27;male&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>jsonify()函数默认返回码为200，可以附加状态码自定义响应类型</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/foo&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(&#123;name=<span class=\"string\">&#x27;&#x27;</span>,gender=<span class=\"string\">&#x27;&#x27;</span>&#125;),<span class=\"number\">500</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-3-来一块Cookie\"><a href=\"#2-3-3-来一块Cookie\" class=\"headerlink\" title=\"2.3.3 来一块Cookie\"></a>2.3.3 来一块Cookie</h2>","more":"<p>Flask Web学习笔记之Flask与HTTP</p>\n<h1 id=\"2-1-请求响应循环\"><a href=\"#2-1-请求响应循环\" class=\"headerlink\" title=\"2.1 请求响应循环\"></a>2.1 请求响应循环</h1><ul>\n<li>每一个Web应用都包含这种处理模式：客户端发出请求，服务器端处理请求并返回响应</li>\n<li>HTTP是客户端和服务器端沟通的桥梁，当用户点击URL时，浏览器会生成http请求，经互联网发送到对应的web服务器，Web服务器端接收请求，通过WSGI将HTTP格式数据转换成能用的数据，并生成响应又依次返回给客户端</li>\n</ul>\n<h1 id=\"2-2-HTTP请求\"><a href=\"#2-2-HTTP请求\" class=\"headerlink\" title=\"2.2 HTTP请求\"></a>2.2 HTTP请求</h1><h2 id=\"2-2-1-报文\"><a href=\"#2-2-1-报文\" class=\"headerlink\" title=\"2.2.1 报文\"></a>2.2.1 报文</h2><ul>\n<li>常见HTTP方法：GET，POST，PUT，DELETE，HEAD，OPTIONS</li>\n</ul>\n<h2 id=\"2-2-2-Request对象\"><a href=\"#2-2-2-Request对象\" class=\"headerlink\" title=\"2.2.2 Request对象\"></a>2.2.2 Request对象</h2><ul>\n<li>当Flask接收到请求后，请求对象会提供多个属性来获取URL的各个部分，除了URL，请求报文中的其他信息都可以通过request对象提供的属性和方法获取</li>\n<li>常用属性和方法如：<code>args</code>,<code>cookies</code>,<code>data</code>,<code>form</code>,<code>files</code>,<code>json</code>,<code>method</code>,<code>user_agent</code>,<code>get_json()</code>等等</li>\n</ul>\n<h2 id=\"2-2-3-在Flask中处理请求\"><a href=\"#2-2-3-在Flask中处理请求\" class=\"headerlink\" title=\"2.2.3 在Flask中处理请求\"></a>2.2.3 在Flask中处理请求</h2><h3 id=\"1-路由匹配\"><a href=\"#1-路由匹配\" class=\"headerlink\" title=\"1. 路由匹配\"></a>1. 路由匹配</h3><ul>\n<li>程序实例中存储了一个路由表(app.url_map)，当请求发来后，Flask会根据请求报文中的URL来尝试与该表中所有的URL规则匹配，调用匹配成功的视图函数。</li>\n<li>可使用<code>flask routes</code>查看路由</li>\n</ul>\n<h3 id=\"2-设置监听的HTTP方法\"><a href=\"#2-设置监听的HTTP方法\" class=\"headerlink\" title=\"2. 设置监听的HTTP方法\"></a>2. 设置监听的HTTP方法</h3><ul>\n<li>当查看了路由表后可以发现，每一个路由还包含了一个监听的HTTP方法。</li>\n<li>我们可以在app.route()装饰器中使用methods参数传入一个包含监听的HTTP方法的可迭代对象。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hello&#x27;</span>,methods=[<span class=\"string\">&#x27;GET&#x27;</span>,<span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;h1&gt;Hello,Flask!&lt;/h1&gt;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当请求的方法不符合要求时，请求将无法被正常处理（出现405错误响应），因此我们可以为同一个URL根据请求方式定义多个视图函数</li>\n</ul>\n<h3 id=\"3-URL处理\"><a href=\"#3-URL处理\" class=\"headerlink\" title=\"3. URL处理\"></a>3. URL处理</h3><ul>\n<li>URL中的变量部分默认类型是字符串，但Flask提供了一些转换器可以在URL规则中使用</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>转换器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string</td>\n<td>不包含斜线的字符串（默认值）</td>\n</tr>\n<tr>\n<td>int</td>\n<td>整型</td>\n</tr>\n<tr>\n<td>float</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>path</td>\n<td>包含斜线的字符串，static路由的URL规则中的filename变量就是使用了这个转换器</td>\n</tr>\n<tr>\n<td>any</td>\n<td>匹配一系列给定值中的一个元素</td>\n</tr>\n<tr>\n<td>uuid</td>\n<td>UUID字符串</td>\n</tr>\n</tbody></table>\n<ul>\n<li>规则：<code>&lt;转换器：变量名&gt;</code>,例如：<code>&lt;int:year&gt;</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hello/&lt;int:year&gt;&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;p&gt;hello,I am %d years old!&lt;/p&gt;&#x27;</span>%(year-<span class=\"number\">2019</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在这个例子中，如果不使用int转换器，默认的string转换器会将其转换成string类型，为了计算数值，需要使用int转换器将变量转换成整型</li>\n<li>在用法上比较独特的是any转换器，<code>&lt;any(value1,value2...):变量名&gt;</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/colors/&lt;any(blue,white,red):color&gt;&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">three_colors</span>(<span class=\"params\">color</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&lt;p&gt;You choose %s&lt;/p&gt;&#x27;</span>%color  </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-4-请求钩子\"><a href=\"#2-2-4-请求钩子\" class=\"headerlink\" title=\"2.2.4 请求钩子\"></a>2.2.4 请求钩子</h2><ul>\n<li>Flask提供一些请求钩子(HOOK)，来对请求进行预处理和后处理，它们可以用来注册在请求处理的不同阶段执行的回调函数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>钩子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>before_first_request</td>\n<td>注册一个函数，在处理第一个请求前运行</td>\n</tr>\n<tr>\n<td>before_request</td>\n<td>注册一个函数，在处理每个请求前运行</td>\n</tr>\n<tr>\n<td>after_request</td>\n<td>注册一个函数，如果没有未处理的异常抛出，会在每个请求结束后运行</td>\n</tr>\n<tr>\n<td>teardown_request</td>\n<td>注册一个函数，即使有未处理的异常抛出，会在每个请求结束后运行。如果发送异常，会传入异常对象作为参数到注册的函数中</td>\n</tr>\n<tr>\n<td>after_this_request</td>\n<td>在注册函数内注册一个函数，会在这个请求结束后运行</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.before_request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_something</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span> <span class=\"comment\">#这里的代码会在每个请求处理前执行</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-3-HTTP响应\"><a href=\"#2-3-HTTP响应\" class=\"headerlink\" title=\"2.3 HTTP响应\"></a>2.3 HTTP响应</h1><h2 id=\"2-3-1-响应报文\"><a href=\"#2-3-1-响应报文\" class=\"headerlink\" title=\"2.3.1 响应报文\"></a>2.3.1 响应报文</h2><ul>\n<li>响应报文主要由<strong>协议版本</strong>,<strong>状态码</strong>(status code),<strong>原因短语</strong>(reason phrase),<strong>响应首部</strong>和<strong>响应主体</strong>组成。</li>\n<li>响应报文的首部包含一些关于响应和服务器的信息，这些内容由Flask生成，而我们在视图函数中返回的内容即为响应报文中的主题内容</li>\n<li>HTTP状态码用来表示请求处理的结果</li>\n</ul>\n<table>\n<!-- rowspan是要跨的行数，colspan是要跨的列数 -->\n    <tr>\n        <th>类型</th>\n        <th>状态码</th>\n        <th>原因短语</th>\n        <th>说明</th>\n    </tr>\n    <tr>\n        <td rowspan=\"3\">成功</td>\n        <td>200</td>\n        <td>OK</td>\n        <td>请求被正常处理</td>\n    </tr>\n    <tr>\n        <td>201</td>\n        <td>Created</td>\n        <td>请求被处理,并创建了一个新资源</td>\n    </tr>\n    <tr>\n        <td>204</td>\n        <td>No Content</td>\n        <td>请求处理成功，但无内容返回</td>\n    </tr>\n    <tr>\n        <td rowspan=\"3\">重定向</td>\n        <td>301</td>\n        <td>Moved Permanently</td>\n        <td>永久重定向</td>\n    </tr>\n    <tr>\n        <td>302</td>\n        <td>Found</td>\n        <td>临时性重定向</td>\n    </tr>\n    <tr>\n        <td>304</td>\n        <td>Not Modified</td>\n        <td>请求的资源未被修改，重定向到缓存的资源</td>\n    </tr>\n    <tr>\n        <td rowspan=\"4\">客户端错误</td>\n        <td>400</td>\n        <td>Bad Request</td>\n        <td>请求无效，即请求报文中存在错误</td>\n    </tr>\n    <tr>\n        <td>401</td>\n        <td>Unauthorized</td>\n        <td>表示请求的资源需要获取授权信息，在浏览器中会弹出认证弹窗</td>\n    </tr>\n    <tr>\n        <td>403</td>\n        <td>Forbidden</td>\n        <td>请求的资源被服务器拒绝访问</td>\n    </tr>\n    <tr>\n        <td>404</td>\n        <td>Not Found</td>\n        <td>服务器上无法找到请求的资源或者URL无效</td>\n    </tr>\n    <tr>\n        <td rowspan=\"1\">服务器端错误</td>\n        <td>500</td>\n        <td>Internet Server Error</td>\n        <td>服务器内部发送错误</td>\n    </tr>\n\n</table>\n\n<h2 id=\"2-3-1-在Flask中生成响应\"><a href=\"#2-3-1-在Flask中生成响应\" class=\"headerlink\" title=\"2.3.1 在Flask中生成响应\"></a>2.3.1 在Flask中生成响应</h2><ul>\n<li>视图函数可以返回：响应主体，状态码，首部字段</li>\n</ul>\n<h3 id=\"1-重定向\"><a href=\"#1-重定向\" class=\"headerlink\" title=\"1. 重定向\"></a>1. 重定向</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,redirect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hello&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(<span class=\"string\">&#x27;http://justlovesmile.top&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>redirect函数默认的状态码是302即临时重定向，可以通过code关键字传入或作为第二参数传入修改</p>\n</li>\n<li><p>如果要在程序内重定向到其他视图，只需在redirect函数中使用url_for()函数生成目标URL</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,redirect,url_for</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hi&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hi</span>():</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;hello&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/hello&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-错误响应\"><a href=\"#2-错误响应\" class=\"headerlink\" title=\"2. 错误响应\"></a>2. 错误响应</h3><ul>\n<li> 使用Flask提供的abort()函数，手动返回错误响应</li>\n<li>abort()函数前不需要执行使用return语句，一旦abort函数被调用，其之后的代码不被执行</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,abort</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/404&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">not_found</span>():</span></span><br><span class=\"line\">    abort(<span class=\"number\">404</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-2-响应格式\"><a href=\"#2-3-2-响应格式\" class=\"headerlink\" title=\"2.3.2 响应格式\"></a>2.3.2 响应格式</h2><ul>\n<li>默认情况下Flask使用html格式响应，在特定情况下，也会使用其他格式，不同的响应数据格式需要设置不同的MIME类型，MIME类型在首部的Content-Type定义，以默认的html类型为例<br><code>Content-Type: text/html;charset=utf-8</code></li>\n<li>如果想使用其他的MIME类型，可以通过Flask提供的make_response()方法,生成对应响应对象，传入响应的主体作为参数，然后使用响应对象的mimetype属性设置MIME类型</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> make_response</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/foo&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    response=make_response(<span class=\"string\">&#x27;Hello World&#x27;</span>)</span><br><span class=\"line\">    response.mimetype=<span class=\"string\">&#x27;text/plain&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>常用MIME类型：</p>\n<ul>\n<li>纯文本：<code>text/plain</code></li>\n<li>HTML：<code>text/html</code> </li>\n<li>XML：<code>application/xml</code></li>\n<li>json: <code>application/json</code></li>\n</ul>\n</li>\n<li><p>对于json数据，python的json模块具有<code>dumps()</code>和<code>load()</code>等方法,并且Flask提供了包装好的更方便的<code>jsonify()</code>函数</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> falsk <span class=\"keyword\">import</span> Flask,make_response,json</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/foo&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    data=&#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;justlovesmile&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;gender&#x27;</span>:<span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response=make_response(json.dumps(data))</span><br><span class=\"line\">    response.mimetype=<span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,jsonify</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/foo&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(&#123;name=<span class=\"string\">&#x27;justlovesmile&#x27;</span>,gender=<span class=\"string\">&#x27;male&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>jsonify()函数默认返回码为200，可以附加状态码自定义响应类型</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/foo&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(&#123;name=<span class=\"string\">&#x27;&#x27;</span>,gender=<span class=\"string\">&#x27;&#x27;</span>&#125;),<span class=\"number\">500</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-3-来一块Cookie\"><a href=\"#2-3-3-来一块Cookie\" class=\"headerlink\" title=\"2.3.3 来一块Cookie\"></a>2.3.3 来一块Cookie</h2>","categories":[{"name":"学习笔记","path":"api/categories/学习笔记.json"}],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"Flask","path":"api/tags/Flask.json"}]}