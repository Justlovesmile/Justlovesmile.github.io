{"title":"学习笔记 | 《算法导论》之从入门到放弃（2）","slug":"学习笔记-算法导论学习笔记2","date":"2019-09-23T13:06:55.000Z","updated":"2019-09-23T13:06:55.000Z","comments":true,"path":"api/articles/学习笔记-算法导论学习笔记2.json","excerpt":"《算法导论》打卡2，主要内容：渐进记号，分治策略，最大子数组问题,矩阵乘法的strassen算法","covers":["https://s2.ax1x.com/2019/09/23/uFAyV0.png","https://s2.ax1x.com/2019/09/24/ukpsGd.png","https://s2.ax1x.com/2019/09/24/ukC7D0.png","https://s2.ax1x.com/2019/09/24/ukFJun.png","https://s2.ax1x.com/2019/09/29/u83cb6.png","https://s2.ax1x.com/2019/10/11/ub68Vx.png","https://s2.ax1x.com/2019/10/11/uqgrWT.png"],"content":"<p>《算法导论》打卡2，主要内容：渐进记号，分治策略，最大子数组问题,矩阵乘法的strassen算法</p>\n<span id=\"more\"></span>\n<h1 id=\"第三章-函数的增长\"><a href=\"#第三章-函数的增长\" class=\"headerlink\" title=\"第三章 函数的增长\"></a>第三章 函数的增长</h1><ul>\n<li>当输入规模足够大，使得只有运行时间的增长量级有关时，我们要研究算法的渐进效率。也就是说，我们关心当输入规模无限增加时，在极限中，算法的运行时间如何随着输入规模的变大而增加。<h2 id=\"3-1-渐进记号\"><a href=\"#3-1-渐进记号\" class=\"headerlink\" title=\"3.1 渐进记号\"></a>3.1 渐进记号</h2></li>\n<li>用来描述算法渐进运行时间的记号根据定义于为自然数集N={0，1，2，…}的函数来定义</li>\n</ul>\n<h3 id=\"3-1-1-Θ记号\"><a href=\"#3-1-1-Θ记号\" class=\"headerlink\" title=\"3.1.1 Θ记号\"></a>3.1.1 Θ记号</h3><ul>\n<li><code>Θ记号</code>：对一个给定的函数g(n)，用Θ(g(n))来表示以下函数的集合：<br><code>Θ(g(n))=&#123;f(n):存在正常量c1,c2和n0,使得对所有n≥n0,有0≤c1*g(n)≤f(n)≤c2*g(n)&#125;</code></li>\n<li><img src=\"https://s2.ax1x.com/2019/09/23/uFAyV0.png\" alt=\"uFAyV0.png\"></li>\n</ul>\n<h3 id=\"3-1-2-O记号\"><a href=\"#3-1-2-O记号\" class=\"headerlink\" title=\"3.1.2 O记号\"></a>3.1.2 O记号</h3><ul>\n<li><code>O记号</code>：当只有一个渐进上界时，使用O记号，对于一个给定的函数g(n)，用O(g(n))来表示以下函数的集合：<br><code>O(g(n))=&#123;f(n):存在正常量c和n0，使得对所有n≥n0，有0≤f(n)≤c*g(n)&#125;</code></li>\n</ul>\n<h3 id=\"3-1-3-Ω记号\"><a href=\"#3-1-3-Ω记号\" class=\"headerlink\" title=\"3.1.3 Ω记号\"></a>3.1.3 Ω记号</h3><ul>\n<li><p><code>Ω记号</code>：渐进下界。使用Ω记号，对于一个给定的函数g(n)，用Ω(g(n))来表示以下函数的集合：<br><code>Ω(g(n))=&#123;f(n):存在正常量c和n0，使得对所有n≥n0，有0≤c*g(n)≤f(n)&#125;</code></p>\n</li>\n<li><p>定理：<code>对任意两个函数f(n)和g(n),我们有f(n)=Θ(g(n))，当且仅当f(n)=O(g(n))且f(n)=Ω(g(n))</code></p>\n</li>\n</ul>\n<h3 id=\"3-1-4-o记号\"><a href=\"#3-1-4-o记号\" class=\"headerlink\" title=\"3.1.4 o记号\"></a>3.1.4 o记号</h3><ul>\n<li><code>o记号</code>：表示非渐进紧确的上界<br><code>o(g(n))=&#123;f(n):对于任意正常书c&gt;0,存在常量n0＞0，使得对所有n≥n0，有0≤f(n)＜c*g(n)&#125;</code></li>\n</ul>\n<h3 id=\"3-1-5-w记号\"><a href=\"#3-1-5-w记号\" class=\"headerlink\" title=\"3.1.5 w记号\"></a>3.1.5 w记号</h3><ul>\n<li><code>w记号</code>：表示非渐进紧确的下界<br><code>w(g(n))=&#123;f(n):对任意正常量c＞0，存在常量n0＞0，使得对所有n≥n0，有0≤c*g(n)＜f(n)&#125;</code></li>\n</ul>\n<h2 id=\"3-2-标准记号与常用函数\"><a href=\"#3-2-标准记号与常用函数\" class=\"headerlink\" title=\"3.2 标准记号与常用函数\"></a>3.2 标准记号与常用函数</h2><ul>\n<li>单调性</li>\n<li>向下取整与向上取整符号</li>\n<li>模运算</li>\n<li>多项式</li>\n<li>指数</li>\n<li>对数</li>\n<li>阶乘</li>\n<li>多重函数</li>\n<li>多重对数函数</li>\n<li>斐波那契数</li>\n</ul>\n<h1 id=\"第四章-分治策略\"><a href=\"#第四章-分治策略\" class=\"headerlink\" title=\"第四章 分治策略\"></a>第四章 分治策略</h1><ul>\n<li>分治策略的步骤：<code>分解</code>，<code>解决</code>，<code>合并</code></li>\n<li>递归情况：子问题足够大，需要递归求解</li>\n<li>基本情况：子问题足够小，递归已“触底”</li>\n<li>递归式：通过更小的输入上的函数值来描述一个函数</li>\n<li>求解递归式的方法：<ul>\n<li>代入法</li>\n<li>递归树法</li>\n<li>主方法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-1-最大子数组问题\"><a href=\"#4-1-最大子数组问题\" class=\"headerlink\" title=\"4.1 最大子数组问题\"></a>4.1 最大子数组问题</h2><ul>\n<li><img src=\"https://s2.ax1x.com/2019/09/24/ukpsGd.png\" alt=\"ukpsGd.png\"></li>\n<li>由于时间原因，最大化利益不一定是最低价格买入，最高价格卖出，因为存在最高价格先于最低价格出现的可能</li>\n<li>暴力破解方法：尝试每一对可能的买入卖出，只要卖出时间在买入时间之后即可。</li>\n<li>问题交换：</li>\n<li><img src=\"https://s2.ax1x.com/2019/09/24/ukC7D0.png\" alt=\"ukC7D0.png\"></li>\n<li>只有当数组中包含负数时，最大子数组问题才有意义，如果所有数组元素都是非负的，最大数组问题没有任何难度，因为整个数组的和肯定是最大的。</li>\n<li>使用分治策略的求解方法：</li>\n<li><img src=\"https://s2.ax1x.com/2019/09/24/ukFJun.png\" alt=\"ukFJun.png\"></li>\n<li>python</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#python3</span></span><br><span class=\"line\"><span class=\"comment\">#find max crossing subarray</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f_m_c_s</span>(<span class=\"params\">A,low,mid,high</span>):</span></span><br><span class=\"line\">    left_sum=<span class=\"built_in\">float</span>(<span class=\"string\">&#x27;-inf&#x27;</span>)</span><br><span class=\"line\">    right_sum=<span class=\"built_in\">float</span>(<span class=\"string\">&#x27;-inf&#x27;</span>)</span><br><span class=\"line\">    temp_sum=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(mid,low-<span class=\"number\">1</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">        temp_sum=temp_sum+A[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> temp_sum&gt;left_sum:</span><br><span class=\"line\">            left_sum=temp_sum</span><br><span class=\"line\">            max_left=i</span><br><span class=\"line\">    temp_sum=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(mid+<span class=\"number\">1</span>,high+<span class=\"number\">1</span>):</span><br><span class=\"line\">        temp_sum=temp_sum+A[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> temp_sum&gt;right_sum:</span><br><span class=\"line\">            right_sum=temp_sum</span><br><span class=\"line\">            max_right=i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_left,max_right,left_sum+right_sum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#find maxmum subarray</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f_m_s</span>(<span class=\"params\">A,low,high</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> high==low:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> low,high,A[low]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        mid=(low+high)//<span class=\"number\">2</span></span><br><span class=\"line\">        left_low,left_high,left_sum=f_m_s(A,low,mid)</span><br><span class=\"line\">        right_low,right_high,right_sum=f_m_s(A,mid+<span class=\"number\">1</span>,high)</span><br><span class=\"line\">        cross_low,cross_high,cross_sum=f_m_c_s(A,low,mid,high)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> left_sum&gt;=right_sum <span class=\"keyword\">and</span> left_sum&gt;=cross_sum:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> left_low,left_high,left_sum</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> right_sum&gt;=left_sum <span class=\"keyword\">and</span> right_sum&gt;=cross_sum:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> right_low,right_high,right_sum</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cross_low,cross_high,cross_sum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    A=[-<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,-<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,-<span class=\"number\">22</span>,<span class=\"number\">33</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f_m_s(A,<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(A)-<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其他解法如：c++解决n个整数的数列，不超过m的最大子数列和</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000000</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">1</span>;<span class=\"keyword\">int</span> r=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=r&amp;&amp;a[l]&lt;i-m)l++;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        sum[i]=sum[i<span class=\"number\">-1</span>]+x;</span><br><span class=\"line\">        ans=<span class=\"built_in\">max</span>(ans,sum[i]-sum[a[l]]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=r&amp;&amp;sum[a[r]]&gt;=sum[i])r--;</span><br><span class=\"line\">        a[++r]=i;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,ans);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-矩阵乘法的Strassen算法\"><a href=\"#4-2-矩阵乘法的Strassen算法\" class=\"headerlink\" title=\"4.2 矩阵乘法的Strassen算法\"></a>4.2 矩阵乘法的Strassen算法</h2><ul>\n<li>c++如何创建动态二维数组：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> **a=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>*[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        a[i]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">            cin&gt;&gt;a[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><img src=\"https://s2.ax1x.com/2019/09/29/u83cb6.png\" alt=\"u83cb6.png\"></li>\n<li>python矩阵乘法暴力破解算法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matrixMultiply</span>(<span class=\"params\">A,B</span>):</span></span><br><span class=\"line\">    <span class=\"comment\">#len(A[0])是A的列数，len(A)是A的行数，B同理</span></span><br><span class=\"line\">    C = []</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(A[<span class=\"number\">0</span>]) != <span class=\"built_in\">len</span>(B):</span><br><span class=\"line\">         <span class=\"keyword\">return</span> false</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(A)):</span><br><span class=\"line\">        row=[]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(B[<span class=\"number\">0</span>])):</span><br><span class=\"line\">            s = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(A[<span class=\"number\">0</span>])):</span><br><span class=\"line\">                s += A[i][k]*B[k][j]</span><br><span class=\"line\">            row.append(s)</span><br><span class=\"line\">        C.append(row)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    A = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]]</span><br><span class=\"line\">    B = [[<span class=\"number\">7</span>,<span class=\"number\">8</span>],[<span class=\"number\">9</span>,<span class=\"number\">10</span>],[<span class=\"number\">11</span>,<span class=\"number\">12</span>]]</span><br><span class=\"line\">    C = matrixMultiply(A,B)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(C)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> C[i]:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(j,end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ ==<span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方阵乘法的简单分治算法（前提：<strong>假定A,B都是n等于2的次幂的方阵</strong>）</li>\n<li><img src=\"https://s2.ax1x.com/2019/10/11/ub68Vx.png\" alt=\"ub68Vx.png\"></li>\n<li>python</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">division</span>(<span class=\"params\">a</span>):</span>    <span class=\"comment\">#矩阵分块函数</span></span><br><span class=\"line\">    n=<span class=\"built_in\">len</span>(a)//<span class=\"number\">2</span></span><br><span class=\"line\">    a11=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    a12=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    a21=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    a22=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            a11[i][j]=a[i][j]</span><br><span class=\"line\">            a12[i][j]=a[i][j+n]</span><br><span class=\"line\">            a21[i][j]=a[i+n][j]</span><br><span class=\"line\">            a22[i][j]=a[i+n][j+n]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a11,a12,a21,a22)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matrix_combination</span>(<span class=\"params\">a11,a12,a21,a22</span>):</span></span><br><span class=\"line\">    n2 = <span class=\"built_in\">len</span>(a11)</span><br><span class=\"line\">    n=n2*<span class=\"number\">2</span></span><br><span class=\"line\">    a = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">0</span>,n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">0</span>,n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &lt;= (n2-<span class=\"number\">1</span>) <span class=\"keyword\">and</span> j &lt;= (n2-<span class=\"number\">1</span>):</span><br><span class=\"line\">                a[i][j] = a11[i][j]</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i &lt;= (n2-<span class=\"number\">1</span>) <span class=\"keyword\">and</span> j &gt; (n2-<span class=\"number\">1</span>):</span><br><span class=\"line\">                a[i][j] = a12[i][j-n2]</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i &gt; (n2-<span class=\"number\">1</span>) <span class=\"keyword\">and</span> j &lt;= (n2-<span class=\"number\">1</span>):</span><br><span class=\"line\">                a[i][j] = a21[i-n2][j]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                a[i][j] = a22[i-n2][j-n2]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matrix_add</span>(<span class=\"params\">a,b</span>):</span>  <span class=\"comment\">#矩阵相加函数</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(a)</span><br><span class=\"line\">    c = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,n):</span><br><span class=\"line\">            c[i][j] = a[i][j]+b[i][j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matrix_devision_multiply</span>(<span class=\"params\">a,b</span>):</span>   <span class=\"comment\">#矩阵乘法的简单分治法主程序</span></span><br><span class=\"line\">    n=<span class=\"built_in\">len</span>(a)</span><br><span class=\"line\">    c = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"comment\">#c=[[0]*n for i in range(n)]</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">1</span>:</span><br><span class=\"line\">        c[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=a[<span class=\"number\">0</span>][<span class=\"number\">0</span>]*b[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        (a11,a12,a21,a22)=division(a)</span><br><span class=\"line\">        (b11,b12,b21,b22)=division(b)</span><br><span class=\"line\">        (c11,c12,c21,c22)=division(c)</span><br><span class=\"line\">        c11=matrix_add(matrix_devision_multiply(a11,b11),matrix_devision_multiply(a12,b21))</span><br><span class=\"line\">        c12=matrix_add(matrix_devision_multiply(a11,b12),matrix_devision_multiply(a12,b22))</span><br><span class=\"line\">        c21=matrix_add(matrix_devision_multiply(a21,b11),matrix_devision_multiply(a22,b21))</span><br><span class=\"line\">        c22=matrix_add(matrix_devision_multiply(a21,b12),matrix_devision_multiply(a22,b22))</span><br><span class=\"line\">        c=matrix_combination(c11,c12,c21,c22)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\"> </span><br><span class=\"line\">a=[[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]]</span><br><span class=\"line\">b=a</span><br><span class=\"line\"><span class=\"built_in\">print</span>(matrix_devision_multiply(a,b))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>矩阵乘法的Strassen算法<br><img src=\"https://s2.ax1x.com/2019/10/11/uqgrWT.png\" alt=\"uqgrWT.png\"><br><img src=\"https://s2.ax1x.com/2019/10/11/uq6N9S.png\" alt=\"uq6N9S.png\"><br><img src=\"https://s2.ax1x.com/2019/10/11/uq6yNV.png\" alt=\"uq6yNV.png\"><br><img src=\"https://s2.ax1x.com/2019/10/11/uq6oAx.png\" alt=\"uq6oAx.png\"><br><img src=\"https://s2.ax1x.com/2019/10/11/uq6OjH.png\" alt=\"uq6OjH.png\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matrix_strassen</span>(<span class=\"params\">a,b</span>):</span></span><br><span class=\"line\">    n=<span class=\"built_in\">len</span>(a)</span><br><span class=\"line\">    c = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">1</span>:</span><br><span class=\"line\">        c[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=a[<span class=\"number\">0</span>][<span class=\"number\">0</span>]*b[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        (a11,a12,a21,a22)=division(a)</span><br><span class=\"line\">        (b11,b12,b21,b22)=division(b)</span><br><span class=\"line\">        (c11,c12,c21,c22)=division(c)</span><br><span class=\"line\">        s1=matrix_add_sub(b12,b22,<span class=\"number\">0</span>)</span><br><span class=\"line\">        s2=matrix_add_sub(a11,a12,<span class=\"number\">1</span>)</span><br><span class=\"line\">        s3=matrix_add_sub(a21,a22,<span class=\"number\">1</span>)</span><br><span class=\"line\">        s4=matrix_add_sub(b21,b11,<span class=\"number\">0</span>)</span><br><span class=\"line\">        s5=matrix_add_sub(a11,a22,<span class=\"number\">1</span>)</span><br><span class=\"line\">        s6=matrix_add_sub(b11,b22,<span class=\"number\">1</span>)</span><br><span class=\"line\">        s7=matrix_add_sub(a12,a22,<span class=\"number\">0</span>)</span><br><span class=\"line\">        s8=matrix_add_sub(b21,b22,<span class=\"number\">1</span>)</span><br><span class=\"line\">        s9=matrix_add_sub(a11,a21,<span class=\"number\">0</span>)</span><br><span class=\"line\">        s10=matrix_add_sub(b11,b12,<span class=\"number\">1</span>)</span><br><span class=\"line\">        p1=matrix_strassen(a11,s1)</span><br><span class=\"line\">        p2=matrix_strassen(s2,b22)</span><br><span class=\"line\">        p3=matrix_strassen(s3,b11)</span><br><span class=\"line\">        p4=matrix_strassen(a22,s4)</span><br><span class=\"line\">        p5=matrix_strassen(s5,s6)</span><br><span class=\"line\">        p6=matrix_strassen(s7,s8)</span><br><span class=\"line\">        p7=matrix_strassen(s9,s10)</span><br><span class=\"line\">        c11=matrix_add_sub(matrix_add_sub(matrix_add_sub(p5,p4,<span class=\"number\">1</span>),p2,<span class=\"number\">0</span>),p6,<span class=\"number\">1</span>)</span><br><span class=\"line\">        c12=matrix_add_sub(p1,p2,<span class=\"number\">1</span>)</span><br><span class=\"line\">        c21=matrix_add_sub(p3,p4,<span class=\"number\">1</span>)</span><br><span class=\"line\">        c22=matrix_add_sub(matrix_add_sub(matrix_add_sub(p5,p1,<span class=\"number\">1</span>),p3,<span class=\"number\">0</span>),p7,<span class=\"number\">0</span>)</span><br><span class=\"line\">        c=matrix_combination(c11,c12,c21,c22)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#矩阵的strssen算法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">division</span>(<span class=\"params\">a</span>):</span>                              <span class=\"comment\">#对矩阵进行分解操作</span></span><br><span class=\"line\">    n=<span class=\"built_in\">len</span>(a)//<span class=\"number\">2</span></span><br><span class=\"line\">    a11=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    a12=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    a21=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    a22=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            a11[i][j]=a[i][j]</span><br><span class=\"line\">            a12[i][j]=a[i][j+n]</span><br><span class=\"line\">            a21[i][j]=a[i+n][j]</span><br><span class=\"line\">            a22[i][j]=a[i+n][j+n]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a11,a12,a21,a22)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matrix_add_sub</span>(<span class=\"params\">a,b,keys</span>):</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(a)</span><br><span class=\"line\">    c = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> keys==<span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">                c[i][j] = a[i][j]+b[i][j]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">                c[i][j]=a[i][j]-b[i][j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matrix_combination</span>(<span class=\"params\">a11,a12,a21,a22</span>):</span>    <span class=\"comment\">#对矩阵进行组合操作</span></span><br><span class=\"line\">    n2 = <span class=\"built_in\">len</span>(a11)</span><br><span class=\"line\">    n=n2*<span class=\"number\">2</span></span><br><span class=\"line\">    a = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">0</span>,n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">0</span>,n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &lt;= (n2-<span class=\"number\">1</span>) <span class=\"keyword\">and</span> j &lt;= (n2-<span class=\"number\">1</span>):</span><br><span class=\"line\">                a[i][j] = a11[i][j]</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i &lt;= (n2-<span class=\"number\">1</span>) <span class=\"keyword\">and</span> j &gt; (n2-<span class=\"number\">1</span>):</span><br><span class=\"line\">                a[i][j] = a12[i][j-n2]</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i &gt; (n2-<span class=\"number\">1</span>) <span class=\"keyword\">and</span> j &lt;= (n2-<span class=\"number\">1</span>):</span><br><span class=\"line\">                a[i][j] = a21[i-n2][j]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                a[i][j] = a22[i-n2][j-n2]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"> </span><br><span class=\"line\">a=[[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]]</span><br><span class=\"line\">b=a</span><br><span class=\"line\"><span class=\"built_in\">print</span>(matrix_strassen(a,b))</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"第三章-函数的增长\"><a href=\"#第三章-函数的增长\" class=\"headerlink\" title=\"第三章 函数的增长\"></a>第三章 函数的增长</h1><ul>\n<li>当输入规模足够大，使得只有运行时间的增长量级有关时，我们要研究算法的渐进效率。也就是说，我们关心当输入规模无限增加时，在极限中，算法的运行时间如何随着输入规模的变大而增加。<h2 id=\"3-1-渐进记号\"><a href=\"#3-1-渐进记号\" class=\"headerlink\" title=\"3.1 渐进记号\"></a>3.1 渐进记号</h2></li>\n<li>用来描述算法渐进运行时间的记号根据定义于为自然数集N={0，1，2，…}的函数来定义</li>\n</ul>\n<h3 id=\"3-1-1-Θ记号\"><a href=\"#3-1-1-Θ记号\" class=\"headerlink\" title=\"3.1.1 Θ记号\"></a>3.1.1 Θ记号</h3><ul>\n<li><code>Θ记号</code>：对一个给定的函数g(n)，用Θ(g(n))来表示以下函数的集合：<br><code>Θ(g(n))=&#123;f(n):存在正常量c1,c2和n0,使得对所有n≥n0,有0≤c1*g(n)≤f(n)≤c2*g(n)&#125;</code></li>\n<li><img src=\"https://s2.ax1x.com/2019/09/23/uFAyV0.png\" alt=\"uFAyV0.png\"></li>\n</ul>\n<h3 id=\"3-1-2-O记号\"><a href=\"#3-1-2-O记号\" class=\"headerlink\" title=\"3.1.2 O记号\"></a>3.1.2 O记号</h3><ul>\n<li><code>O记号</code>：当只有一个渐进上界时，使用O记号，对于一个给定的函数g(n)，用O(g(n))来表示以下函数的集合：<br><code>O(g(n))=&#123;f(n):存在正常量c和n0，使得对所有n≥n0，有0≤f(n)≤c*g(n)&#125;</code></li>\n</ul>\n<h3 id=\"3-1-3-Ω记号\"><a href=\"#3-1-3-Ω记号\" class=\"headerlink\" title=\"3.1.3 Ω记号\"></a>3.1.3 Ω记号</h3><ul>\n<li><p><code>Ω记号</code>：渐进下界。使用Ω记号，对于一个给定的函数g(n)，用Ω(g(n))来表示以下函数的集合：<br><code>Ω(g(n))=&#123;f(n):存在正常量c和n0，使得对所有n≥n0，有0≤c*g(n)≤f(n)&#125;</code></p>\n</li>\n<li><p>定理：<code>对任意两个函数f(n)和g(n),我们有f(n)=Θ(g(n))，当且仅当f(n)=O(g(n))且f(n)=Ω(g(n))</code></p>\n</li>\n</ul>\n<h3 id=\"3-1-4-o记号\"><a href=\"#3-1-4-o记号\" class=\"headerlink\" title=\"3.1.4 o记号\"></a>3.1.4 o记号</h3><ul>\n<li><code>o记号</code>：表示非渐进紧确的上界<br><code>o(g(n))=&#123;f(n):对于任意正常书c&gt;0,存在常量n0＞0，使得对所有n≥n0，有0≤f(n)＜c*g(n)&#125;</code></li>\n</ul>\n<h3 id=\"3-1-5-w记号\"><a href=\"#3-1-5-w记号\" class=\"headerlink\" title=\"3.1.5 w记号\"></a>3.1.5 w记号</h3><ul>\n<li><code>w记号</code>：表示非渐进紧确的下界<br><code>w(g(n))=&#123;f(n):对任意正常量c＞0，存在常量n0＞0，使得对所有n≥n0，有0≤c*g(n)＜f(n)&#125;</code></li>\n</ul>\n<h2 id=\"3-2-标准记号与常用函数\"><a href=\"#3-2-标准记号与常用函数\" class=\"headerlink\" title=\"3.2 标准记号与常用函数\"></a>3.2 标准记号与常用函数</h2><ul>\n<li>单调性</li>\n<li>向下取整与向上取整符号</li>\n<li>模运算</li>\n<li>多项式</li>\n<li>指数</li>\n<li>对数</li>\n<li>阶乘</li>\n<li>多重函数</li>\n<li>多重对数函数</li>\n<li>斐波那契数</li>\n</ul>\n<h1 id=\"第四章-分治策略\"><a href=\"#第四章-分治策略\" class=\"headerlink\" title=\"第四章 分治策略\"></a>第四章 分治策略</h1><ul>\n<li>分治策略的步骤：<code>分解</code>，<code>解决</code>，<code>合并</code></li>\n<li>递归情况：子问题足够大，需要递归求解</li>\n<li>基本情况：子问题足够小，递归已“触底”</li>\n<li>递归式：通过更小的输入上的函数值来描述一个函数</li>\n<li>求解递归式的方法：<ul>\n<li>代入法</li>\n<li>递归树法</li>\n<li>主方法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-1-最大子数组问题\"><a href=\"#4-1-最大子数组问题\" class=\"headerlink\" title=\"4.1 最大子数组问题\"></a>4.1 最大子数组问题</h2><ul>\n<li><img src=\"https://s2.ax1x.com/2019/09/24/ukpsGd.png\" alt=\"ukpsGd.png\"></li>\n<li>由于时间原因，最大化利益不一定是最低价格买入，最高价格卖出，因为存在最高价格先于最低价格出现的可能</li>\n<li>暴力破解方法：尝试每一对可能的买入卖出，只要卖出时间在买入时间之后即可。</li>\n<li>问题交换：</li>\n<li><img src=\"https://s2.ax1x.com/2019/09/24/ukC7D0.png\" alt=\"ukC7D0.png\"></li>\n<li>只有当数组中包含负数时，最大子数组问题才有意义，如果所有数组元素都是非负的，最大数组问题没有任何难度，因为整个数组的和肯定是最大的。</li>\n<li>使用分治策略的求解方法：</li>\n<li><img src=\"https://s2.ax1x.com/2019/09/24/ukFJun.png\" alt=\"ukFJun.png\"></li>\n<li>python</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#python3</span></span><br><span class=\"line\"><span class=\"comment\">#find max crossing subarray</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f_m_c_s</span>(<span class=\"params\">A,low,mid,high</span>):</span></span><br><span class=\"line\">    left_sum=<span class=\"built_in\">float</span>(<span class=\"string\">&#x27;-inf&#x27;</span>)</span><br><span class=\"line\">    right_sum=<span class=\"built_in\">float</span>(<span class=\"string\">&#x27;-inf&#x27;</span>)</span><br><span class=\"line\">    temp_sum=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(mid,low-<span class=\"number\">1</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">        temp_sum=temp_sum+A[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> temp_sum&gt;left_sum:</span><br><span class=\"line\">            left_sum=temp_sum</span><br><span class=\"line\">            max_left=i</span><br><span class=\"line\">    temp_sum=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(mid+<span class=\"number\">1</span>,high+<span class=\"number\">1</span>):</span><br><span class=\"line\">        temp_sum=temp_sum+A[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> temp_sum&gt;right_sum:</span><br><span class=\"line\">            right_sum=temp_sum</span><br><span class=\"line\">            max_right=i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_left,max_right,left_sum+right_sum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#find maxmum subarray</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f_m_s</span>(<span class=\"params\">A,low,high</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> high==low:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> low,high,A[low]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        mid=(low+high)//<span class=\"number\">2</span></span><br><span class=\"line\">        left_low,left_high,left_sum=f_m_s(A,low,mid)</span><br><span class=\"line\">        right_low,right_high,right_sum=f_m_s(A,mid+<span class=\"number\">1</span>,high)</span><br><span class=\"line\">        cross_low,cross_high,cross_sum=f_m_c_s(A,low,mid,high)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> left_sum&gt;=right_sum <span class=\"keyword\">and</span> left_sum&gt;=cross_sum:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> left_low,left_high,left_sum</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> right_sum&gt;=left_sum <span class=\"keyword\">and</span> right_sum&gt;=cross_sum:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> right_low,right_high,right_sum</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cross_low,cross_high,cross_sum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    A=[-<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,-<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,-<span class=\"number\">22</span>,<span class=\"number\">33</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f_m_s(A,<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(A)-<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其他解法如：c++解决n个整数的数列，不超过m的最大子数列和</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000000</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">1</span>;<span class=\"keyword\">int</span> r=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=r&amp;&amp;a[l]&lt;i-m)l++;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        sum[i]=sum[i<span class=\"number\">-1</span>]+x;</span><br><span class=\"line\">        ans=<span class=\"built_in\">max</span>(ans,sum[i]-sum[a[l]]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=r&amp;&amp;sum[a[r]]&gt;=sum[i])r--;</span><br><span class=\"line\">        a[++r]=i;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,ans);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-矩阵乘法的Strassen算法\"><a href=\"#4-2-矩阵乘法的Strassen算法\" class=\"headerlink\" title=\"4.2 矩阵乘法的Strassen算法\"></a>4.2 矩阵乘法的Strassen算法</h2><ul>\n<li>c++如何创建动态二维数组：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> **a=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>*[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        a[i]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">            cin&gt;&gt;a[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><img src=\"https://s2.ax1x.com/2019/09/29/u83cb6.png\" alt=\"u83cb6.png\"></li>\n<li>python矩阵乘法暴力破解算法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matrixMultiply</span>(<span class=\"params\">A,B</span>):</span></span><br><span class=\"line\">    <span class=\"comment\">#len(A[0])是A的列数，len(A)是A的行数，B同理</span></span><br><span class=\"line\">    C = []</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(A[<span class=\"number\">0</span>]) != <span class=\"built_in\">len</span>(B):</span><br><span class=\"line\">         <span class=\"keyword\">return</span> false</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(A)):</span><br><span class=\"line\">        row=[]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(B[<span class=\"number\">0</span>])):</span><br><span class=\"line\">            s = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(A[<span class=\"number\">0</span>])):</span><br><span class=\"line\">                s += A[i][k]*B[k][j]</span><br><span class=\"line\">            row.append(s)</span><br><span class=\"line\">        C.append(row)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    A = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]]</span><br><span class=\"line\">    B = [[<span class=\"number\">7</span>,<span class=\"number\">8</span>],[<span class=\"number\">9</span>,<span class=\"number\">10</span>],[<span class=\"number\">11</span>,<span class=\"number\">12</span>]]</span><br><span class=\"line\">    C = matrixMultiply(A,B)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(C)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> C[i]:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(j,end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ ==<span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方阵乘法的简单分治算法（前提：<strong>假定A,B都是n等于2的次幂的方阵</strong>）</li>\n<li><img src=\"https://s2.ax1x.com/2019/10/11/ub68Vx.png\" alt=\"ub68Vx.png\"></li>\n<li>python</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">division</span>(<span class=\"params\">a</span>):</span>    <span class=\"comment\">#矩阵分块函数</span></span><br><span class=\"line\">    n=<span class=\"built_in\">len</span>(a)//<span class=\"number\">2</span></span><br><span class=\"line\">    a11=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    a12=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    a21=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    a22=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            a11[i][j]=a[i][j]</span><br><span class=\"line\">            a12[i][j]=a[i][j+n]</span><br><span class=\"line\">            a21[i][j]=a[i+n][j]</span><br><span class=\"line\">            a22[i][j]=a[i+n][j+n]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a11,a12,a21,a22)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matrix_combination</span>(<span class=\"params\">a11,a12,a21,a22</span>):</span></span><br><span class=\"line\">    n2 = <span class=\"built_in\">len</span>(a11)</span><br><span class=\"line\">    n=n2*<span class=\"number\">2</span></span><br><span class=\"line\">    a = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">0</span>,n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">0</span>,n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &lt;= (n2-<span class=\"number\">1</span>) <span class=\"keyword\">and</span> j &lt;= (n2-<span class=\"number\">1</span>):</span><br><span class=\"line\">                a[i][j] = a11[i][j]</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i &lt;= (n2-<span class=\"number\">1</span>) <span class=\"keyword\">and</span> j &gt; (n2-<span class=\"number\">1</span>):</span><br><span class=\"line\">                a[i][j] = a12[i][j-n2]</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i &gt; (n2-<span class=\"number\">1</span>) <span class=\"keyword\">and</span> j &lt;= (n2-<span class=\"number\">1</span>):</span><br><span class=\"line\">                a[i][j] = a21[i-n2][j]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                a[i][j] = a22[i-n2][j-n2]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matrix_add</span>(<span class=\"params\">a,b</span>):</span>  <span class=\"comment\">#矩阵相加函数</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(a)</span><br><span class=\"line\">    c = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,n):</span><br><span class=\"line\">            c[i][j] = a[i][j]+b[i][j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matrix_devision_multiply</span>(<span class=\"params\">a,b</span>):</span>   <span class=\"comment\">#矩阵乘法的简单分治法主程序</span></span><br><span class=\"line\">    n=<span class=\"built_in\">len</span>(a)</span><br><span class=\"line\">    c = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"comment\">#c=[[0]*n for i in range(n)]</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">1</span>:</span><br><span class=\"line\">        c[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=a[<span class=\"number\">0</span>][<span class=\"number\">0</span>]*b[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        (a11,a12,a21,a22)=division(a)</span><br><span class=\"line\">        (b11,b12,b21,b22)=division(b)</span><br><span class=\"line\">        (c11,c12,c21,c22)=division(c)</span><br><span class=\"line\">        c11=matrix_add(matrix_devision_multiply(a11,b11),matrix_devision_multiply(a12,b21))</span><br><span class=\"line\">        c12=matrix_add(matrix_devision_multiply(a11,b12),matrix_devision_multiply(a12,b22))</span><br><span class=\"line\">        c21=matrix_add(matrix_devision_multiply(a21,b11),matrix_devision_multiply(a22,b21))</span><br><span class=\"line\">        c22=matrix_add(matrix_devision_multiply(a21,b12),matrix_devision_multiply(a22,b22))</span><br><span class=\"line\">        c=matrix_combination(c11,c12,c21,c22)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\"> </span><br><span class=\"line\">a=[[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]]</span><br><span class=\"line\">b=a</span><br><span class=\"line\"><span class=\"built_in\">print</span>(matrix_devision_multiply(a,b))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>矩阵乘法的Strassen算法<br><img src=\"https://s2.ax1x.com/2019/10/11/uqgrWT.png\" alt=\"uqgrWT.png\"><br><img src=\"https://s2.ax1x.com/2019/10/11/uq6N9S.png\" alt=\"uq6N9S.png\"><br><img src=\"https://s2.ax1x.com/2019/10/11/uq6yNV.png\" alt=\"uq6yNV.png\"><br><img src=\"https://s2.ax1x.com/2019/10/11/uq6oAx.png\" alt=\"uq6oAx.png\"><br><img src=\"https://s2.ax1x.com/2019/10/11/uq6OjH.png\" alt=\"uq6OjH.png\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matrix_strassen</span>(<span class=\"params\">a,b</span>):</span></span><br><span class=\"line\">    n=<span class=\"built_in\">len</span>(a)</span><br><span class=\"line\">    c = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">1</span>:</span><br><span class=\"line\">        c[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=a[<span class=\"number\">0</span>][<span class=\"number\">0</span>]*b[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        (a11,a12,a21,a22)=division(a)</span><br><span class=\"line\">        (b11,b12,b21,b22)=division(b)</span><br><span class=\"line\">        (c11,c12,c21,c22)=division(c)</span><br><span class=\"line\">        s1=matrix_add_sub(b12,b22,<span class=\"number\">0</span>)</span><br><span class=\"line\">        s2=matrix_add_sub(a11,a12,<span class=\"number\">1</span>)</span><br><span class=\"line\">        s3=matrix_add_sub(a21,a22,<span class=\"number\">1</span>)</span><br><span class=\"line\">        s4=matrix_add_sub(b21,b11,<span class=\"number\">0</span>)</span><br><span class=\"line\">        s5=matrix_add_sub(a11,a22,<span class=\"number\">1</span>)</span><br><span class=\"line\">        s6=matrix_add_sub(b11,b22,<span class=\"number\">1</span>)</span><br><span class=\"line\">        s7=matrix_add_sub(a12,a22,<span class=\"number\">0</span>)</span><br><span class=\"line\">        s8=matrix_add_sub(b21,b22,<span class=\"number\">1</span>)</span><br><span class=\"line\">        s9=matrix_add_sub(a11,a21,<span class=\"number\">0</span>)</span><br><span class=\"line\">        s10=matrix_add_sub(b11,b12,<span class=\"number\">1</span>)</span><br><span class=\"line\">        p1=matrix_strassen(a11,s1)</span><br><span class=\"line\">        p2=matrix_strassen(s2,b22)</span><br><span class=\"line\">        p3=matrix_strassen(s3,b11)</span><br><span class=\"line\">        p4=matrix_strassen(a22,s4)</span><br><span class=\"line\">        p5=matrix_strassen(s5,s6)</span><br><span class=\"line\">        p6=matrix_strassen(s7,s8)</span><br><span class=\"line\">        p7=matrix_strassen(s9,s10)</span><br><span class=\"line\">        c11=matrix_add_sub(matrix_add_sub(matrix_add_sub(p5,p4,<span class=\"number\">1</span>),p2,<span class=\"number\">0</span>),p6,<span class=\"number\">1</span>)</span><br><span class=\"line\">        c12=matrix_add_sub(p1,p2,<span class=\"number\">1</span>)</span><br><span class=\"line\">        c21=matrix_add_sub(p3,p4,<span class=\"number\">1</span>)</span><br><span class=\"line\">        c22=matrix_add_sub(matrix_add_sub(matrix_add_sub(p5,p1,<span class=\"number\">1</span>),p3,<span class=\"number\">0</span>),p7,<span class=\"number\">0</span>)</span><br><span class=\"line\">        c=matrix_combination(c11,c12,c21,c22)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#矩阵的strssen算法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">division</span>(<span class=\"params\">a</span>):</span>                              <span class=\"comment\">#对矩阵进行分解操作</span></span><br><span class=\"line\">    n=<span class=\"built_in\">len</span>(a)//<span class=\"number\">2</span></span><br><span class=\"line\">    a11=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    a12=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    a21=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    a22=[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            a11[i][j]=a[i][j]</span><br><span class=\"line\">            a12[i][j]=a[i][j+n]</span><br><span class=\"line\">            a21[i][j]=a[i+n][j]</span><br><span class=\"line\">            a22[i][j]=a[i+n][j+n]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a11,a12,a21,a22)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matrix_add_sub</span>(<span class=\"params\">a,b,keys</span>):</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(a)</span><br><span class=\"line\">    c = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> keys==<span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">                c[i][j] = a[i][j]+b[i][j]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">                c[i][j]=a[i][j]-b[i][j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matrix_combination</span>(<span class=\"params\">a11,a12,a21,a22</span>):</span>    <span class=\"comment\">#对矩阵进行组合操作</span></span><br><span class=\"line\">    n2 = <span class=\"built_in\">len</span>(a11)</span><br><span class=\"line\">    n=n2*<span class=\"number\">2</span></span><br><span class=\"line\">    a = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">0</span>,n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">0</span>,n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &lt;= (n2-<span class=\"number\">1</span>) <span class=\"keyword\">and</span> j &lt;= (n2-<span class=\"number\">1</span>):</span><br><span class=\"line\">                a[i][j] = a11[i][j]</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i &lt;= (n2-<span class=\"number\">1</span>) <span class=\"keyword\">and</span> j &gt; (n2-<span class=\"number\">1</span>):</span><br><span class=\"line\">                a[i][j] = a12[i][j-n2]</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i &gt; (n2-<span class=\"number\">1</span>) <span class=\"keyword\">and</span> j &lt;= (n2-<span class=\"number\">1</span>):</span><br><span class=\"line\">                a[i][j] = a21[i-n2][j]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                a[i][j] = a22[i-n2][j-n2]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"> </span><br><span class=\"line\">a=[[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]]</span><br><span class=\"line\">b=a</span><br><span class=\"line\"><span class=\"built_in\">print</span>(matrix_strassen(a,b))</span><br></pre></td></tr></table></figure>","categories":[{"name":"学习笔记","path":"api/categories/学习笔记.json"}],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"算法","path":"api/tags/算法.json"}]}