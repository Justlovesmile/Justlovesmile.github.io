{"title":"学习笔记 | 《算法导论》之从入门到放弃（1）","slug":"学习笔记-算法导论学习笔记1","date":"2019-09-19T11:54:53.000Z","updated":"2019-09-19T11:54:53.000Z","comments":true,"path":"api/articles/学习笔记-算法导论学习笔记1.json","excerpt":"《算法导论》打卡1，主要内容：插入排序，分治法，归并排序","covers":["https://s2.ax1x.com/2019/09/19/nO9np9.png","https://s2.ax1x.com/2019/09/23/uPypCV.png","https://s2.ax1x.com/2019/09/23/uPynC6.png","https://s2.ax1x.com/2019/09/23/uP6qTs.png","https://s2.ax1x.com/2019/09/23/uPx85n.png","https://s2.ax1x.com/2019/09/23/uPxXqg.png","https://s2.ax1x.com/2019/09/23/uiBjot.png"],"content":"<p>《算法导论》打卡1，主要内容：插入排序，分治法，归并排序</p>\n<span id=\"more\"></span>\n<h1 id=\"第一部分-基础知识\"><a href=\"#第一部分-基础知识\" class=\"headerlink\" title=\"第一部分 基础知识\"></a>第一部分 基础知识</h1><h2 id=\"第一章-算法在计算中的作用\"><a href=\"#第一章-算法在计算中的作用\" class=\"headerlink\" title=\"第一章 算法在计算中的作用\"></a>第一章 算法在计算中的作用</h2><h3 id=\"1-1-算法\"><a href=\"#1-1-算法\" class=\"headerlink\" title=\"1.1 算法\"></a>1.1 算法</h3><ul>\n<li>算法就是任何良定义的计算过程，该过程取某个值或值的集合作为<strong>输入</strong>并产生某个值或者值的集合作为<strong>输出</strong>。</li>\n<li>规范书写：</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">问题：XXXX</span><br><span class=\"line\">输入：XXXXXXXX</span><br><span class=\"line\">输出：XXXXXXXX</span><br><span class=\"line\">算法步骤：</span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"selector-class\">.XXXXXXXXXXX</span></span><br><span class=\"line\"><span class=\"number\">2</span>.XXXXXXXXXXX</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意问题与问题实例的区别。</li>\n</ul>\n<h3 id=\"1-2-作为一种技术的算法\"><a href=\"#1-2-作为一种技术的算法\" class=\"headerlink\" title=\"1.2 作为一种技术的算法\"></a>1.2 作为一种技术的算法</h3><ul>\n<li>考虑效率：时间与空间资源的消耗</li>\n</ul>\n<h2 id=\"第二章-算法基础\"><a href=\"#第二章-算法基础\" class=\"headerlink\" title=\"第二章 算法基础\"></a>第二章 算法基础</h2><h3 id=\"2-1-插入排序\"><a href=\"#2-1-插入排序\" class=\"headerlink\" title=\"2.1 插入排序\"></a>2.1 插入排序</h3><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n个数的一个序列&lt;<span class=\"built_in\">a1</span>,<span class=\"built_in\">a2</span>,...,an&gt;</span><br><span class=\"line\">输出：输入序列的一个排列&lt;<span class=\"built_in\">a1</span>’,<span class=\"built_in\">a2</span>’,...,an’&gt;，满足<span class=\"built_in\">a1</span>’≤<span class=\"built_in\">a2</span>’≤...≤an’</span><br></pre></td></tr></table></figure>\n<ul>\n<li>算法：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertionsort</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> length)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//插入排序</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> key; <span class=\"comment\">//暂存当前位置的值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;length;j++)&#123;</span><br><span class=\"line\">        key = A[j]; <span class=\"comment\">//暂存当前位置的值</span></span><br><span class=\"line\">        i= j<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&gt;=<span class=\"number\">0</span> &amp;&amp; A[i]&gt;key)&#123; <span class=\"comment\">//如果前面的值比key大，则交换</span></span><br><span class=\"line\">            A[i+<span class=\"number\">1</span>]=A[i];</span><br><span class=\"line\">            i=i<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        A[i+<span class=\"number\">1</span>]=key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> A[<span class=\"number\">9</span>]=&#123;<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>&#125;; <span class=\"comment\">//举了个栗子</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length=<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(A)/<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(A[<span class=\"number\">0</span>]); <span class=\"comment\">//求数组的长度的一种方法</span></span><br><span class=\"line\">    <span class=\"built_in\">insertionsort</span>(A,length);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//输出排序后的序列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;A[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><img src=\"https://s2.ax1x.com/2019/09/19/nO9np9.png\" alt=\"nO9np9.png\"></li>\n<li>伪代码👇</li>\n<li><img src=\"https://s2.ax1x.com/2019/09/23/uPypCV.png\" alt=\"uPypCV.png\"></li>\n<li><img src=\"https://s2.ax1x.com/2019/09/23/uPynC6.png\" alt=\"uPynC6.png\"></li>\n</ul>\n<h3 id=\"2-2-分析算法\"><a href=\"#2-2-分析算法\" class=\"headerlink\" title=\"2.2 分析算法\"></a>2.2 分析算法</h3><ul>\n<li>时间复杂度：最好的情况下：O(n),最坏的情况下：O(n²),平均情况下：O(n²)</li>\n<li><img src=\"https://s2.ax1x.com/2019/09/23/uP6qTs.png\" alt=\"uP6qTs.png\"><h3 id=\"2-3-设计算法\"><a href=\"#2-3-设计算法\" class=\"headerlink\" title=\"2.3 设计算法\"></a>2.3 设计算法</h3><h4 id=\"2-3-1-分治法\"><a href=\"#2-3-1-分治法\" class=\"headerlink\" title=\"2.3.1 分治法\"></a>2.3.1 分治法</h4></li>\n<li>分治法：将原问题分解为几个规模较小但类似于原问题的子问题，递归求解这些子问题，然后再合并这些子问题的解来建立原问题的解</li>\n<li>归并排序：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> mid,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> aux[right-left+<span class=\"number\">1</span>];<span class=\"comment\">//开辟一个新的数组，将原数组映射进去</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m=left;m&lt;=right;m++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        aux[m-left]=arr[m];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=left,j=mid+<span class=\"number\">1</span>;<span class=\"comment\">//i和j分别指向两个子数组开头部分</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=left;k&lt;=right;k++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;mid)<span class=\"comment\">//右边还有剩余</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            arr[k]=aux[j-left];</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&gt;right)<span class=\"comment\">//左边还有剩余</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            arr[k]=aux[i-left];</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(aux[i-left]&lt;aux[j-left])<span class=\"comment\">//左边小于右边</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            arr[k]=aux[i-left];</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span><span class=\"comment\">//右边小于左边</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            arr[k]=aux[j-left];</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//递归的使用归并排序，对arr[l....right]排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &gt;=right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(left+right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(arr,left,mid);</span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(arr,mid+<span class=\"number\">1</span>,right);</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(arr,left,mid,right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">my_merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(arr,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//举个栗子</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">6</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">my_merge_sort</span>(a,<span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;a[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><img src=\"https://s2.ax1x.com/2019/09/23/uPx85n.png\" alt=\"uPx85n.png\"></li>\n<li><img src=\"https://s2.ax1x.com/2019/09/23/uPxXqg.png\" alt=\"uPxXqg.png\"></li>\n</ul>\n<h4 id=\"2-3-2-分析分治算法\"><a href=\"#2-3-2-分析分治算法\" class=\"headerlink\" title=\"2.3.2 分析分治算法\"></a>2.3.2 分析分治算法</h4><ul>\n<li><img src=\"https://s2.ax1x.com/2019/09/23/uiBjot.png\" alt=\"uiBjot.png\"></li>\n<li>时间复杂度：平均情况：O(nlogn),最好情况：O(nlogn),最坏情况：O(nlogn)</li>\n</ul>\n","more":"<h1 id=\"第一部分-基础知识\"><a href=\"#第一部分-基础知识\" class=\"headerlink\" title=\"第一部分 基础知识\"></a>第一部分 基础知识</h1><h2 id=\"第一章-算法在计算中的作用\"><a href=\"#第一章-算法在计算中的作用\" class=\"headerlink\" title=\"第一章 算法在计算中的作用\"></a>第一章 算法在计算中的作用</h2><h3 id=\"1-1-算法\"><a href=\"#1-1-算法\" class=\"headerlink\" title=\"1.1 算法\"></a>1.1 算法</h3><ul>\n<li>算法就是任何良定义的计算过程，该过程取某个值或值的集合作为<strong>输入</strong>并产生某个值或者值的集合作为<strong>输出</strong>。</li>\n<li>规范书写：</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">问题：XXXX</span><br><span class=\"line\">输入：XXXXXXXX</span><br><span class=\"line\">输出：XXXXXXXX</span><br><span class=\"line\">算法步骤：</span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"selector-class\">.XXXXXXXXXXX</span></span><br><span class=\"line\"><span class=\"number\">2</span>.XXXXXXXXXXX</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意问题与问题实例的区别。</li>\n</ul>\n<h3 id=\"1-2-作为一种技术的算法\"><a href=\"#1-2-作为一种技术的算法\" class=\"headerlink\" title=\"1.2 作为一种技术的算法\"></a>1.2 作为一种技术的算法</h3><ul>\n<li>考虑效率：时间与空间资源的消耗</li>\n</ul>\n<h2 id=\"第二章-算法基础\"><a href=\"#第二章-算法基础\" class=\"headerlink\" title=\"第二章 算法基础\"></a>第二章 算法基础</h2><h3 id=\"2-1-插入排序\"><a href=\"#2-1-插入排序\" class=\"headerlink\" title=\"2.1 插入排序\"></a>2.1 插入排序</h3><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n个数的一个序列&lt;<span class=\"built_in\">a1</span>,<span class=\"built_in\">a2</span>,...,an&gt;</span><br><span class=\"line\">输出：输入序列的一个排列&lt;<span class=\"built_in\">a1</span>’,<span class=\"built_in\">a2</span>’,...,an’&gt;，满足<span class=\"built_in\">a1</span>’≤<span class=\"built_in\">a2</span>’≤...≤an’</span><br></pre></td></tr></table></figure>\n<ul>\n<li>算法：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertionsort</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> length)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//插入排序</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> key; <span class=\"comment\">//暂存当前位置的值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;length;j++)&#123;</span><br><span class=\"line\">        key = A[j]; <span class=\"comment\">//暂存当前位置的值</span></span><br><span class=\"line\">        i= j<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&gt;=<span class=\"number\">0</span> &amp;&amp; A[i]&gt;key)&#123; <span class=\"comment\">//如果前面的值比key大，则交换</span></span><br><span class=\"line\">            A[i+<span class=\"number\">1</span>]=A[i];</span><br><span class=\"line\">            i=i<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        A[i+<span class=\"number\">1</span>]=key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> A[<span class=\"number\">9</span>]=&#123;<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>&#125;; <span class=\"comment\">//举了个栗子</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length=<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(A)/<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(A[<span class=\"number\">0</span>]); <span class=\"comment\">//求数组的长度的一种方法</span></span><br><span class=\"line\">    <span class=\"built_in\">insertionsort</span>(A,length);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//输出排序后的序列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;A[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><img src=\"https://s2.ax1x.com/2019/09/19/nO9np9.png\" alt=\"nO9np9.png\"></li>\n<li>伪代码👇</li>\n<li><img src=\"https://s2.ax1x.com/2019/09/23/uPypCV.png\" alt=\"uPypCV.png\"></li>\n<li><img src=\"https://s2.ax1x.com/2019/09/23/uPynC6.png\" alt=\"uPynC6.png\"></li>\n</ul>\n<h3 id=\"2-2-分析算法\"><a href=\"#2-2-分析算法\" class=\"headerlink\" title=\"2.2 分析算法\"></a>2.2 分析算法</h3><ul>\n<li>时间复杂度：最好的情况下：O(n),最坏的情况下：O(n²),平均情况下：O(n²)</li>\n<li><img src=\"https://s2.ax1x.com/2019/09/23/uP6qTs.png\" alt=\"uP6qTs.png\"><h3 id=\"2-3-设计算法\"><a href=\"#2-3-设计算法\" class=\"headerlink\" title=\"2.3 设计算法\"></a>2.3 设计算法</h3><h4 id=\"2-3-1-分治法\"><a href=\"#2-3-1-分治法\" class=\"headerlink\" title=\"2.3.1 分治法\"></a>2.3.1 分治法</h4></li>\n<li>分治法：将原问题分解为几个规模较小但类似于原问题的子问题，递归求解这些子问题，然后再合并这些子问题的解来建立原问题的解</li>\n<li>归并排序：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> mid,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> aux[right-left+<span class=\"number\">1</span>];<span class=\"comment\">//开辟一个新的数组，将原数组映射进去</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m=left;m&lt;=right;m++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        aux[m-left]=arr[m];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=left,j=mid+<span class=\"number\">1</span>;<span class=\"comment\">//i和j分别指向两个子数组开头部分</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=left;k&lt;=right;k++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;mid)<span class=\"comment\">//右边还有剩余</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            arr[k]=aux[j-left];</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&gt;right)<span class=\"comment\">//左边还有剩余</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            arr[k]=aux[i-left];</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(aux[i-left]&lt;aux[j-left])<span class=\"comment\">//左边小于右边</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            arr[k]=aux[i-left];</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span><span class=\"comment\">//右边小于左边</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            arr[k]=aux[j-left];</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//递归的使用归并排序，对arr[l....right]排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &gt;=right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(left+right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(arr,left,mid);</span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(arr,mid+<span class=\"number\">1</span>,right);</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(arr,left,mid,right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">my_merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(arr,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//举个栗子</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">6</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">my_merge_sort</span>(a,<span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;a[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><img src=\"https://s2.ax1x.com/2019/09/23/uPx85n.png\" alt=\"uPx85n.png\"></li>\n<li><img src=\"https://s2.ax1x.com/2019/09/23/uPxXqg.png\" alt=\"uPxXqg.png\"></li>\n</ul>\n<h4 id=\"2-3-2-分析分治算法\"><a href=\"#2-3-2-分析分治算法\" class=\"headerlink\" title=\"2.3.2 分析分治算法\"></a>2.3.2 分析分治算法</h4><ul>\n<li><img src=\"https://s2.ax1x.com/2019/09/23/uiBjot.png\" alt=\"uiBjot.png\"></li>\n<li>时间复杂度：平均情况：O(nlogn),最好情况：O(nlogn),最坏情况：O(nlogn)</li>\n</ul>","categories":[{"name":"学习笔记","path":"api/categories/学习笔记.json"}],"tags":[{"name":"算法","path":"api/tags/算法.json"},{"name":"c++","path":"api/tags/c++.json"}]}