{"title":"Python小工具 | 如何自动下载、压缩并批量替换文章中的外链图片","slug":"代码编程-python批量替换博客图片","date":"2022-07-01T02:52:43.000Z","updated":"2022-07-01T02:52:43.000Z","comments":true,"path":"api/articles/代码编程-python批量替换博客图片.json","excerpt":null,"covers":null,"content":"<p>由于前段时间JsdelivrCDN加速的崩盘，博主存在Github上的图片全部访问失败，文章阅读体验极差，于是2022年以后的文章全部采用npm做图床，在此之前的文章由于数量过多并没有替换。再加上之前一直忙着研一阶段的期末考，懒得动博客。幸好这段时间有空，于是写了个python小工具来替换博客中外链图片，具体流程如下：</p>\n<ul>\n<li>首先，遍历<code>hexo\\source\\_posts\\</code>文件夹中的全部文章，把里面含有<code>https://cdn.jsdelivr.net/gh</code>的图片全部下载下来，并替换链接为npm的CDN链接。</li>\n<li>其次，对下载下来的图片做简单的压缩。</li>\n<li>最后，把压缩后的图片上传npm。</li>\n</ul>\n<p>总体流程非常简单，下面是具体实现。</p>\n<h1 id=\"1-下载并替换图片外链\"><a href=\"#1-下载并替换图片外链\" class=\"headerlink\" title=\"1. 下载并替换图片外链\"></a>1. 下载并替换图片外链</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> os.path <span class=\"keyword\">as</span> osp</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil <span class=\"keyword\">as</span> sh</span><br><span class=\"line\"><span class=\"keyword\">import</span>  re</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm.auto <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makedir</span>(<span class=\"params\">root</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> osp.exists(root):</span><br><span class=\"line\">        os.mkdir(root)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_img</span>(<span class=\"params\">root,img_url</span>):</span></span><br><span class=\"line\">    path=root+img_url.split(<span class=\"string\">&#x27;/&#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> osp.exists(path):</span><br><span class=\"line\">            s = requests.session()</span><br><span class=\"line\">            s.keep_alive = <span class=\"literal\">False</span> <span class=\"comment\"># 关闭多余连接</span></span><br><span class=\"line\">            r = s.get(img_url) <span class=\"comment\"># 你需要的网址</span></span><br><span class=\"line\">            <span class=\"comment\">#r=requests.get(img_url)</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(path,<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                f.write(r.content)</span><br><span class=\"line\">                f.close()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(path+<span class=\"string\">&quot;文件已存在！&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(img_url+<span class=\"string\">&quot;, 爬取失败！&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(img_url+<span class=\"string\">&quot;已下载&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findimg</span>(<span class=\"params\">line,ori_pre</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        img = re.findall(<span class=\"string\">f&quot;(<span class=\"subst\">&#123;ori_pre&#125;</span>.*?(\\.jfif|\\.svg|\\.webp|\\.gif|\\.jpeg|\\.jpg|\\.png|\\.PNG|\\.JPEG|\\.JPG))&quot;</span>,line)[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">        name = img.split(<span class=\"string\">&#x27;/&#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;已自动忽略：&quot;</span>,line)</span><br><span class=\"line\">        img,name = <span class=\"literal\">None</span>,<span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> img,name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">changeurl</span>(<span class=\"params\">ori_root,save_root,down_root,ori_pre,new_pre</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> ori_pre[-<span class=\"number\">1</span>]==<span class=\"string\">&#x27;/&#x27;</span> <span class=\"keyword\">and</span> new_pre[-<span class=\"number\">1</span>]==<span class=\"string\">&quot;/&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> osp.isdir(ori_root):</span><br><span class=\"line\">        files = os.listdir(ori_root)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        file = osp.basename(ori_root)</span><br><span class=\"line\">        ori_root = ori_root.split(file)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        files = [file]</span><br><span class=\"line\">    makedir(save_root)</span><br><span class=\"line\">    makedir(down_root)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> tqdm(files):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Starting... &quot;</span>,file)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(ori_root+file,<span class=\"string\">&#x27;r&#x27;</span>,encoding = <span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            content = f.readlines()</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(save_root+file,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> content:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ori_pre <span class=\"keyword\">in</span> line:</span><br><span class=\"line\">                    img,name = findimg(line,ori_pre)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> img!=<span class=\"literal\">None</span>:</span><br><span class=\"line\">                        change = new_pre + name</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(line,<span class=\"string\">&quot;==&gt;&quot;</span>,line.replace(img,change))</span><br><span class=\"line\">                        code = save_img(down_root,img)</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> code == <span class=\"number\">0</span>:</span><br><span class=\"line\">                            line = line.replace(img,change)</span><br><span class=\"line\">                f.write(line)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    ori_root = <span class=\"string\">&#x27;./hexo/source/_posts/&#x27;</span></span><br><span class=\"line\">    save_root = <span class=\"string\">&#x27;./markdown/&#x27;</span></span><br><span class=\"line\">    down_root = <span class=\"string\">&#x27;./download/&#x27;</span></span><br><span class=\"line\">    ori_pre = <span class=\"string\">&#x27;https://cdn.jsdelivr.net/gh/&#x27;</span></span><br><span class=\"line\">    new_pre = <span class=\"string\">&#x27;https://npm.elemecdn.com/justlovesmile-post@1.0.3/&#x27;</span></span><br><span class=\"line\">    changeurl(ori_root,save_root,down_root,ori_pre,new_pre)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-压缩图片\"><a href=\"#2-压缩图片\" class=\"headerlink\" title=\"2. 压缩图片\"></a>2. 压缩图片</h1><p>由第一步已经下载好图片了，这一步需要对图片进行简单的压缩，这里我采用最简单的图片缩放，通过<code>缩小图片来压缩(有损)</code>，需要无损压缩的可以用软件或者其他方法（百度、CSDN）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> glob <span class=\"keyword\">import</span> glob</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> chain</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># image_dir = &quot;image_dir&quot;</span></span><br><span class=\"line\">template_dir = <span class=\"string\">&#x27;template&#x27;</span></span><br><span class=\"line\">output_dir = <span class=\"string\">&#x27;output&#x27;</span></span><br><span class=\"line\">error_dir = <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clean_dir</span>(<span class=\"params\">dir_name</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(dir_name):</span><br><span class=\"line\">        shutil.rmtree(dir_name)</span><br><span class=\"line\">        os.makedirs(dir_name)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        os.makedirs(dir_name)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># image_file_list = glob(f&quot;&#123;image_dir&#125;/*&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># image_file_list</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">imagesize</span>(<span class=\"params\">filepath</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    获得文件的磁盘大小</span></span><br><span class=\"line\"><span class=\"string\">    :param filepath:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> os.path.getsize(filepath) / <span class=\"number\">1024</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compress_image</span>(<span class=\"params\">image_path, target_size=<span class=\"number\">500</span></span>):</span></span><br><span class=\"line\">    raw_image = Image.<span class=\"built_in\">open</span>(image_path)</span><br><span class=\"line\">    temp_image_name = image_path.split(os.sep)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    template_image = os.path.join(template_dir, temp_image_name)</span><br><span class=\"line\">    output_image = os.path.join(output_dir, temp_image_name)</span><br><span class=\"line\">    error_image = os.path.join(error_dir, temp_image_name)</span><br><span class=\"line\"> </span><br><span class=\"line\">    target_size = target_size  <span class=\"comment\"># kb</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> imagesize(image_path) &lt; target_size:</span><br><span class=\"line\">            shutil.copyfile(image_path, output_image)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            width, height = raw_image.size</span><br><span class=\"line\">            raw_image.resize((<span class=\"built_in\">int</span>(width * <span class=\"number\">0.9</span>), <span class=\"built_in\">int</span>(height * <span class=\"number\">0.9</span>)), Image.ANTIALIAS).save(template_image)</span><br><span class=\"line\">            <span class=\"keyword\">while</span> imagesize(template_image) &gt; target_size:</span><br><span class=\"line\">                template_iamge2 = Image.<span class=\"built_in\">open</span>(template_image)</span><br><span class=\"line\">                width_2, height_2 = template_iamge2.size</span><br><span class=\"line\">                template_iamge2.resize((<span class=\"built_in\">int</span>(width_2 * <span class=\"number\">0.9</span>), <span class=\"built_in\">int</span>(height_2 * <span class=\"number\">0.9</span>)), Image.ANTIALIAS).save(template_image)</span><br><span class=\"line\"> </span><br><span class=\"line\">            shutil.copyfile(template_image, output_image)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        shutil.copyfile(image_path, error_image)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;文件保存失败: <span class=\"subst\">&#123;image_path&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># print(e)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 批量创建文件夹</span></span><br><span class=\"line\">    [clean_dir(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> [template_dir, output_dir, error_dir]]</span><br><span class=\"line\"> </span><br><span class=\"line\">    image_dir = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;dir path:&#x27;</span>)</span><br><span class=\"line\">    target_size = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;target size (kb):&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    image_file_list = <span class=\"built_in\">list</span>(chain(*[glob(os.path.join(image_dir, i)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;*.png&#x27;</span>, <span class=\"string\">&#x27;*.jpg&#x27;</span>, <span class=\"string\">&#x27;*.jpeg&#x27;</span>]]))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#for temp_image_path in tqdm(image_file_list):</span></span><br><span class=\"line\">    <span class=\"comment\">#     compress_image(temp_image_path)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\n\\n文件保存父目录: <span class=\"subst\">&#123;os.getcwd()&#125;</span>\\n&#x27;</span></span><br><span class=\"line\">          <span class=\"string\">f&#x27;输出文件位置:<span class=\"subst\">&#123;os.path.join(os.getcwd(), output_dir)&#125;</span>\\n\\n&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># parallel</span></span><br><span class=\"line\">    P = Pool(processes=<span class=\"number\">10</span>)</span><br><span class=\"line\">    pbar = tqdm(total=<span class=\"built_in\">len</span>(image_file_list))</span><br><span class=\"line\"> </span><br><span class=\"line\">    res_temp = [P.apply_async(func=compress_image, args=(i,target_size), callback=<span class=\"keyword\">lambda</span> _: pbar.update(<span class=\"number\">1</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span></span><br><span class=\"line\">                image_file_list]</span><br><span class=\"line\"> </span><br><span class=\"line\">    _ = [res.get() <span class=\"keyword\">for</span> res <span class=\"keyword\">in</span> res_temp]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-上传npm\"><a href=\"#3-上传npm\" class=\"headerlink\" title=\"3. 上传npm\"></a>3. 上传npm</h1><p>到这一步就很简单了，把之前压缩好的图片放在一个文件夹里，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- mj-img\\</span><br><span class=\"line\">    - 1.jpg</span><br><span class=\"line\">    - 2.png</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    - xxx.jpeg</span><br></pre></td></tr></table></figure>\n\n<p>之前用过npm的，可以直接在文件夹里打开<code>bash</code>，输入<code>npm init</code>与<code>npm publish</code>.</p>\n<p>没有使用过npm的，可以参考<a href=\"https://akilar.top/posts/3e956346/\">Akilar的npm图床使用技巧</a>.</p>\n","more":"<p>由于前段时间JsdelivrCDN加速的崩盘，博主存在Github上的图片全部访问失败，文章阅读体验极差，于是2022年以后的文章全部采用npm做图床，在此之前的文章由于数量过多并没有替换。再加上之前一直忙着研一阶段的期末考，懒得动博客。幸好这段时间有空，于是写了个python小工具来替换博客中外链图片，具体流程如下：</p>\n<ul>\n<li>首先，遍历<code>hexo\\source\\_posts\\</code>文件夹中的全部文章，把里面含有<code>https://cdn.jsdelivr.net/gh</code>的图片全部下载下来，并替换链接为npm的CDN链接。</li>\n<li>其次，对下载下来的图片做简单的压缩。</li>\n<li>最后，把压缩后的图片上传npm。</li>\n</ul>\n<p>总体流程非常简单，下面是具体实现。</p>\n<h1 id=\"1-下载并替换图片外链\"><a href=\"#1-下载并替换图片外链\" class=\"headerlink\" title=\"1. 下载并替换图片外链\"></a>1. 下载并替换图片外链</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> os.path <span class=\"keyword\">as</span> osp</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil <span class=\"keyword\">as</span> sh</span><br><span class=\"line\"><span class=\"keyword\">import</span>  re</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm.auto <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makedir</span>(<span class=\"params\">root</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> osp.exists(root):</span><br><span class=\"line\">        os.mkdir(root)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_img</span>(<span class=\"params\">root,img_url</span>):</span></span><br><span class=\"line\">    path=root+img_url.split(<span class=\"string\">&#x27;/&#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> osp.exists(path):</span><br><span class=\"line\">            s = requests.session()</span><br><span class=\"line\">            s.keep_alive = <span class=\"literal\">False</span> <span class=\"comment\"># 关闭多余连接</span></span><br><span class=\"line\">            r = s.get(img_url) <span class=\"comment\"># 你需要的网址</span></span><br><span class=\"line\">            <span class=\"comment\">#r=requests.get(img_url)</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(path,<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                f.write(r.content)</span><br><span class=\"line\">                f.close()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(path+<span class=\"string\">&quot;文件已存在！&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(img_url+<span class=\"string\">&quot;, 爬取失败！&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(img_url+<span class=\"string\">&quot;已下载&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findimg</span>(<span class=\"params\">line,ori_pre</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        img = re.findall(<span class=\"string\">f&quot;(<span class=\"subst\">&#123;ori_pre&#125;</span>.*?(\\.jfif|\\.svg|\\.webp|\\.gif|\\.jpeg|\\.jpg|\\.png|\\.PNG|\\.JPEG|\\.JPG))&quot;</span>,line)[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">        name = img.split(<span class=\"string\">&#x27;/&#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;已自动忽略：&quot;</span>,line)</span><br><span class=\"line\">        img,name = <span class=\"literal\">None</span>,<span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> img,name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">changeurl</span>(<span class=\"params\">ori_root,save_root,down_root,ori_pre,new_pre</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> ori_pre[-<span class=\"number\">1</span>]==<span class=\"string\">&#x27;/&#x27;</span> <span class=\"keyword\">and</span> new_pre[-<span class=\"number\">1</span>]==<span class=\"string\">&quot;/&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> osp.isdir(ori_root):</span><br><span class=\"line\">        files = os.listdir(ori_root)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        file = osp.basename(ori_root)</span><br><span class=\"line\">        ori_root = ori_root.split(file)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        files = [file]</span><br><span class=\"line\">    makedir(save_root)</span><br><span class=\"line\">    makedir(down_root)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> tqdm(files):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Starting... &quot;</span>,file)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(ori_root+file,<span class=\"string\">&#x27;r&#x27;</span>,encoding = <span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            content = f.readlines()</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(save_root+file,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> content:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ori_pre <span class=\"keyword\">in</span> line:</span><br><span class=\"line\">                    img,name = findimg(line,ori_pre)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> img!=<span class=\"literal\">None</span>:</span><br><span class=\"line\">                        change = new_pre + name</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(line,<span class=\"string\">&quot;==&gt;&quot;</span>,line.replace(img,change))</span><br><span class=\"line\">                        code = save_img(down_root,img)</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> code == <span class=\"number\">0</span>:</span><br><span class=\"line\">                            line = line.replace(img,change)</span><br><span class=\"line\">                f.write(line)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    ori_root = <span class=\"string\">&#x27;./hexo/source/_posts/&#x27;</span></span><br><span class=\"line\">    save_root = <span class=\"string\">&#x27;./markdown/&#x27;</span></span><br><span class=\"line\">    down_root = <span class=\"string\">&#x27;./download/&#x27;</span></span><br><span class=\"line\">    ori_pre = <span class=\"string\">&#x27;https://cdn.jsdelivr.net/gh/&#x27;</span></span><br><span class=\"line\">    new_pre = <span class=\"string\">&#x27;https://npm.elemecdn.com/justlovesmile-post@1.0.3/&#x27;</span></span><br><span class=\"line\">    changeurl(ori_root,save_root,down_root,ori_pre,new_pre)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-压缩图片\"><a href=\"#2-压缩图片\" class=\"headerlink\" title=\"2. 压缩图片\"></a>2. 压缩图片</h1><p>由第一步已经下载好图片了，这一步需要对图片进行简单的压缩，这里我采用最简单的图片缩放，通过<code>缩小图片来压缩(有损)</code>，需要无损压缩的可以用软件或者其他方法（百度、CSDN）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> glob <span class=\"keyword\">import</span> glob</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> chain</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># image_dir = &quot;image_dir&quot;</span></span><br><span class=\"line\">template_dir = <span class=\"string\">&#x27;template&#x27;</span></span><br><span class=\"line\">output_dir = <span class=\"string\">&#x27;output&#x27;</span></span><br><span class=\"line\">error_dir = <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clean_dir</span>(<span class=\"params\">dir_name</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(dir_name):</span><br><span class=\"line\">        shutil.rmtree(dir_name)</span><br><span class=\"line\">        os.makedirs(dir_name)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        os.makedirs(dir_name)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># image_file_list = glob(f&quot;&#123;image_dir&#125;/*&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># image_file_list</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">imagesize</span>(<span class=\"params\">filepath</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    获得文件的磁盘大小</span></span><br><span class=\"line\"><span class=\"string\">    :param filepath:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> os.path.getsize(filepath) / <span class=\"number\">1024</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compress_image</span>(<span class=\"params\">image_path, target_size=<span class=\"number\">500</span></span>):</span></span><br><span class=\"line\">    raw_image = Image.<span class=\"built_in\">open</span>(image_path)</span><br><span class=\"line\">    temp_image_name = image_path.split(os.sep)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    template_image = os.path.join(template_dir, temp_image_name)</span><br><span class=\"line\">    output_image = os.path.join(output_dir, temp_image_name)</span><br><span class=\"line\">    error_image = os.path.join(error_dir, temp_image_name)</span><br><span class=\"line\"> </span><br><span class=\"line\">    target_size = target_size  <span class=\"comment\"># kb</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> imagesize(image_path) &lt; target_size:</span><br><span class=\"line\">            shutil.copyfile(image_path, output_image)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            width, height = raw_image.size</span><br><span class=\"line\">            raw_image.resize((<span class=\"built_in\">int</span>(width * <span class=\"number\">0.9</span>), <span class=\"built_in\">int</span>(height * <span class=\"number\">0.9</span>)), Image.ANTIALIAS).save(template_image)</span><br><span class=\"line\">            <span class=\"keyword\">while</span> imagesize(template_image) &gt; target_size:</span><br><span class=\"line\">                template_iamge2 = Image.<span class=\"built_in\">open</span>(template_image)</span><br><span class=\"line\">                width_2, height_2 = template_iamge2.size</span><br><span class=\"line\">                template_iamge2.resize((<span class=\"built_in\">int</span>(width_2 * <span class=\"number\">0.9</span>), <span class=\"built_in\">int</span>(height_2 * <span class=\"number\">0.9</span>)), Image.ANTIALIAS).save(template_image)</span><br><span class=\"line\"> </span><br><span class=\"line\">            shutil.copyfile(template_image, output_image)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        shutil.copyfile(image_path, error_image)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;文件保存失败: <span class=\"subst\">&#123;image_path&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># print(e)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 批量创建文件夹</span></span><br><span class=\"line\">    [clean_dir(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> [template_dir, output_dir, error_dir]]</span><br><span class=\"line\"> </span><br><span class=\"line\">    image_dir = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;dir path:&#x27;</span>)</span><br><span class=\"line\">    target_size = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;target size (kb):&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    image_file_list = <span class=\"built_in\">list</span>(chain(*[glob(os.path.join(image_dir, i)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;*.png&#x27;</span>, <span class=\"string\">&#x27;*.jpg&#x27;</span>, <span class=\"string\">&#x27;*.jpeg&#x27;</span>]]))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#for temp_image_path in tqdm(image_file_list):</span></span><br><span class=\"line\">    <span class=\"comment\">#     compress_image(temp_image_path)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\n\\n文件保存父目录: <span class=\"subst\">&#123;os.getcwd()&#125;</span>\\n&#x27;</span></span><br><span class=\"line\">          <span class=\"string\">f&#x27;输出文件位置:<span class=\"subst\">&#123;os.path.join(os.getcwd(), output_dir)&#125;</span>\\n\\n&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># parallel</span></span><br><span class=\"line\">    P = Pool(processes=<span class=\"number\">10</span>)</span><br><span class=\"line\">    pbar = tqdm(total=<span class=\"built_in\">len</span>(image_file_list))</span><br><span class=\"line\"> </span><br><span class=\"line\">    res_temp = [P.apply_async(func=compress_image, args=(i,target_size), callback=<span class=\"keyword\">lambda</span> _: pbar.update(<span class=\"number\">1</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span></span><br><span class=\"line\">                image_file_list]</span><br><span class=\"line\"> </span><br><span class=\"line\">    _ = [res.get() <span class=\"keyword\">for</span> res <span class=\"keyword\">in</span> res_temp]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-上传npm\"><a href=\"#3-上传npm\" class=\"headerlink\" title=\"3. 上传npm\"></a>3. 上传npm</h1><p>到这一步就很简单了，把之前压缩好的图片放在一个文件夹里，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- mj-img\\</span><br><span class=\"line\">    - 1.jpg</span><br><span class=\"line\">    - 2.png</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    - xxx.jpeg</span><br></pre></td></tr></table></figure>\n\n<p>之前用过npm的，可以直接在文件夹里打开<code>bash</code>，输入<code>npm init</code>与<code>npm publish</code>.</p>\n<p>没有使用过npm的，可以参考<a href=\"https://akilar.top/posts/3e956346/\">Akilar的npm图床使用技巧</a>.</p>\n","categories":[{"name":"代码编程","path":"api/categories/代码编程.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"爬虫","path":"api/tags/爬虫.json"}]}